Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:any tree), revflat (x) = qrevaflat (x) ((Nil))(rank : 0.)


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))

---------------------------------------
forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_tree1(rank:4.)
=================================================
Progress: 2


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))

---------------------------------------
forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_tree1(rank : 4.)


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
revflat (Leaf) = qrevaflat (Leaf) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 3


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
revflat (Leaf) = qrevaflat (Leaf) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
revflat (Node (any_tree2) (any1) (any_tree3)) = qrevaflat (Node (any_tree2) (any1) (any_tree3)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 4


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
revflat (Node (any_tree2) (any1) (any_tree3)) = qrevaflat (Node (any_tree2) (any1) (any_tree3)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(revflat (any_tree2) @ (any1::revflat (any_tree3))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:11.)
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:11.)
=================================================
Progress: 5


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(revflat (any_tree2) @ (any1::revflat (any_tree3))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 11.)


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(revflat (any_tree2) @ (any1::qrevaflat (any_tree3) ((Nil)))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:3.)
=================================================
Progress: 6


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(revflat (any_tree2) @ (any1::qrevaflat (any_tree3) ((Nil)))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 3.)


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(qrevaflat (any_tree2) ((Nil)) @ (any1::qrevaflat (any_tree3) ((Nil)))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
rewrite IH1 in goal at 0
Prop: (qrevaflat (Node (Leaf) (7) (Leaf)) ((Nil)) @ (Nil)) = qrevaflat (Node (Leaf) (7) (Leaf)) ((Nil))
Prop: (qrevaflat (Leaf) ((Nil)) @ (6::(Nil))) = qrevaflat (Leaf) ((6::(Nil)))
Prop: (qrevaflat (Leaf) ((Nil)) @ (Nil)) = qrevaflat (Leaf) ((Nil))
previous tactics
simpl in goal
rewrite IH2 in goal at 0
Prop: (revflat (Leaf) @ (Nil)) = qrevaflat (Leaf) ((Nil))
Prop: (revflat (Node (Leaf) (2) (Leaf)) @ (Nil)) = qrevaflat (Node (Leaf) (2) (Leaf)) ((Nil))
Prop: (revflat (Node (Leaf) (3) (Leaf)) @ (Nil)) = qrevaflat (Node (Leaf) (3) (Leaf)) ((Nil))
previous tactics
simpl in goal
parent
revflat (any_tree2)
lower
revflat(_)
upper
@(_, Cons(any1, revflat(any_tree3)))
remove upper
revflat(any_tree2)
remove lower
revflat(_)
remove upper
@(revflat(any_tree4), Cons(any2, revflat(any_tree5)))
remove lower
@(revflat(_), Cons(any2, revflat(any_tree5)))
remove upper
@(@(revflat(any_tree6), Cons(any3, revflat(any_tree7))), Cons(any2, revflat(any_tree5)))
remove lower
@(@(revflat(_), Cons(any3, revflat(any_tree7))), Cons(any2, revflat(any_tree5)))
parent
qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))
lower
qrevaflat(_, Cons(any1, qrevaflat(any_tree3, Nil())))
upper
_
remove upper
qrevaflat(any_tree3, Nil())
remove lower
qrevaflat(any_tree3, Nil())
remove upper
qrevaflat(any_tree2, Cons(any1, qrevaflat(any_tree3, Nil())))
remove lower
qrevaflat(any_tree2, Cons(any1, qrevaflat(any_tree3, Nil())))
remove upper
qrevaflat(any_tree4, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, Nil())))))
remove lower
qrevaflat(any_tree4, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, Nil())))))
remove upper
qrevaflat(any_tree6, Cons(any3, qrevaflat(any_tree7, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, Nil())))))))
remove lower
qrevaflat(any_tree6, Cons(any3, qrevaflat(any_tree7, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, Nil())))))))
validate generalize_common_subterm_goal
Prop: (revflat (Leaf) @ (0::revflat (Leaf))) = qrevaflat (Leaf) ((0::qrevaflat (Leaf) ((Nil))))
Prop: (revflat (Leaf) @ (1::revflat (Leaf))) = qrevaflat (Leaf) ((1::qrevaflat (Leaf) ((Nil))))
Prop: (revflat (Leaf) @ (3::revflat (Leaf))) = qrevaflat (Leaf) ((3::qrevaflat (Leaf) ((Nil))))
Lemma List
forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
End of Lemma List


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(revflat (any_tree2) @ (any1::qrevaflat (any_tree3) ((Nil)))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)
End of Lemma List


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(qrevaflat (any_tree2) ((Nil)) @ (any1::qrevaflat (any_tree3) ((Nil)))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 7


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(revflat (any_tree2) @ (any1::qrevaflat (any_tree3) ((Nil)))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)(rank : 0.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)

---------------------------------------
forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_tree1(rank:6.)
=================================================
Progress: 8


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(qrevaflat (any_tree2) ((Nil)) @ (any1::qrevaflat (any_tree3) ((Nil)))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)(rank : 0.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)

---------------------------------------
forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_tree1(rank:6.)
=================================================
Progress: 9


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)

---------------------------------------
forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_tree1(rank : 6.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any_list1:any list), (revflat (Leaf) @ any_list1) = qrevaflat (Leaf) (any_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 10


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any_list1:any list), (revflat (Leaf) @ any_list1) = qrevaflat (Leaf) (any_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (revflat (Node (any_tree2) (any1) (any_tree3)) @ any_list1) = qrevaflat (Node (any_tree2) (any1) (any_tree3)) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 11


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (revflat (Node (any_tree2) (any1) (any_tree3)) @ any_list1) = qrevaflat (Node (any_tree2) (any1) (any_tree3)) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), ((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro any_list1(rank:5.)
rewrite IH1 in goal at 0(rank:13.)
rewrite <- IH1 in goal at 0(rank:13.)
rewrite <- IH2 in goal at 0(rank:13.)
=================================================
Progress: 12


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), ((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any_list1(rank : 5.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:13.)
rewrite <- IH1 in goal at 0(rank:13.)
rewrite <- IH2 in goal at 0(rank:13.)
=================================================
Progress: 13


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)

---------------------------------------
forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_tree1(rank : 6.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any_list1:any list), (qrevaflat (Leaf) ((Nil)) @ any_list1) = qrevaflat (Leaf) (any_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 14


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any_list1:any list), (qrevaflat (Leaf) ((Nil)) @ any_list1) = qrevaflat (Leaf) (any_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (qrevaflat (any_tree2) ((Nil)) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (qrevaflat (any_tree3) ((Nil)) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (qrevaflat (Node (any_tree2) (any1) (any_tree3)) ((Nil)) @ any_list1) = qrevaflat (Node (any_tree2) (any1) (any_tree3)) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 15


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (qrevaflat (any_tree2) ((Nil)) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (qrevaflat (any_tree3) ((Nil)) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (qrevaflat (Node (any_tree2) (any1) (any_tree3)) ((Nil)) @ any_list1) = qrevaflat (Node (any_tree2) (any1) (any_tree3)) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (qrevaflat (any_tree2) ((Nil)) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (qrevaflat (any_tree3) ((Nil)) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil)))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
intro any_list1(rank:5.)
rewrite <- IH2 in goal at 2(rank:13.)
rewrite <- IH2 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 1(rank:21.)
rewrite <- IH1 in goal at 1(rank:21.)
rewrite <- IH1 in goal at 2(rank:21.)
rewrite <- IH1 in goal at 0(rank:21.)
=================================================
Progress: 16


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (qrevaflat (any_tree2) ((Nil)) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (qrevaflat (any_tree3) ((Nil)) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil)))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any_list1(rank : 5.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (qrevaflat (any_tree2) ((Nil)) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (qrevaflat (any_tree3) ((Nil)) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
(qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil)))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH2 in goal at 2(rank:13.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 1(rank:21.)
rewrite <- IH1 in goal at 2(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 1(rank:21.)
=================================================
Progress: 17


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(revflat (any_tree2) @ (any1::revflat (any_tree3))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 11.)


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(revflat (any_tree2) @ (any1::revflat (any_tree3))) = qrevaflat (any_tree2) ((any1::revflat (any_tree3)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:3.)
=================================================
Progress: 18


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(revflat (any_tree2) @ (any1::revflat (any_tree3))) = qrevaflat (any_tree2) ((any1::revflat (any_tree3)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 3.)


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(qrevaflat (any_tree2) ((Nil)) @ (any1::revflat (any_tree3))) = qrevaflat (any_tree2) ((any1::revflat (any_tree3)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite IH1 in goal at 0
Prop: (qrevaflat (Leaf) ((Nil)) @ (Nil)) = qrevaflat (Leaf) ((Nil))
Prop: (qrevaflat (Leaf) ((Nil)) @ (Nil)) = qrevaflat (Leaf) ((Nil))
Prop: (qrevaflat (Leaf) ((Nil)) @ (Nil)) = qrevaflat (Leaf) ((Nil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
parent
revflat (any_tree2)
lower
revflat(_)
upper
@(_, Cons(any1, revflat(any_tree3)))
remove upper
revflat(any_tree2)
remove lower
revflat(_)
remove upper
@(revflat(any_tree4), Cons(any2, revflat(any_tree5)))
remove lower
@(revflat(_), Cons(any2, revflat(any_tree5)))
remove upper
@(@(revflat(any_tree6), Cons(any3, revflat(any_tree7))), Cons(any2, revflat(any_tree5)))
remove lower
@(@(revflat(_), Cons(any3, revflat(any_tree7))), Cons(any2, revflat(any_tree5)))
parent
qrevaflat (any_tree2) ((any1::revflat (any_tree3)))
lower
qrevaflat(_, Cons(any1, revflat(any_tree3)))
upper
_
remove upper
qrevaflat(any_tree3, Nil())
remove lower
qrevaflat(any_tree3, Nil())
remove upper
qrevaflat(any_tree2, Cons(any1, revflat(any_tree3)))
remove lower
qrevaflat(any_tree2, Cons(any1, revflat(any_tree3)))
remove upper
qrevaflat(any_tree4, Cons(any2, @(revflat(any_tree5), Cons(any1, revflat(any_tree3)))))
remove lower
qrevaflat(any_tree4, Cons(any2, @(revflat(any_tree5), Cons(any1, revflat(any_tree3)))))
remove upper
qrevaflat(any_tree6, Cons(any3, @(@(revflat(any_tree7), Cons(any2, revflat(any_tree5))), Cons(any1, revflat(any_tree3)))))
remove lower
qrevaflat(any_tree6, Cons(any3, @(@(revflat(any_tree7), Cons(any2, revflat(any_tree5))), Cons(any1, revflat(any_tree3)))))
Prop: (revflat (Node (Node (Leaf) (5) (Leaf)) (3) (Leaf)) @ (Nil)) = qrevaflat (Node (Node (Leaf) (5) (Leaf)) (3) (Leaf)) ((Nil))
Prop: (revflat (Leaf) @ (0::(0::(Nil)))) = qrevaflat (Leaf) ((0::(0::(Nil))))
Prop: (revflat (Leaf) @ (Nil)) = qrevaflat (Leaf) ((Nil))
previous tactics
simpl in goal
parent
revflat (any_tree2)
lower
revflat(_)
upper
@(_, Cons(any1, revflat(any_tree3)))
remove upper
revflat(any_tree2)
remove lower
revflat(_)
remove upper
@(revflat(any_tree4), Cons(any2, revflat(any_tree5)))
remove lower
@(revflat(_), Cons(any2, revflat(any_tree5)))
remove upper
@(@(revflat(any_tree6), Cons(any3, revflat(any_tree7))), Cons(any2, revflat(any_tree5)))
remove lower
@(@(revflat(_), Cons(any3, revflat(any_tree7))), Cons(any2, revflat(any_tree5)))
parent
qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))
lower
qrevaflat(_, Cons(any1, qrevaflat(any_tree3, Nil())))
upper
_
remove upper
qrevaflat(any_tree3, Nil())
remove lower
qrevaflat(any_tree3, Nil())
remove upper
qrevaflat(any_tree2, Cons(any1, qrevaflat(any_tree3, Nil())))
remove lower
qrevaflat(any_tree2, Cons(any1, qrevaflat(any_tree3, Nil())))
remove upper
qrevaflat(any_tree4, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, Nil())))))
remove lower
qrevaflat(any_tree4, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, Nil())))))
remove upper
qrevaflat(any_tree6, Cons(any3, qrevaflat(any_tree7, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, Nil())))))))
remove lower
qrevaflat(any_tree6, Cons(any3, qrevaflat(any_tree7, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, Nil())))))))
validate generalize_common_subterm_goal
Prop: (revflat (Leaf) @ (2::revflat (Node (Node (Leaf) (0) (Leaf)) (0) (Node (Leaf) (1) (Leaf))))) = qrevaflat (Leaf) ((2::qrevaflat (Node (Node (Leaf) (0) (Leaf)) (0) (Node (Leaf) (1) (Leaf))) ((Nil))))
Prop: (revflat (Leaf) @ (5::revflat (Leaf))) = qrevaflat (Leaf) ((5::qrevaflat (Leaf) ((Nil))))
Prop: (revflat (Leaf) @ (8::revflat (Leaf))) = qrevaflat (Leaf) ((8::qrevaflat (Leaf) ((Nil))))
=================================================
Progress: 19


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), ((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:13.)
rewrite <- IH1 in goal at 2(rank:21.)
=================================================
Progress: 20


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), ((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), ((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 21


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), ((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), ((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any_list1(rank:5.)
rewrite IH1 in goal at 1(rank:21.)
=================================================
Progress: 22


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), ((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any_list1(rank : 5.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 1(rank:5.)
=================================================
Progress: 23


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 5.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
(qrevaflat (any_tree2) ((any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
intro any_list1
rewrite IH1 in goal at 1
Prop: (qrevaflat (Node (Leaf) (0) (Leaf)) ((0::(Nil))) @ (Nil)) = (revflat (Node (Leaf) (0) (Leaf)) @ (0::((Nil) @ (Nil))))
Prop: (qrevaflat (Leaf) ((4::(Nil))) @ (Nil)) = (revflat (Leaf) @ (4::((Nil) @ (Nil))))
Prop: (qrevaflat (Node (Leaf) (6) (Node (Node (Leaf) (1) (Node (Leaf) (1) (Leaf))) (0) (Leaf))) ((8::(Nil))) @ (Nil)) = (revflat (Node (Leaf) (6) (Node (Node (Leaf) (1) (Node (Leaf) (1) (Leaf))) (0) (Leaf))) @ (8::((Nil) @ (Nil))))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
intro any_list1
Prop: (((8::(Nil)) @ (7::(8::(Nil)))) @ (2::(2::(0::(Nil))))) = ((8::(Nil)) @ (7::((8::(Nil)) @ (2::(2::(0::(Nil)))))))
Prop: (((Nil) @ (0::(Nil))) @ (3::(Nil))) = ((Nil) @ (0::((Nil) @ (3::(Nil)))))
Prop: (((Nil) @ (3::(Nil))) @ (Nil)) = ((Nil) @ (3::((Nil) @ (Nil))))
Lemma List
forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
End of Lemma List


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
End of Lemma List


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
(qrevaflat (any_tree2) ((any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 24


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))(rank : 0.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:8.)
=================================================
Progress: 25


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
(qrevaflat (any_tree2) ((any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))(rank : 0.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:8.)
=================================================
Progress: 26


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list2(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_list3:any list), (((Nil) @ (any1::any_list3)) @ any_list1) = ((Nil) @ (any1::(any_list3 @ any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 27


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_list3:any list), (((Nil) @ (any1::any_list3)) @ any_list1) = ((Nil) @ (any1::(any_list3 @ any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_list3:any list), (((any2::any_list4) @ (any1::any_list3)) @ any_list1) = ((any2::any_list4) @ (any1::(any_list3 @ any_list1)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 28


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_list3:any list), (((any2::any_list4) @ (any1::any_list3)) @ any_list1) = ((any2::any_list4) @ (any1::(any_list3 @ any_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_list3:any list), (any2::((any_list4 @ (any1::any_list3)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list3 @ any_list1))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:8.)
=================================================
Progress: 29


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list2(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), (qrevaflat (any_tree1) ((any1::(Nil))) @ any_list1) = (revflat (any_tree1) @ (any1::((Nil) @ any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 30


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_list3:any list), (any2::((any_list4 @ (any1::any_list3)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list3 @ any_list1))))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list3(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::(Nil))) @ any_list1)) = (any2::(any_list4 @ (any1::((Nil) @ any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 31


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), (qrevaflat (any_tree1) ((any1::(Nil))) @ any_list1) = (revflat (any_tree1) @ (any1::((Nil) @ any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), (qrevaflat (any_tree1) ((any1::(Nil))) @ any_list1) = (revflat (any_tree1) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_tree1(rank:9.)
=================================================
Progress: 32


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::(Nil))) @ any_list1)) = (any2::(any_list4 @ (any1::((Nil) @ any_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::(Nil))) @ any_list1)) = (any2::(any_list4 @ (any1::any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro any1(rank:8.)
intro any_list1(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
=================================================
Progress: 33


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::(Nil))) @ any_list1)) = (any2::(any_list4 @ (any1::any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
any1 : any
---------------------------------------
forall (any_list1:any list), (any2::((any_list4 @ (any1::(Nil))) @ any_list1)) = (any2::(any_list4 @ (any1::any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any_list1(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
=================================================
Progress: 34


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::(Nil))) @ any_list1)) = (any2::(any_list4 @ (any1::any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
any_list1 : any list
---------------------------------------
forall (any1:any), (any2::((any_list4 @ (any1::(Nil))) @ any_list1)) = (any2::(any_list4 @ (any1::any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:8.)
=================================================
Progress: 35


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
any1 : any
---------------------------------------
forall (any_list1:any list), (any2::((any_list4 @ (any1::(Nil))) @ any_list1)) = (any2::(any_list4 @ (any1::any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
any1 : any
any_list1 : any list
---------------------------------------
(any2::((any_list4 @ (any1::(Nil))) @ any_list1)) = (any2::(any_list4 @ (any1::any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:8.)
=================================================
Progress: 36


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
any_list1 : any list
---------------------------------------
forall (any1:any), (any2::((any_list4 @ (any1::(Nil))) @ any_list1)) = (any2::(any_list4 @ (any1::any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
any_list1 : any list
---------------------------------------
forall (any1:any), (any2::(any_list4 @ (any1::((Nil) @ any_list1)))) = (any2::(any_list4 @ (any1::any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 37


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
any_list1 : any list
---------------------------------------
forall (any1:any), (any2::(any_list4 @ (any1::((Nil) @ any_list1)))) = (any2::(any_list4 @ (any1::any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
any3 : any
any_list5 : any list
IH2 : forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::any_list5)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list5 @ any_list1))))
Inductive2 : any_list3 = (any3::any_list5)
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::(any3::any_list5))) @ any_list1)) = (any2::(any_list4 @ (any1::((any3::any_list5) @ any_list1))))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 3
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 38


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
any3 : any
any_list5 : any list
IH2 : forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::any_list5)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list5 @ any_list1))))
Inductive2 : any_list3 = (any3::any_list5)
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::(any3::any_list5))) @ any_list1)) = (any2::(any_list4 @ (any1::((any3::any_list5) @ any_list1))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
any3 : any
any_list5 : any list
IH2 : forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::any_list5)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list5 @ any_list1))))
Inductive2 : any_list3 = (any3::any_list5)
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::(any3::any_list5))) @ any_list1)) = (any2::(any_list4 @ (any1::(any3::(any_list5 @ any_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro any1(rank:7.)
intro any_list1(rank:7.)
rewrite IH1 in goal at 0(rank:15.)
=================================================
Progress: 39


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
any3 : any
any_list5 : any list
IH2 : forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::any_list5)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list5 @ any_list1))))
Inductive2 : any_list3 = (any3::any_list5)
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::(any3::any_list5))) @ any_list1)) = (any2::(any_list4 @ (any1::(any3::(any_list5 @ any_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
any3 : any
any_list5 : any list
IH2 : forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::any_list5)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list5 @ any_list1))))
Inductive2 : any_list3 = (any3::any_list5)
any1 : any
---------------------------------------
forall (any_list1:any list), (any2::((any_list4 @ (any1::(any3::any_list5))) @ any_list1)) = (any2::(any_list4 @ (any1::(any3::(any_list5 @ any_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any_list1(rank:7.)
rewrite IH1 in goal at 0(rank:15.)
=================================================
Progress: 40


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
any3 : any
any_list5 : any list
IH2 : forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::any_list5)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list5 @ any_list1))))
Inductive2 : any_list3 = (any3::any_list5)
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::(any3::any_list5))) @ any_list1)) = (any2::(any_list4 @ (any1::(any3::(any_list5 @ any_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 7.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
any3 : any
any_list5 : any list
IH2 : forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::any_list5)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list5 @ any_list1))))
Inductive2 : any_list3 = (any3::any_list5)
any_list1 : any list
---------------------------------------
forall (any1:any), (any2::((any_list4 @ (any1::(any3::any_list5))) @ any_list1)) = (any2::(any_list4 @ (any1::(any3::(any_list5 @ any_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:7.)
=================================================
Progress: 41


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
any3 : any
any_list5 : any list
IH2 : forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::any_list5)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list5 @ any_list1))))
Inductive2 : any_list3 = (any3::any_list5)
any1 : any
---------------------------------------
forall (any_list1:any list), (any2::((any_list4 @ (any1::(any3::any_list5))) @ any_list1)) = (any2::(any_list4 @ (any1::(any3::(any_list5 @ any_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 7.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
any3 : any
any_list5 : any list
IH2 : forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::any_list5)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list5 @ any_list1))))
Inductive2 : any_list3 = (any3::any_list5)
any1 : any
any_list1 : any list
---------------------------------------
(any2::((any_list4 @ (any1::(any3::any_list5))) @ any_list1)) = (any2::(any_list4 @ (any1::(any3::(any_list5 @ any_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:7.)
=================================================
Progress: 42


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
any3 : any
any_list5 : any list
IH2 : forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::any_list5)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list5 @ any_list1))))
Inductive2 : any_list3 = (any3::any_list5)
any_list1 : any list
---------------------------------------
forall (any1:any), (any2::((any_list4 @ (any1::(any3::any_list5))) @ any_list1)) = (any2::(any_list4 @ (any1::(any3::(any_list5 @ any_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 7.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
any3 : any
any_list5 : any list
IH2 : forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::any_list5)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list5 @ any_list1))))
Inductive2 : any_list3 = (any3::any_list5)
any_list1 : any list
---------------------------------------
forall (any1:any), (any2::(any_list4 @ (any1::((any3::any_list5) @ any_list1)))) = (any2::(any_list4 @ (any1::(any3::(any_list5 @ any_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 43


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
any_list2 : any list
any2 : any
any_list4 : any list
IH1 : forall (any1:any) (any_list1:any list) (any_list3:any list), ((any_list4 @ (any1::any_list3)) @ any_list1) = (any_list4 @ (any1::(any_list3 @ any_list1)))
Inductive1 : any_list2 = (any2::any_list4)
any_list3 : any list
any3 : any
any_list5 : any list
IH2 : forall (any1:any) (any_list1:any list), (any2::((any_list4 @ (any1::any_list5)) @ any_list1)) = (any2::(any_list4 @ (any1::(any_list5 @ any_list1))))
Inductive2 : any_list3 = (any3::any_list5)
any_list1 : any list
---------------------------------------
forall (any1:any), (any2::(any_list4 @ (any1::((any3::any_list5) @ any_list1)))) = (any2::(any_list4 @ (any1::(any3::(any_list5 @ any_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
original goal
forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
lemma
forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
tactics
assert forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
induction any_list2
reflexivity
simpl in goal
induction any_list3
simpl in goal
intro any_list1
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro any_list1
rewrite IH1 in goal at 0
reflexivity
Deduplication: 3
Tactic List : 3
rewrite lemma3 in goal at 0(rank:13.)
rewrite IH1 in goal at 1(rank:21.)
rewrite <- lemma3 in goal at 0(rank:13.)
=================================================
Progress: 44


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), (qrevaflat (any_tree1) ((any1::(Nil))) @ any_list1) = (revflat (any_tree1) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_tree1(rank : 9.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
Base2 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (Leaf) ((any1::(Nil))) @ any_list1) = (revflat (Leaf) @ (any1::any_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 45


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
Base2 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (Leaf) ((any1::(Nil))) @ any_list1) = (revflat (Leaf) @ (any1::any_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (Node (any_tree2) (any2) (any_tree3)) ((any1::(Nil))) @ any_list1) = (revflat (Node (any_tree2) (any2) (any_tree3)) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 46


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (Node (any_tree2) (any2) (any_tree3)) ((any1::(Nil))) @ any_list1) = (revflat (Node (any_tree2) (any2) (any_tree3)) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro any1(rank:8.)
intro any_list1(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 47


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any_list1(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 48


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any_list1 : any list
---------------------------------------
forall (any1:any), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:8.)
=================================================
Progress: 49


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
any_list1 : any list
---------------------------------------
(qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:8.)
=================================================
Progress: 50


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any_list1 : any list
---------------------------------------
forall (any1:any), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any_list1 : any list
---------------------------------------
forall (any1:any), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree2) ((any2::(Nil))) @ revflat (any_tree3)) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: (qrevaflat (Leaf) ((4::qrevaflat (Leaf) ((4::(Nil))))) @ (Nil)) = ((qrevaflat (Leaf) ((4::(Nil))) @ revflat (Leaf)) @ (4::(Nil)))
Prop: (qrevaflat (Leaf) ((3::qrevaflat (Leaf) ((8::(Nil))))) @ (0::(0::(2::(0::(0::(Nil))))))) = ((qrevaflat (Leaf) ((3::(Nil))) @ revflat (Leaf)) @ (8::(0::(0::(2::(0::(0::(Nil))))))))
Prop: (qrevaflat (Node (Node (Leaf) (5) (Leaf)) (0) (Leaf)) ((0::qrevaflat (Node (Leaf) (5) (Node (Leaf) (4) (Leaf))) ((5::(Nil))))) @ (Nil)) = ((qrevaflat (Node (Node (Leaf) (5) (Leaf)) (0) (Leaf)) ((0::(Nil))) @ revflat (Node (Leaf) (5) (Node (Leaf) (4) (Leaf)))) @ (5::(Nil)))
previous tactics
simpl in goal
intro any_list1
validate generalize_common_subterm_goal
Prop: (qrevaflat (Leaf) ((5::qrevaflat (Leaf) ((5::(Nil))))) @ (Nil)) = ((revflat (Leaf) @ (5::revflat (Leaf))) @ (5::(Nil)))
Prop: (qrevaflat (Node (Leaf) (8) (Leaf)) ((3::qrevaflat (Leaf) ((6::(Nil))))) @ (Nil)) = ((revflat (Node (Leaf) (8) (Leaf)) @ (3::revflat (Leaf))) @ (6::(Nil)))
Prop: (qrevaflat (Leaf) ((0::qrevaflat (Node (Node (Leaf) (1) (Leaf)) (0) (Leaf)) ((4::(Nil))))) @ (Nil)) = ((revflat (Leaf) @ (0::revflat (Node (Node (Leaf) (1) (Leaf)) (0) (Leaf)))) @ (4::(Nil)))
Lemma List
forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
End of Lemma List


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any_list1 : any list
---------------------------------------
forall (any1:any), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
End of Lemma List


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any_list1 : any list
---------------------------------------
forall (any1:any), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree2) ((any2::(Nil))) @ revflat (any_tree3)) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 51


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any_list1 : any list
---------------------------------------
forall (any1:any), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))(rank : 0.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_tree1(rank:10.)
=================================================
Progress: 52


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any_list1 : any list
---------------------------------------
forall (any1:any), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree2) ((any2::(Nil))) @ revflat (any_tree3)) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))(rank : 0.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_tree1(rank:10.)
=================================================
Progress: 53


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
any_list1 : any list
---------------------------------------
(qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = (revflat (any_tree1) @ (any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = (revflat (any_tree2) @ (any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = (revflat (any_tree3) @ (any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
any_list1 : any list
---------------------------------------
(qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree2) ((any2::(Nil))) @ revflat (any_tree3)) @ (any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any_list1
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: (qrevaflat (Leaf) ((6::qrevaflat (Leaf) ((2::(Nil))))) @ (0::(Nil))) = ((qrevaflat (Leaf) ((6::(Nil))) @ revflat (Leaf)) @ (2::(0::(Nil))))
Prop: (qrevaflat (Leaf) ((7::qrevaflat (Node (Leaf) (5) (Leaf)) ((2::(Nil))))) @ (8::(Nil))) = ((qrevaflat (Leaf) ((7::(Nil))) @ revflat (Node (Leaf) (5) (Leaf))) @ (2::(8::(Nil))))
Prop: (qrevaflat (Leaf) ((0::qrevaflat (Leaf) ((5::(Nil))))) @ (Nil)) = ((qrevaflat (Leaf) ((0::(Nil))) @ revflat (Leaf)) @ (5::(Nil)))
previous tactics
simpl in goal
intro any1
intro any_list1
validate generalize_common_subterm_goal
Prop: (qrevaflat (Leaf) ((0::qrevaflat (Leaf) ((7::(Nil))))) @ (Nil)) = ((revflat (Leaf) @ (0::revflat (Leaf))) @ (7::(Nil)))
Prop: (qrevaflat (Leaf) ((2::qrevaflat (Leaf) ((5::(Nil))))) @ (Nil)) = ((revflat (Leaf) @ (2::revflat (Leaf))) @ (5::(Nil)))
Prop: (qrevaflat (Node (Leaf) (3) (Leaf)) ((3::qrevaflat (Node (Leaf) (3) (Leaf)) ((3::(Nil))))) @ (Nil)) = ((revflat (Node (Leaf) (3) (Leaf)) @ (3::revflat (Node (Leaf) (3) (Leaf)))) @ (3::(Nil)))
=================================================
Progress: 54


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction any_tree1(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_tree2:any tree), (qrevaflat (Leaf) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (Leaf) @ (any2::revflat (any_tree2))) @ (any1::any_list1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 55


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction any_tree1(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_tree2:any tree), (qrevaflat (Leaf) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (Leaf) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 56


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_tree2:any tree), (qrevaflat (Leaf) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (Leaf) @ (any2::revflat (any_tree2))) @ (any1::any_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_tree2:any tree), (any2::(qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree2) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_tree2(rank:11.)
=================================================
Progress: 57


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_tree2:any tree), (qrevaflat (Leaf) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (Leaf) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_tree2:any tree), (any2::(qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree2) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_tree2(rank:11.)
=================================================
Progress: 58


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_tree2:any tree), (any2::(qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree2) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> induction any_tree2(rank : 11.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
Base2 : any_tree2 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (Leaf) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (Leaf) @ (any1::any_list1)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 59


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
Base2 : any_tree2 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (Leaf) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (Leaf) @ (any1::any_list1)))

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (Node (any_tree3) (any3) (any_tree4)) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (Node (any_tree3) (any3) (any_tree4)) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 60


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (Node (any_tree3) (any3) (any_tree4)) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (Node (any_tree3) (any3) (any_tree4)) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any1(rank:10.)
intro any2(rank:10.)
intro any_list1(rank:10.)
=================================================
Progress: 61


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any1(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
---------------------------------------
forall (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any2(rank:10.)
intro any_list1(rank:10.)
=================================================
Progress: 62


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any2 : any
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro any_list1(rank:10.)
=================================================
Progress: 63


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any_list1 : any list
---------------------------------------
forall (any1:any) (any2:any), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
validate generalize_common_subterm_goal
Prop: (3::(qrevaflat (Leaf) ((3::qrevaflat (Leaf) ((0::(Nil))))) @ (Nil))) = (3::((revflat (Leaf) @ (3::revflat (Leaf))) @ (0::(Nil))))
Prop: (6::(qrevaflat (Node (Leaf) (6) (Leaf)) ((6::qrevaflat (Leaf) ((2::(Nil))))) @ (Nil))) = (6::((revflat (Node (Leaf) (6) (Leaf)) @ (6::revflat (Leaf))) @ (2::(Nil))))
Prop: (8::(qrevaflat (Leaf) ((8::qrevaflat (Node (Leaf) (4) (Node (Leaf) (0) (Leaf))) ((4::(Nil))))) @ (Nil))) = (8::((revflat (Leaf) @ (8::revflat (Node (Leaf) (4) (Node (Leaf) (0) (Leaf))))) @ (4::(Nil))))
Lemma List
forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))
End of Lemma List


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any_list1 : any list
---------------------------------------
forall (any1:any) (any2:any), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 64


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any_list1 : any list
---------------------------------------
forall (any1:any) (any2:any), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))(rank : 0.)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction any_tree1(rank:12.)
=================================================
Progress: 65


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
---------------------------------------
forall (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
any2 : any
---------------------------------------
forall (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro any_list1(rank:10.)
=================================================
Progress: 66


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
---------------------------------------
forall (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
any_list1 : any list
---------------------------------------
forall (any2:any), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any_list1
validate generalize_common_subterm_goal
Prop: (5::(qrevaflat (Leaf) ((3::qrevaflat (Leaf) ((8::(Nil))))) @ (Nil))) = (5::((revflat (Leaf) @ (3::revflat (Leaf))) @ (8::(Nil))))
Prop: (3::(qrevaflat (Leaf) ((1::qrevaflat (Leaf) ((0::(Nil))))) @ (Nil))) = (3::((revflat (Leaf) @ (1::revflat (Leaf))) @ (0::(Nil))))
Prop: (7::(qrevaflat (Node (Node (Leaf) (7) (Leaf)) (0) (Node (Node (Node (Leaf) (6) (Leaf)) (2) (Leaf)) (4) (Leaf))) ((6::qrevaflat (Leaf) ((5::(Nil))))) @ (Nil))) = (7::((revflat (Node (Node (Leaf) (7) (Leaf)) (0) (Node (Node (Node (Leaf) (6) (Leaf)) (2) (Leaf)) (4) (Leaf))) @ (6::revflat (Leaf))) @ (5::(Nil))))
=================================================
Progress: 67


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any2 : any
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any2 : any
any_list1 : any list
---------------------------------------
forall (any1:any), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any_list1
validate generalize_common_subterm_goal
Prop: (8::(qrevaflat (Leaf) ((5::qrevaflat (Leaf) ((1::(Nil))))) @ (Nil))) = (8::((revflat (Leaf) @ (5::revflat (Leaf))) @ (1::(Nil))))
Prop: (0::(qrevaflat (Leaf) ((8::qrevaflat (Leaf) ((5::(Nil))))) @ (Nil))) = (0::((revflat (Leaf) @ (8::revflat (Leaf))) @ (5::(Nil))))
Prop: (6::(qrevaflat (Node (Leaf) (1) (Node (Leaf) (2) (Leaf))) ((7::qrevaflat (Leaf) ((0::(Nil))))) @ (0::(0::(Nil))))) = (6::((revflat (Node (Leaf) (1) (Node (Leaf) (2) (Leaf))) @ (7::revflat (Leaf))) @ (0::(0::(0::(Nil))))))
=================================================
Progress: 68


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
any2 : any
---------------------------------------
forall (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((revflat (any_tree1) @ (any2::revflat (any_tree2))) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
any2 : any
any_list1 : any list
---------------------------------------
(any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any_list1
validate generalize_common_subterm_goal
Prop: (6::(qrevaflat (Leaf) ((6::qrevaflat (Leaf) ((6::(Nil))))) @ (Nil))) = (6::((revflat (Leaf) @ (6::revflat (Leaf))) @ (6::(Nil))))
Prop: (2::(qrevaflat (Node (Leaf) (8) (Leaf)) ((4::qrevaflat (Node (Leaf) (7) (Leaf)) ((8::(Nil))))) @ (5::(Nil)))) = (2::((revflat (Node (Leaf) (8) (Leaf)) @ (4::revflat (Node (Leaf) (7) (Leaf)))) @ (8::(5::(Nil)))))
Prop: (5::(qrevaflat (Node (Node (Leaf) (7) (Leaf)) (6) (Leaf)) ((4::qrevaflat (Node (Node (Leaf) (6) (Leaf)) (8) (Leaf)) ((8::(Nil))))) @ (4::(3::(Nil))))) = (5::((revflat (Node (Node (Leaf) (7) (Leaf)) (6) (Leaf)) @ (4::revflat (Node (Node (Leaf) (6) (Leaf)) (8) (Leaf)))) @ (8::(4::(3::(Nil))))))
=================================================
Progress: 69


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_tree2:any tree), (any2::(qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree2) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> induction any_tree2(rank : 11.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
Base2 : any_tree2 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (Leaf) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (Leaf) @ (any1::any_list1)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 70


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
Base2 : any_tree2 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (Leaf) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (Leaf) @ (any1::any_list1)))

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (Node (any_tree3) (any3) (any_tree4)) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (Node (any_tree3) (any3) (any_tree4)) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 71


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (Node (any_tree3) (any3) (any_tree4)) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (Node (any_tree3) (any3) (any_tree4)) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any1(rank:10.)
intro any2(rank:10.)
intro any_list1(rank:10.)
=================================================
Progress: 72


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any1(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
---------------------------------------
forall (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any2(rank:10.)
intro any_list1(rank:10.)
=================================================
Progress: 73


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any2 : any
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro any_list1(rank:10.)
=================================================
Progress: 74


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any_list1 : any list
---------------------------------------
forall (any1:any) (any2:any), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
validate generalize_common_subterm_goal
Prop: (4::(qrevaflat (Leaf) ((8::qrevaflat (Leaf) ((1::(Nil))))) @ (Nil))) = (4::((revflat (Leaf) @ (8::revflat (Leaf))) @ (1::(Nil))))
Prop: (0::(qrevaflat (Node (Leaf) (6) (Leaf)) ((2::qrevaflat (Leaf) ((6::(Nil))))) @ (Nil))) = (0::((revflat (Node (Leaf) (6) (Leaf)) @ (2::revflat (Leaf))) @ (6::(Nil))))
Prop: (4::(qrevaflat (Node (Leaf) (6) (Leaf)) ((6::qrevaflat (Leaf) ((0::(Nil))))) @ (2::(Nil)))) = (4::((revflat (Node (Leaf) (6) (Leaf)) @ (6::revflat (Leaf))) @ (0::(2::(Nil)))))
Lemma List
forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))
End of Lemma List


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any_list1 : any list
---------------------------------------
forall (any1:any) (any2:any), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 75


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any_list1 : any list
---------------------------------------
forall (any1:any) (any2:any), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))(rank : 0.)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction any_tree1(rank:12.)
=================================================
Progress: 76


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
---------------------------------------
forall (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
any2 : any
---------------------------------------
forall (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro any_list1(rank:10.)
=================================================
Progress: 77


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
---------------------------------------
forall (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
any_list1 : any list
---------------------------------------
forall (any2:any), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any_list1
validate generalize_common_subterm_goal
Prop: (0::(qrevaflat (Leaf) ((3::qrevaflat (Leaf) ((6::(Nil))))) @ (Nil))) = (0::((revflat (Leaf) @ (3::revflat (Leaf))) @ (6::(Nil))))
Prop: (0::(qrevaflat (Leaf) ((0::qrevaflat (Leaf) ((6::(Nil))))) @ (Nil))) = (0::((revflat (Leaf) @ (0::revflat (Leaf))) @ (6::(Nil))))
Prop: (3::(qrevaflat (Leaf) ((8::qrevaflat (Leaf) ((2::(Nil))))) @ (Nil))) = (3::((revflat (Leaf) @ (8::revflat (Leaf))) @ (2::(Nil))))
=================================================
Progress: 78


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any2 : any
---------------------------------------
forall (any1:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any2 : any
any_list1 : any list
---------------------------------------
forall (any1:any), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any_list1
validate generalize_common_subterm_goal
Prop: (4::(qrevaflat (Leaf) ((0::qrevaflat (Leaf) ((8::(Nil))))) @ (Nil))) = (4::((revflat (Leaf) @ (0::revflat (Leaf))) @ (8::(Nil))))
Prop: (0::(qrevaflat (Leaf) ((6::qrevaflat (Leaf) ((1::(Nil))))) @ (Nil))) = (0::((revflat (Leaf) @ (6::revflat (Leaf))) @ (1::(Nil))))
Prop: (8::(qrevaflat (Leaf) ((6::qrevaflat (Leaf) ((3::(Nil))))) @ (0::(8::(Nil))))) = (8::((revflat (Leaf) @ (6::revflat (Leaf))) @ (3::(0::(8::(Nil))))))
=================================================
Progress: 79


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
any2 : any
---------------------------------------
forall (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 10.)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (qrevaflat (any_tree1) ((any2::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1) = ((qrevaflat (any_tree1) ((any2::(Nil))) @ revflat (any_tree2)) @ (any1::any_list1))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
any_tree2 : any tree
any_tree3 : any tree
any3 : any
any_tree4 : any tree
IH1 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree3) @ (any1::any_list1)))
IH2 : forall (any1:any) (any2:any) (any_list1:any list), (any2::(qrevaflat (any_tree4) ((any1::(Nil))) @ any_list1)) = (any2::(revflat (any_tree4) @ (any1::any_list1)))
Inductive1 : any_tree2 = Node (any_tree3) (any3) (any_tree4)
any1 : any
any2 : any
any_list1 : any list
---------------------------------------
(any2::(qrevaflat (any_tree3) ((any3::qrevaflat (any_tree4) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree3) @ (any3::revflat (any_tree4))) @ (any1::any_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any_list1
validate generalize_common_subterm_goal
Prop: (2::(qrevaflat (Node (Leaf) (0) (Leaf)) ((0::qrevaflat (Leaf) ((0::(Nil))))) @ (Nil))) = (2::((revflat (Node (Leaf) (0) (Leaf)) @ (0::revflat (Leaf))) @ (0::(Nil))))
Prop: (4::(qrevaflat (Leaf) ((0::qrevaflat (Node (Leaf) (0) (Node (Leaf) (5) (Node (Node (Leaf) (2) (Leaf)) (3) (Node (Leaf) (6) (Leaf))))) ((0::(Nil))))) @ (Nil))) = (4::((revflat (Leaf) @ (0::revflat (Node (Leaf) (0) (Node (Leaf) (5) (Node (Node (Leaf) (2) (Leaf)) (3) (Node (Leaf) (6) (Leaf))))))) @ (0::(Nil))))
Prop: (0::(qrevaflat (Leaf) ((0::qrevaflat (Leaf) ((7::(Nil))))) @ (Nil))) = (0::((revflat (Leaf) @ (0::revflat (Leaf))) @ (7::(Nil))))
=================================================
Progress: 80


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))

0 goal(s) more...

4 conjecture(s) more...
>>> induction any_tree1(rank : 12.)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree2:any tree), (any2::(qrevaflat (Leaf) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (Leaf) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 81


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))

0 goal(s) more...

4 conjecture(s) more...
>>> induction any_tree1(rank : 12.)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree2:any tree), (any2::(qrevaflat (Leaf) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (Leaf) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 82


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree2:any tree), (any2::(qrevaflat (Leaf) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (Leaf) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree2:any tree), (any2::(any3::(qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1))) = (any2::(any3::(revflat (any_tree2) @ (any1::any_list1))))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction any_tree2(rank:13.)
=================================================
Progress: 83


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree2:any tree), (any2::(qrevaflat (Leaf) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (Leaf) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree1:any tree) (any_tree2:any tree), (any2::(qrevaflat (any_tree1) ((any3::qrevaflat (any_tree2) ((any1::(Nil))))) @ any_list1)) = (any2::((revflat (any_tree1) @ (any3::revflat (any_tree2))) @ (any1::any_list1)))
any_tree1 : any tree
Base1 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any_list1:any list) (any_tree2:any tree), (any2::(any3::(qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1))) = (any2::(any3::(revflat (any_tree2) @ (any1::any_list1))))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction any_tree2(rank:13.)
=================================================
Progress: 84


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), ((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 13.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), ((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
parent
revflat (any_tree2)
lower
revflat(_)
upper
@(@(_, Cons(any1, revflat(any_tree3))), any_list1)
remove upper
revflat(any_tree2)
remove lower
revflat(_)
remove upper
@(revflat(any_tree4), Cons(any2, revflat(any_tree5)))
remove lower
@(revflat(_), Cons(any2, revflat(any_tree5)))
remove upper
@(@(revflat(any_tree6), Cons(any3, revflat(any_tree7))), Cons(any2, revflat(any_tree5)))
remove lower
@(@(revflat(_), Cons(any3, revflat(any_tree7))), Cons(any2, revflat(any_tree5)))
parent
qrevaflat (any_tree2) ((any1::(revflat (any_tree3) @ any_list1)))
lower
qrevaflat(_, Cons(any1, @(revflat(any_tree3), any_list1)))
upper
_
remove upper
qrevaflat(any_tree3, any_list1)
remove lower
qrevaflat(any_tree3, any_list1)
remove upper
qrevaflat(any_tree2, Cons(any1, @(revflat(any_tree3), any_list1)))
remove lower
qrevaflat(any_tree2, Cons(any1, @(revflat(any_tree3), any_list1)))
remove upper
qrevaflat(any_tree4, Cons(any2, @(@(revflat(any_tree5), Cons(any1, revflat(any_tree3))), any_list1)))
remove lower
qrevaflat(any_tree4, Cons(any2, @(@(revflat(any_tree5), Cons(any1, revflat(any_tree3))), any_list1)))
remove upper
qrevaflat(any_tree6, Cons(any3, @(@(@(revflat(any_tree7), Cons(any2, revflat(any_tree5))), Cons(any1, revflat(any_tree3))), any_list1)))
remove lower
qrevaflat(any_tree6, Cons(any3, @(@(@(revflat(any_tree7), Cons(any2, revflat(any_tree5))), Cons(any1, revflat(any_tree3))), any_list1)))
Prop: ((revflat (Leaf) @ (7::(Nil))) @ (Nil)) = qrevaflat (Leaf) ((7::((Nil) @ (Nil))))
Prop: ((revflat (Leaf) @ (8::(Nil))) @ (6::(Nil))) = qrevaflat (Leaf) ((8::((Nil) @ (6::(Nil)))))
Prop: ((revflat (Leaf) @ (6::(5::(Nil)))) @ (1::(2::(4::(Nil))))) = qrevaflat (Leaf) ((6::((5::(Nil)) @ (1::(2::(4::(Nil)))))))
previous tactics
simpl in goal
parent
revflat (any_tree2)
lower
revflat(_)
upper
@(@(_, Cons(any1, revflat(any_tree3))), any_list1)
remove upper
revflat(any_tree2)
remove lower
revflat(_)
remove upper
@(revflat(any_tree4), Cons(any2, revflat(any_tree5)))
remove lower
@(revflat(_), Cons(any2, revflat(any_tree5)))
remove upper
@(@(revflat(any_tree6), Cons(any3, revflat(any_tree7))), Cons(any2, revflat(any_tree5)))
remove lower
@(@(revflat(_), Cons(any3, revflat(any_tree7))), Cons(any2, revflat(any_tree5)))
parent
qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))
lower
qrevaflat(_, Cons(any1, qrevaflat(any_tree3, any_list1)))
upper
_
remove upper
qrevaflat(any_tree3, any_list1)
remove lower
qrevaflat(any_tree3, any_list1)
remove upper
qrevaflat(any_tree2, Cons(any1, qrevaflat(any_tree3, any_list1)))
remove lower
qrevaflat(any_tree2, Cons(any1, qrevaflat(any_tree3, any_list1)))
remove upper
qrevaflat(any_tree4, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, any_list1)))))
remove lower
qrevaflat(any_tree4, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, any_list1)))))
remove upper
qrevaflat(any_tree6, Cons(any3, qrevaflat(any_tree7, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, any_list1)))))))
remove lower
qrevaflat(any_tree6, Cons(any3, qrevaflat(any_tree7, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, any_list1)))))))
validate generalize_common_subterm_goal
Prop: ((revflat (Node (Leaf) (5) (Leaf)) @ (2::revflat (Leaf))) @ (Nil)) = qrevaflat (Node (Leaf) (5) (Leaf)) ((2::qrevaflat (Leaf) ((Nil))))
Prop: ((revflat (Leaf) @ (1::revflat (Leaf))) @ (Nil)) = qrevaflat (Leaf) ((1::qrevaflat (Leaf) ((Nil))))
Prop: ((revflat (Node (Node (Leaf) (5) (Leaf)) (3) (Leaf)) @ (3::revflat (Leaf))) @ (8::(Nil))) = qrevaflat (Node (Node (Leaf) (5) (Leaf)) (3) (Leaf)) ((3::qrevaflat (Leaf) ((8::(Nil)))))
Lemma List
forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
End of Lemma List


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), ((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 85


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), ((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))(rank : 0.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:8.)
=================================================
Progress: 86


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list2(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), ((revflat (any_tree1) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree1) ((any1::((Nil) @ any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 87


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), ((revflat (any_tree1) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree1) ((any1::((Nil) @ any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), ((revflat (any_tree1) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree1) ((any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_tree1(rank:9.)
=================================================
Progress: 88


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), ((revflat (any_tree1) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree1) ((any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_tree1(rank : 9.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
Base2 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any_list1:any list), ((revflat (Leaf) @ (any1::(Nil))) @ any_list1) = qrevaflat (Leaf) ((any1::any_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 89


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
Base2 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any_list1:any list), ((revflat (Leaf) @ (any1::(Nil))) @ any_list1) = qrevaflat (Leaf) ((any1::any_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), ((revflat (any_tree2) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), ((revflat (any_tree3) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), ((revflat (Node (any_tree2) (any2) (any_tree3)) @ (any1::(Nil))) @ any_list1) = qrevaflat (Node (any_tree2) (any2) (any_tree3)) ((any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 90


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), ((revflat (any_tree2) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), ((revflat (any_tree3) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), ((revflat (Node (any_tree2) (any2) (any_tree3)) @ (any1::(Nil))) @ any_list1) = qrevaflat (Node (any_tree2) (any2) (any_tree3)) ((any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), ((revflat (any_tree2) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), ((revflat (any_tree3) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro any1(rank:8.)
intro any_list1(rank:8.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 91


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), ((revflat (any_tree2) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), ((revflat (any_tree3) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), ((revflat (any_tree2) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), ((revflat (any_tree3) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
---------------------------------------
forall (any_list1:any list), (((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro any_list1(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:16.)
=================================================
Progress: 92


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), ((revflat (any_tree2) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), ((revflat (any_tree3) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), ((revflat (any_tree2) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), ((revflat (any_tree3) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any_list1 : any list
---------------------------------------
forall (any1:any), (((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 93


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), ((revflat (any_tree2) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), ((revflat (any_tree3) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
---------------------------------------
forall (any_list1:any list), (((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((revflat (any_tree1) @ (any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), ((revflat (any_tree2) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), ((revflat (any_tree3) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
any_list1 : any list
---------------------------------------
(((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ (any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 94


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
(qrevaflat (any_tree2) ((any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:13.)
rewrite <- IH1 in goal at 2(rank:21.)
=================================================
Progress: 95


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
rewrite <- IH1 in goal at 0
Prop: (((4::(6::(3::(Nil)))) @ (3::revflat (Leaf))) @ (Nil)) = ((4::(6::(3::(Nil)))) @ (3::qrevaflat (Leaf) ((Nil))))
Prop: (((1::(Nil)) @ (3::revflat (Leaf))) @ (1::(Nil))) = ((1::(Nil)) @ (3::qrevaflat (Leaf) ((1::(Nil)))))
Prop: (((Nil) @ (4::revflat (Node (Node (Leaf) (6) (Leaf)) (3) (Leaf)))) @ (Nil)) = ((Nil) @ (4::qrevaflat (Node (Node (Leaf) (6) (Leaf)) (3) (Leaf)) ((Nil))))
previous tactics
simpl in goal
intro any_list1
validate generalize_common_subterm_goal
Prop: ((revflat (Leaf) @ (1::revflat (Node (Leaf) (0) (Leaf)))) @ (Nil)) = qrevaflat (Leaf) ((1::qrevaflat (Node (Leaf) (0) (Leaf)) ((Nil))))
Prop: ((revflat (Leaf) @ (2::revflat (Leaf))) @ (Nil)) = qrevaflat (Leaf) ((2::qrevaflat (Leaf) ((Nil))))
Prop: ((revflat (Leaf) @ (6::revflat (Node (Leaf) (0) (Leaf)))) @ (Nil)) = qrevaflat (Leaf) ((6::qrevaflat (Node (Leaf) (0) (Leaf)) ((Nil))))
Lemma List
forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
End of Lemma List


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 96


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))(rank : 0.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:8.)
=================================================
Progress: 97


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list2(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), (((Nil) @ (any1::revflat (any_tree1))) @ any_list1) = ((Nil) @ (any1::qrevaflat (any_tree1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 98


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), (((Nil) @ (any1::revflat (any_tree1))) @ any_list1) = ((Nil) @ (any1::qrevaflat (any_tree1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), (any1::(revflat (any_tree1) @ any_list1)) = (any1::qrevaflat (any_tree1) (any_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_tree1(rank:9.)
=================================================
Progress: 99


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), (any1::(revflat (any_tree1) @ any_list1)) = (any1::qrevaflat (any_tree1) (any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_tree1(rank : 9.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
Base2 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any_list1:any list), (any1::(revflat (Leaf) @ any_list1)) = (any1::qrevaflat (Leaf) (any_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 100


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
Base2 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any_list1:any list), (any1::(revflat (Leaf) @ any_list1)) = (any1::qrevaflat (Leaf) (any_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree2) @ any_list1)) = (any1::qrevaflat (any_tree2) (any_list1))
IH2 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree3) @ any_list1)) = (any1::qrevaflat (any_tree3) (any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (any1::(revflat (Node (any_tree2) (any2) (any_tree3)) @ any_list1)) = (any1::qrevaflat (Node (any_tree2) (any2) (any_tree3)) (any_list1))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 101


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree2) @ any_list1)) = (any1::qrevaflat (any_tree2) (any_list1))
IH2 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree3) @ any_list1)) = (any1::qrevaflat (any_tree3) (any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (any1::(revflat (Node (any_tree2) (any2) (any_tree3)) @ any_list1)) = (any1::qrevaflat (Node (any_tree2) (any2) (any_tree3)) (any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree2) @ any_list1)) = (any1::qrevaflat (any_tree2) (any_list1))
IH2 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree3) @ any_list1)) = (any1::qrevaflat (any_tree3) (any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (any1::((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ any_list1)) = (any1::qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) (any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro any1(rank:8.)
intro any_list1(rank:8.)
rewrite <- IH1 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
=================================================
Progress: 102


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree2) @ any_list1)) = (any1::qrevaflat (any_tree2) (any_list1))
IH2 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree3) @ any_list1)) = (any1::qrevaflat (any_tree3) (any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (any1::((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ any_list1)) = (any1::qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) (any_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree2) @ any_list1)) = (any1::qrevaflat (any_tree2) (any_list1))
IH2 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree3) @ any_list1)) = (any1::qrevaflat (any_tree3) (any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
---------------------------------------
forall (any_list1:any list), (any1::((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ any_list1)) = (any1::qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) (any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro any_list1(rank:8.)
rewrite <- IH1 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
=================================================
Progress: 103


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree2) @ any_list1)) = (any1::qrevaflat (any_tree2) (any_list1))
IH2 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree3) @ any_list1)) = (any1::qrevaflat (any_tree3) (any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (any1::((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ any_list1)) = (any1::qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) (any_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree2) @ any_list1)) = (any1::qrevaflat (any_tree2) (any_list1))
IH2 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree3) @ any_list1)) = (any1::qrevaflat (any_tree3) (any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any_list1 : any list
---------------------------------------
forall (any1:any), (any1::((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ any_list1)) = (any1::qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) (any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
=================================================
Progress: 104


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree2) @ any_list1)) = (any1::qrevaflat (any_tree2) (any_list1))
IH2 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree3) @ any_list1)) = (any1::qrevaflat (any_tree3) (any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
---------------------------------------
forall (any_list1:any list), (any1::((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ any_list1)) = (any1::qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) (any_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), ((any_list2 @ (any1::revflat (any_tree1))) @ any_list1) = (any_list2 @ (any1::qrevaflat (any_tree1) (any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree2) @ any_list1)) = (any1::qrevaflat (any_tree2) (any_list1))
IH2 : forall (any1:any) (any_list1:any list), (any1::(revflat (any_tree3) @ any_list1)) = (any1::qrevaflat (any_tree3) (any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
any_list1 : any list
---------------------------------------
(any1::((revflat (any_tree2) @ (any2::revflat (any_tree3))) @ any_list1)) = (any1::qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) (any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
=================================================
Progress: 105


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 13.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
rewrite <- IH2 in goal at 0
Prop: ((revflat (Leaf) @ (0::(Nil))) @ (Nil)) = qrevaflat (Leaf) ((0::((Nil) @ (Nil))))
Prop: ((revflat (Leaf) @ (4::(2::(Nil)))) @ (7::(Nil))) = qrevaflat (Leaf) ((4::((2::(Nil)) @ (7::(Nil)))))
Prop: ((revflat (Leaf) @ (2::(Nil))) @ (2::(Nil))) = qrevaflat (Leaf) ((2::((Nil) @ (2::(Nil)))))
previous tactics
simpl in goal
intro any_list1
validate generalize_common_subterm_goal
Prop: ((revflat (Node (Node (Leaf) (3) (Leaf)) (6) (Leaf)) @ (0::revflat (Leaf))) @ (5::(Nil))) = qrevaflat (Node (Node (Leaf) (3) (Leaf)) (6) (Leaf)) ((0::qrevaflat (Leaf) ((5::(Nil)))))
Prop: ((revflat (Leaf) @ (1::revflat (Leaf))) @ (Nil)) = qrevaflat (Leaf) ((1::qrevaflat (Leaf) ((Nil))))
Prop: ((revflat (Leaf) @ (8::revflat (Node (Leaf) (1) (Leaf)))) @ (Nil)) = qrevaflat (Leaf) ((8::qrevaflat (Node (Leaf) (1) (Leaf)) ((Nil))))
=================================================
Progress: 106


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (qrevaflat (any_tree2) ((Nil)) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (qrevaflat (any_tree3) ((Nil)) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil)))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 13.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (qrevaflat (any_tree2) ((Nil)) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (qrevaflat (any_tree3) ((Nil)) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil)))) @ any_list1) = qrevaflat (any_tree2) ((any1::(qrevaflat (any_tree3) ((Nil)) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 2(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 2(rank:21.)
rewrite <- IH1 in goal at 1(rank:21.)
=================================================
Progress: 107


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (qrevaflat (any_tree2) ((Nil)) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (qrevaflat (any_tree3) ((Nil)) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
(qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil)))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 13.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (qrevaflat (any_tree1) ((Nil)) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (qrevaflat (any_tree2) ((Nil)) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (qrevaflat (any_tree3) ((Nil)) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
(qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil)))) @ any_list1) = qrevaflat (any_tree2) ((any1::(qrevaflat (any_tree3) ((Nil)) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 2(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 2(rank:21.)
rewrite <- IH1 in goal at 1(rank:21.)
=================================================
Progress: 108


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 13.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 0
Prop: (qrevaflat (Leaf) ((0::(Nil))) @ (Nil)) = qrevaflat (Leaf) ((0::((Nil) @ (Nil))))
Prop: (qrevaflat (Leaf) ((7::(Nil))) @ (5::(Nil))) = qrevaflat (Leaf) ((7::((Nil) @ (5::(Nil)))))
Prop: (qrevaflat (Node (Leaf) (0) (Node (Leaf) (6) (Node (Leaf) (6) (Leaf)))) ((7::(2::(Nil)))) @ (Nil)) = qrevaflat (Node (Leaf) (0) (Node (Leaf) (6) (Node (Leaf) (6) (Leaf)))) ((7::((2::(Nil)) @ (Nil))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: (qrevaflat (Leaf) ((7::revflat (Leaf))) @ (Nil)) = qrevaflat (Leaf) ((7::qrevaflat (Leaf) ((Nil))))
Prop: (qrevaflat (Leaf) ((2::revflat (Node (Node (Leaf) (6) (Node (Leaf) (3) (Leaf))) (6) (Leaf)))) @ (2::(0::(Nil)))) = qrevaflat (Leaf) ((2::qrevaflat (Node (Node (Leaf) (6) (Node (Leaf) (3) (Leaf))) (6) (Leaf)) ((2::(0::(Nil))))))
Prop: (qrevaflat (Node (Leaf) (0) (Leaf)) ((0::revflat (Node (Node (Leaf) (7) (Node (Leaf) (5) (Leaf))) (3) (Leaf)))) @ (0::(Nil))) = qrevaflat (Node (Leaf) (0) (Leaf)) ((0::qrevaflat (Node (Node (Leaf) (7) (Node (Leaf) (5) (Leaf))) (3) (Leaf)) ((0::(Nil)))))
previous tactics
simpl in goal
parent
revflat (any_tree2)
lower
revflat(_)
upper
@(@(_, Cons(any1, revflat(any_tree3))), any_list1)
remove upper
revflat(any_tree2)
remove lower
revflat(_)
remove upper
@(revflat(any_tree4), Cons(any2, revflat(any_tree5)))
remove lower
@(revflat(_), Cons(any2, revflat(any_tree5)))
remove upper
@(@(revflat(any_tree6), Cons(any3, revflat(any_tree7))), Cons(any2, revflat(any_tree5)))
remove lower
@(@(revflat(_), Cons(any3, revflat(any_tree7))), Cons(any2, revflat(any_tree5)))
parent
qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) (any_list1)))
lower
qrevaflat(_, Cons(any1, qrevaflat(any_tree3, any_list1)))
upper
_
remove upper
qrevaflat(any_tree3, any_list1)
remove lower
qrevaflat(any_tree3, any_list1)
remove upper
qrevaflat(any_tree2, Cons(any1, qrevaflat(any_tree3, any_list1)))
remove lower
qrevaflat(any_tree2, Cons(any1, qrevaflat(any_tree3, any_list1)))
remove upper
qrevaflat(any_tree4, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, any_list1)))))
remove lower
qrevaflat(any_tree4, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, any_list1)))))
remove upper
qrevaflat(any_tree6, Cons(any3, qrevaflat(any_tree7, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, any_list1)))))))
remove lower
qrevaflat(any_tree6, Cons(any3, qrevaflat(any_tree7, Cons(any2, qrevaflat(any_tree5, Cons(any1, qrevaflat(any_tree3, any_list1)))))))
validate generalize_common_subterm_goal
Prop: ((revflat (Leaf) @ (4::revflat (Node (Node (Leaf) (3) (Leaf)) (2) (Leaf)))) @ (Nil)) = qrevaflat (Leaf) ((4::qrevaflat (Node (Node (Leaf) (3) (Leaf)) (2) (Leaf)) ((Nil))))
Prop: ((revflat (Leaf) @ (2::revflat (Node (Leaf) (0) (Node (Leaf) (1) (Node (Node (Leaf) (0) (Node (Leaf) (6) (Leaf))) (7) (Leaf)))))) @ (Nil)) = qrevaflat (Leaf) ((2::qrevaflat (Node (Leaf) (0) (Node (Leaf) (1) (Node (Node (Leaf) (0) (Node (Leaf) (6) (Leaf))) (7) (Leaf)))) ((Nil))))
Prop: ((revflat (Leaf) @ (1::revflat (Leaf))) @ (Nil)) = qrevaflat (Leaf) ((1::qrevaflat (Leaf) ((Nil))))
Lemma List
forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
End of Lemma List


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 109


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any1::revflat (any_tree3))) @ any_list1) = qrevaflat (any_tree2) ((any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))(rank : 0.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:8.)
=================================================
Progress: 110


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list2(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), (qrevaflat (any_tree1) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree1) ((any1::((Nil) @ any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 111


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), (qrevaflat (any_tree1) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree1) ((any1::((Nil) @ any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), (qrevaflat (any_tree1) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree1) ((any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_tree1(rank:9.)
=================================================
Progress: 112


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any_list1:any list) (any_tree1:any tree), (qrevaflat (any_tree1) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree1) ((any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_tree1(rank : 9.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
Base2 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (Leaf) ((any1::(Nil))) @ any_list1) = qrevaflat (Leaf) ((any1::any_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 113


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
Base2 : any_tree1 = Leaf
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (Leaf) ((any1::(Nil))) @ any_list1) = qrevaflat (Leaf) ((any1::any_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (Node (any_tree2) (any2) (any_tree3)) ((any1::(Nil))) @ any_list1) = qrevaflat (Node (any_tree2) (any2) (any_tree3)) ((any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 114


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (Node (any_tree2) (any2) (any_tree3)) ((any1::(Nil))) @ any_list1) = qrevaflat (Node (any_tree2) (any2) (any_tree3)) ((any1::any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
intro any1(rank:8.)
rewrite <- IH1 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 2(rank:24.)
rewrite <- IH2 in goal at 2(rank:16.)
rewrite <- IH2 in goal at 1(rank:24.)
rewrite <- IH1 in goal at 1(rank:24.)
intro any_list1(rank:8.)
=================================================
Progress: 115


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
intro any_list1(rank:8.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 1(rank:24.)
rewrite <- IH2 in goal at 2(rank:16.)
rewrite <- IH1 in goal at 1(rank:24.)
rewrite <- IH1 in goal at 2(rank:24.)
rewrite <- IH1 in goal at 0(rank:16.)
=================================================
Progress: 116


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
---------------------------------------
forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any_list1 : any list
---------------------------------------
forall (any1:any), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 2(rank:24.)
rewrite <- IH2 in goal at 2(rank:16.)
rewrite <- IH2 in goal at 1(rank:24.)
rewrite <- IH1 in goal at 1(rank:24.)
=================================================
Progress: 117


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
---------------------------------------
forall (any_list1:any list), (qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_tree1:any tree) (any_list2:any list), (qrevaflat (any_tree1) ((any1::any_list2)) @ any_list1) = qrevaflat (any_tree1) ((any1::(any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_tree1 : any tree
any_tree2 : any tree
any2 : any
any_tree3 : any tree
IH1 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree2) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree2) ((any1::any_list1))
IH2 : forall (any1:any) (any_list1:any list), (qrevaflat (any_tree3) ((any1::(Nil))) @ any_list1) = qrevaflat (any_tree3) ((any1::any_list1))
Inductive1 : any_tree1 = Node (any_tree2) (any2) (any_tree3)
any1 : any
any_list1 : any list
---------------------------------------
(qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::(Nil))))) @ any_list1) = qrevaflat (any_tree2) ((any2::qrevaflat (any_tree3) ((any1::any_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 2(rank:24.)
rewrite <- IH2 in goal at 2(rank:16.)
rewrite <- IH2 in goal at 1(rank:24.)
rewrite <- IH1 in goal at 1(rank:24.)
=================================================
Progress: 118


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
((revflat (any_tree2) @ (any1::revflat (any_tree3))) @ any_list1) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 13.)


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
(revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1))) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 119


1st goal of : forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : forall (any_list1:any list), (revflat (any_tree2) @ any_list1) = qrevaflat (any_tree2) (any_list1)
IH2 : forall (any_list1:any list), (revflat (any_tree3) @ any_list1) = qrevaflat (any_tree3) (any_list1)
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
any_list1 : any list
---------------------------------------
(revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1))) = (revflat (any_tree2) @ (any1::(revflat (any_tree3) @ any_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(revflat (any_tree2) @ (any1::qrevaflat (any_tree3) ((Nil)))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
original goal
forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
lemma
forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
tactics
assert forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
induction any_tree1
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
intro any_list1
assert forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
induction any_list2
reflexivity
simpl in goal
induction any_list3
simpl in goal
intro any_list1
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro any_list1
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
Deduplication: 50
Tactic List : 6
rewrite lemma4 in goal at 0(rank:11.)
rewrite <- lemma4 in goal at 2(rank:11.)
rewrite <- lemma4 in goal at 3(rank:19.)
rewrite <- lemma4 in goal at 0(rank:19.)
rewrite <- lemma4 in goal at 1(rank:19.)
rewrite IH1 in goal at 0(rank:19.)
=================================================
Progress: 120


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
(revflat (any_tree2) @ (any1::qrevaflat (any_tree3) ((Nil)))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 11.)


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil)))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0.)
=================================================
Progress: 121


1st goal of : forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
any_tree1 : any tree
any_tree2 : any tree
any1 : any
any_tree3 : any tree
IH1 : revflat (any_tree2) = qrevaflat (any_tree2) ((Nil))
IH2 : revflat (any_tree3) = qrevaflat (any_tree3) ((Nil))
Inductive1 : any_tree1 = Node (any_tree2) (any1) (any_tree3)
---------------------------------------
qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil)))) = qrevaflat (any_tree2) ((any1::qrevaflat (any_tree3) ((Nil))))

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0.)


No conjecture
Proof Success
Proof
assert forall (any_tree1:any tree), revflat (any_tree1) = qrevaflat (any_tree1) ((Nil))
induction any_tree1
reflexivity
simpl in goal
rewrite IH2 in goal at 0
assert forall (any_tree1:any tree) (any_list1:any list), (revflat (any_tree1) @ any_list1) = qrevaflat (any_tree1) (any_list1)
induction any_tree1
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
intro any_list1
assert forall (any1:any) (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list2 @ (any1::any_list3)) @ any_list1) = (any_list2 @ (any1::(any_list3 @ any_list1)))
induction any_list2
reflexivity
simpl in goal
induction any_list3
simpl in goal
intro any_list1
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro any_list1
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
Qed
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
