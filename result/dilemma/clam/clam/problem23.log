Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:any list) (y:any list), half (len ((x @ y))) = half (len ((y @ x)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction any_list1(rank:12)
induction any_list2(rank:12)
=================================================
Progress: 2


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list1(rank : 12)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), half (len (((Nil) @ any_list2))) = half (len ((any_list2 @ (Nil))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 3


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), half (len (((Nil) @ any_list2))) = half (len ((any_list2 @ (Nil))))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), half (len (any_list2)) = half (len ((any_list2 @ (Nil))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:5)
=================================================
Progress: 4


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), half (len (any_list2)) = half (len ((any_list2 @ (Nil))))

1 goal(s) more...

0 conjecture(s) more...
>>> induction any_list2(rank : 5)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
half (len ((Nil))) = half (len (((Nil) @ (Nil))))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 5


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
half (len ((Nil))) = half (len (((Nil) @ (Nil))))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : half (len (any_list3)) = half (len ((any_list3 @ (Nil))))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
half (len ((any1::any_list3))) = half (len (((any1::any_list3) @ (Nil))))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 6


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : half (len (any_list3)) = half (len ((any_list3 @ (Nil))))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
half (len ((any1::any_list3))) = half (len (((any1::any_list3) @ (Nil))))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : half (len (any_list3)) = half (len ((any_list3 @ (Nil))))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len ((any_list3 @ (Nil)))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (any_list3:any list), any_list3 = (any_list3 @ (Nil))
Model : any_list3: (Nil)
Model : any_list3: (Nil)
Model : any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(Nil) = ((Nil) @ (Nil))
(Nil) = ((Nil) @ (Nil))
(Nil) = ((Nil) @ (Nil))
Simplifying took 0.000031 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : half (len (any_list3)) = half (len ((any_list3 @ (Nil))))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len ((any_list3 @ (Nil)))))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 7


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : half (len (any_list3)) = half (len ((any_list3 @ (Nil))))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len ((any_list3 @ (Nil)))))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any_list3:any list), any_list3 = (any_list3 @ (Nil))(rank : 0)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))

---------------------------------------
forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 8


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))

---------------------------------------
forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
(Nil) = ((Nil) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 9


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
(Nil) = ((Nil) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = ((any1::any_list2) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 10


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = ((any1::any_list2) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::(any_list2 @ (Nil)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:5)
=================================================
Progress: 11


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::(any_list2 @ (Nil)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 5)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::any_list2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 12


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : half (len (any_list3)) = half (len ((any_list3 @ (Nil))))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len ((any_list3 @ (Nil)))))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- lemma3 in goal at 0(rank:4)
=================================================
Progress: 13


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : half (len (any_list3)) = half (len ((any_list3 @ (Nil))))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len ((any_list3 @ (Nil)))))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : half (len (any_list3)) = half (len ((any_list3 @ (Nil))))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 14


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : half (len (any_list3)) = half (len ((any_list3 @ (Nil))))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), half (len (((any1::any_list3) @ any_list2))) = half (len ((any_list2 @ (any1::any_list3))))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 15


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), half (len (((any1::any_list3) @ any_list2))) = half (len ((any_list2 @ (any1::any_list3))))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), half (SUCC (len ((any_list3 @ any_list2)))) = half (len ((any_list2 @ (any1::any_list3))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:4)
=================================================
Progress: 16


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), half (SUCC (len ((any_list3 @ any_list2)))) = half (len ((any_list2 @ (any1::any_list3))))

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list2(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
half (SUCC (len ((any_list3 @ (Nil))))) = half (len (((Nil) @ (any1::any_list3))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 17


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
half (SUCC (len ((any_list3 @ (Nil))))) = half (len (((Nil) @ (any1::any_list3))))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
half (SUCC (len ((any_list3 @ (Nil))))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- lemma3 in goal at 0(rank:4)
=================================================
Progress: 18


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
half (SUCC (len ((any_list3 @ (Nil))))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 19


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
any2 : any
any_list4 : any list
IH2 : half (SUCC (len ((any_list3 @ any_list4)))) = half (len ((any_list4 @ (any1::any_list3))))
Inductive2 : any_list2 = (any2::any_list4)
---------------------------------------
half (SUCC (len ((any_list3 @ (any2::any_list4))))) = half (len (((any2::any_list4) @ (any1::any_list3))))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 20


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
any2 : any
any_list4 : any list
IH2 : half (SUCC (len ((any_list3 @ any_list4)))) = half (len ((any_list4 @ (any1::any_list3))))
Inductive2 : any_list2 = (any2::any_list4)
---------------------------------------
half (SUCC (len ((any_list3 @ (any2::any_list4))))) = half (len (((any2::any_list4) @ (any1::any_list3))))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
any2 : any
any_list4 : any list
IH2 : half (SUCC (len ((any_list3 @ any_list4)))) = half (len ((any_list4 @ (any1::any_list3))))
Inductive2 : any_list2 = (any2::any_list4)
---------------------------------------
half (SUCC (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::any_list3)))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list), (any_list3 @ (any2::any_list4)) = (any_list4 @ (any1::any_list3))
Model : any1: 0, any2: 4, any_list3: (Nil), any_list4: (Nil)
Model : any1: 3, any2: 5, any_list3: (2::(1::(Nil))), any_list4: (7::(0::(Nil)))
Model : any1: 4, any2: 1, any_list3: (Nil), any_list4: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
((Nil) @ (4::(Nil))) = ((Nil) @ (0::(Nil)))
((2::(1::(Nil))) @ (5::(7::(0::(Nil))))) = ((7::(0::(Nil))) @ (3::(2::(1::(Nil)))))
((Nil) @ (1::(Nil))) = ((Nil) @ (4::(Nil)))
Simplifying took 0.000376 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list), half (SUCC (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::any_list3)))))
Model : any1: 2, any2: 0, any_list3: (7::(Nil)), any_list4: (2::(Nil))
Model : any1: 3, any2: 2, any_list3: (7::(Nil)), any_list4: (Nil)
Model : any1: 6, any2: 8, any_list3: (8::(Nil)), any_list4: (7::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (SUCC (len (((7::(Nil)) @ (0::(2::(Nil))))))) = half (SUCC (len (((2::(Nil)) @ (2::(7::(Nil)))))))
half (SUCC (len (((7::(Nil)) @ (2::(Nil)))))) = half (SUCC (len (((Nil) @ (3::(7::(Nil)))))))
half (SUCC (len (((8::(Nil)) @ (8::(7::(Nil))))))) = half (SUCC (len (((7::(Nil)) @ (6::(8::(Nil)))))))
Simplifying took 0.001137 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
any2 : any
any_list4 : any list
IH2 : half (SUCC (len ((any_list3 @ any_list4)))) = half (len ((any_list4 @ (any1::any_list3))))
Inductive2 : any_list2 = (any2::any_list4)
---------------------------------------
half (SUCC (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::any_list3)))))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 21


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), half (len ((any_list3 @ any_list2))) = half (len ((any_list2 @ any_list3)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
any2 : any
any_list4 : any list
IH2 : half (SUCC (len ((any_list3 @ any_list4)))) = half (len ((any_list4 @ (any1::any_list3))))
Inductive2 : any_list2 = (any2::any_list4)
---------------------------------------
half (SUCC (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::any_list3)))))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list), half (SUCC (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::any_list3)))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 22


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len (((Nil) @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 23


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len (((Nil) @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), SUCC (half (len (any_list2))) = half (SUCC (len ((any_list2 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:7)
=================================================
Progress: 24


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), SUCC (half (len (any_list2))) = half (SUCC (len ((any_list2 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> induction any_list2(rank : 7)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((Nil)))) = half (SUCC (len (((Nil) @ (any1::(Nil))))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 25


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((Nil)))) = half (SUCC (len (((Nil) @ (any1::(Nil))))))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any3::any_list3)))) = half (SUCC (len (((any3::any_list3) @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 26


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any3::any_list3)))) = half (SUCC (len (((any3::any_list3) @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any1(rank:6)
intro any2(rank:6)
=================================================
Progress: 27


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro any2(rank:6)
=================================================
Progress: 28


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any2(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any_list3:any list), SUCC (len (any_list3)) = len ((any_list3 @ (any1::(Nil))))
Model : any1: 5, any_list3: (Nil)
Model : any1: 2, any_list3: (2::(0::(0::(Nil))))
Model : any1: 6, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (len ((Nil))) = len (((Nil) @ (5::(Nil))))
SUCC (len ((2::(0::(0::(Nil)))))) = len (((2::(0::(0::(Nil)))) @ (2::(Nil))))
SUCC (len ((Nil))) = len (((Nil) @ (6::(Nil))))
Simplifying took 0.000370 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 29


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list3:any list), SUCC (len (any_list3)) = len ((any_list3 @ (any1::(Nil))))(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))

---------------------------------------
forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 30


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any2(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
any1 : any
any2 : any
---------------------------------------
SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any_list3:any list), SUCC (len (any_list3)) = len ((any_list3 @ (any1::(Nil))))
Model : any1: 5, any_list3: (Nil)
Model : any1: 0, any_list3: (Nil)
Model : any1: 4, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (len ((Nil))) = len (((Nil) @ (5::(Nil))))
SUCC (len ((Nil))) = len (((Nil) @ (0::(Nil))))
SUCC (len ((Nil))) = len (((Nil) @ (4::(Nil))))
Simplifying took 0.000134 seconds
Result : true
advanced_generalize done
=================================================
Progress: 31


1st goal of : forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))

---------------------------------------
forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), SUCC (len ((Nil))) = len (((Nil) @ (any1::(Nil))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 32


1st goal of : forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), SUCC (len ((Nil))) = len (((Nil) @ (any1::(Nil))))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), SUCC (len (any_list2)) = len ((any_list2 @ (any1::(Nil))))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), SUCC (len ((any2::any_list2))) = len (((any2::any_list2) @ (any1::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 33


1st goal of : forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), SUCC (len (any_list2)) = len ((any_list2 @ (any1::(Nil))))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), SUCC (len ((any2::any_list2))) = len (((any2::any_list2) @ (any1::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), SUCC (len (any_list2)) = len ((any_list2 @ (any1::(Nil))))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), SUCC (SUCC (len (any_list2))) = SUCC (len ((any_list2 @ (any1::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any1(rank:7)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 34


1st goal of : forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), SUCC (len (any_list2)) = len ((any_list2 @ (any1::(Nil))))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), SUCC (SUCC (len (any_list2))) = SUCC (len ((any_list2 @ (any1::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), SUCC (len (any_list2)) = len ((any_list2 @ (any1::(Nil))))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (len ((any_list2 @ (any1::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7)
=================================================
Progress: 35


1st goal of : forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), SUCC (len (any_list2)) = len ((any_list2 @ (any1::(Nil))))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (len ((any_list2 @ (any1::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), SUCC (len (any_list2)) = len ((any_list2 @ (any1::(Nil))))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 36


1st goal of : forall (any1:any) (any_list1:any list), SUCC (len (any_list1)) = len ((any_list1 @ (any1::(Nil))))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), SUCC (len (any_list2)) = len ((any_list2 @ (any1::(Nil))))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 2
intro any1(rank:6)
rewrite <- lemma4 in goal at 0(rank:14)
=================================================
Progress: 37


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
any1 : any
---------------------------------------
SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- lemma4 in goal at 0(rank:6)
=================================================
Progress: 38


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
any1 : any
---------------------------------------
SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma4 in goal at 0(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
any1 : any
---------------------------------------
SUCC (half (SUCC (len (any_list3)))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 39


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list3))) = half (SUCC (len ((any_list3 @ (any1::(Nil))))))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
any1 : any
---------------------------------------
SUCC (half (SUCC (len (any_list3)))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len (((any3::any_list3) @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 40


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len (((any3::any_list3) @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), SUCC (half (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:6)
=================================================
Progress: 41


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), SUCC (half (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list2(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::(Nil)))))) = half (SUCC (len (((Nil) @ (any1::(any3::any_list3))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 42


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::(Nil)))))) = half (SUCC (len (((Nil) @ (any1::(any3::any_list3))))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro any1(rank:6)
intro any2(rank:6)
rewrite <- lemma4 in goal at 0(rank:14)
=================================================
Progress: 43


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (len ((any_list3 @ (any2::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any2(rank:6)
rewrite <- lemma4 in goal at 0(rank:14)
=================================================
Progress: 44


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any2(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list3 @ (any2::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- lemma4 in goal at 0(rank:6)
=================================================
Progress: 45


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (len ((any_list3 @ (any2::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any2(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any1 : any
any2 : any
---------------------------------------
SUCC (half (len ((any_list3 @ (any2::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- lemma4 in goal at 0(rank:6)
=================================================
Progress: 46


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list3 @ (any2::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma4 in goal at 0(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 47


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::(any3::any_list3))))))
Inductive2 : any_list2 = (any4::any_list4)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = half (SUCC (len (((any4::any_list4) @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 48


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::(any3::any_list3))))))
Inductive2 : any_list2 = (any4::any_list4)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = half (SUCC (len (((any4::any_list4) @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::(any3::any_list3))))))
Inductive2 : any_list2 = (any4::any_list4)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = SUCC (half (len ((any_list4 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any1(rank:5)
intro any2(rank:5)
=================================================
Progress: 49


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::(any3::any_list3))))))
Inductive2 : any_list2 = (any4::any_list4)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = SUCC (half (len ((any_list4 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::(any3::any_list3))))))
Inductive2 : any_list2 = (any4::any_list4)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = SUCC (half (len ((any_list4 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro any2(rank:5)
=================================================
Progress: 50


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::(any3::any_list3))))))
Inductive2 : any_list2 = (any4::any_list4)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = SUCC (half (len ((any_list4 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any2(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::(any3::any_list3))))))
Inductive2 : any_list2 = (any4::any_list4)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = SUCC (half (len ((any_list4 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list3:any list) (any_list4:any list), (any_list3 @ (any2::(any4::any_list4))) = (any_list4 @ (any1::(any3::any_list3)))
Model : any1: 0, any2: 7, any3: 7, any4: 3, any_list3: (Nil), any_list4: (0::(4::(Nil)))
Model : any1: 6, any2: 2, any3: 1, any4: 2, any_list3: (Nil), any_list4: (Nil)
Model : any1: 3, any2: 4, any3: 0, any4: 6, any_list3: (0::(Nil)), any_list4: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
((Nil) @ (7::(3::(0::(4::(Nil)))))) = ((0::(4::(Nil))) @ (0::(7::(Nil))))
((Nil) @ (2::(2::(Nil)))) = ((Nil) @ (6::(1::(Nil))))
((0::(Nil)) @ (4::(6::(Nil)))) = ((Nil) @ (3::(0::(0::(Nil)))))
Simplifying took 0.000379 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list3:any list) (any_list4:any list), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = SUCC (half (len ((any_list4 @ (any1::(any3::any_list3))))))
Model : any1: 7, any2: 3, any3: 5, any4: 8, any_list3: (Nil), any_list4: (Nil)
Model : any1: 6, any2: 4, any3: 0, any4: 0, any_list3: (Nil), any_list4: (0::(6::(Nil)))
Model : any1: 2, any2: 2, any3: 5, any4: 8, any_list3: (Nil), any_list4: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (len (((Nil) @ (3::(8::(Nil))))))) = SUCC (half (len (((Nil) @ (7::(5::(Nil)))))))
SUCC (half (len (((Nil) @ (4::(0::(0::(6::(Nil))))))))) = SUCC (half (len (((0::(6::(Nil))) @ (6::(0::(Nil)))))))
SUCC (half (len (((Nil) @ (2::(8::(Nil))))))) = SUCC (half (len (((Nil) @ (2::(5::(Nil)))))))
Simplifying took 0.001007 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::(any3::any_list3))))))
Inductive2 : any_list2 = (any4::any_list4)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = SUCC (half (len ((any_list4 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 51


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::(any3::any_list3))))))
Inductive2 : any_list2 = (any4::any_list4)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = SUCC (half (len ((any_list4 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list3:any list) (any_list4:any list), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = SUCC (half (len ((any_list4 @ (any1::(any3::any_list3))))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 52


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::(any3::any_list3))))))
Inductive2 : any_list2 = (any4::any_list4)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = SUCC (half (len ((any_list4 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any2(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list1 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list1)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list3 @ (any2::any_list2))))) = half (SUCC (len ((any_list2 @ (any1::any_list3)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any2::any_list4))))) = half (SUCC (len ((any_list4 @ (any1::(any3::any_list3))))))
Inductive2 : any_list2 = (any4::any_list4)
any1 : any
any2 : any
---------------------------------------
SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = SUCC (half (len ((any_list4 @ (any1::(any3::any_list3))))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list3:any list) (any_list4:any list), (any_list3 @ (any2::(any4::any_list4))) = (any_list4 @ (any1::(any3::any_list3)))
Model : any1: 0, any2: 5, any3: 6, any4: 3, any_list3: (Nil), any_list4: (7::(Nil))
Model : any1: 1, any2: 0, any3: 3, any4: 8, any_list3: (Nil), any_list4: (Nil)
Model : any1: 1, any2: 2, any3: 7, any4: 8, any_list3: (Nil), any_list4: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
((Nil) @ (5::(3::(7::(Nil))))) = ((7::(Nil)) @ (0::(6::(Nil))))
((Nil) @ (0::(8::(Nil)))) = ((Nil) @ (1::(3::(Nil))))
((Nil) @ (2::(8::(Nil)))) = ((Nil) @ (1::(7::(Nil))))
Simplifying took 0.000309 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list3:any list) (any_list4:any list), SUCC (half (len ((any_list3 @ (any2::(any4::any_list4)))))) = SUCC (half (len ((any_list4 @ (any1::(any3::any_list3))))))
Model : any1: 0, any2: 0, any3: 4, any4: 7, any_list3: (Nil), any_list4: (Nil)
Model : any1: 7, any2: 2, any3: 4, any4: 0, any_list3: (Nil), any_list4: (Nil)
Model : any1: 2, any2: 5, any3: 7, any4: 3, any_list3: (Nil), any_list4: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (len (((Nil) @ (0::(7::(Nil))))))) = SUCC (half (len (((Nil) @ (0::(4::(Nil)))))))
SUCC (half (len (((Nil) @ (2::(0::(Nil))))))) = SUCC (half (len (((Nil) @ (7::(4::(Nil)))))))
SUCC (half (len (((Nil) @ (5::(3::(Nil))))))) = SUCC (half (len (((Nil) @ (2::(7::(Nil)))))))
Simplifying took 0.000553 seconds
Result : true
advanced_generalize done
=================================================
Progress: 53


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list2:any list), SUCC (half (len (((Nil) @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::(Nil)))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 54


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list2:any list), SUCC (half (len (((Nil) @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::(Nil)))))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list2:any list), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any3::(Nil)))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:9)
=================================================
Progress: 55


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list2:any list), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any3::(Nil)))))))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_list2(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len ((Nil))))) = SUCC (half (len (((Nil) @ (any1::(any3::(Nil)))))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 56


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len ((Nil))))) = SUCC (half (len (((Nil) @ (any1::(any3::(Nil)))))))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len ((any5::any_list3))))) = SUCC (half (len (((any5::any_list3) @ (any1::(any3::(Nil)))))))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 57


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len ((any5::any_list3))))) = SUCC (half (len (((any5::any_list3) @ (any1::(any3::(Nil)))))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro any1(rank:8)
intro any2(rank:8)
intro any3(rank:8)
intro any4(rank:8)
=================================================
Progress: 58


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro any2(rank:8)
intro any3(rank:8)
intro any4(rank:8)
=================================================
Progress: 59


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any2(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any3(rank:8)
intro any4(rank:8)
=================================================
Progress: 60


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any3(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any4(rank:8)
=================================================
Progress: 61


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), SUCC (half (SUCC (len (any_list3)))) = half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))
Model : any1: 4, any3: 0, any_list3: (Nil)
Model : any1: 7, any3: 6, any_list3: (Nil)
Model : any1: 6, any3: 4, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (4::(0::(Nil)))))))
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (7::(6::(Nil)))))))
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (6::(4::(Nil)))))))
Simplifying took 0.000336 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 62


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any1:any) (any3:any) (any_list3:any list), SUCC (half (SUCC (len (any_list3)))) = half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:10)
=================================================
Progress: 63


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any2(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any3(rank:8)
intro any4(rank:8)
=================================================
Progress: 64


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any3(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any4(rank:8)
=================================================
Progress: 65


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), SUCC (half (SUCC (len (any_list3)))) = half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))
Model : any1: 7, any3: 0, any_list3: (Nil)
Model : any1: 4, any3: 8, any_list3: (Nil)
Model : any1: 0, any3: 6, any_list3: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (7::(0::(Nil)))))))
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (4::(8::(Nil)))))))
SUCC (half (SUCC (len ((0::(Nil)))))) = half (SUCC (len (((0::(Nil)) @ (0::(6::(Nil)))))))
Simplifying took 0.000466 seconds
Result : true
advanced_generalize done
=================================================
Progress: 66


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any3(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any4(rank:8)
=================================================
Progress: 67


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), SUCC (half (SUCC (len (any_list3)))) = half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))
Model : any1: 3, any3: 0, any_list3: (Nil)
Model : any1: 0, any3: 6, any_list3: (2::(Nil))
Model : any1: 6, any3: 8, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (3::(0::(Nil)))))))
SUCC (half (SUCC (len ((2::(Nil)))))) = half (SUCC (len (((2::(Nil)) @ (0::(6::(Nil)))))))
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (6::(8::(Nil)))))))
Simplifying took 0.000908 seconds
Result : true
advanced_generalize done
=================================================
Progress: 68


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), SUCC (half (SUCC (len (any_list3)))) = half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))
Model : any1: 5, any3: 0, any_list3: (Nil)
Model : any1: 6, any3: 6, any_list3: (Nil)
Model : any1: 5, any3: 8, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (5::(0::(Nil)))))))
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (6::(6::(Nil)))))))
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (5::(8::(Nil)))))))
Simplifying took 0.000375 seconds
Result : true
advanced_generalize done
=================================================
Progress: 69


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any3(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any4(rank:8)
=================================================
Progress: 70


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), SUCC (half (SUCC (len (any_list3)))) = half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))
Model : any1: 5, any3: 6, any_list3: (Nil)
Model : any1: 2, any3: 0, any_list3: (7::(Nil))
Model : any1: 0, any3: 4, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (5::(6::(Nil)))))))
SUCC (half (SUCC (len ((7::(Nil)))))) = half (SUCC (len (((7::(Nil)) @ (2::(0::(Nil)))))))
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (0::(4::(Nil)))))))
Simplifying took 0.000426 seconds
Result : true
advanced_generalize done
=================================================
Progress: 71


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), SUCC (half (SUCC (len (any_list3)))) = half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))
Model : any1: 7, any3: 1, any_list3: (Nil)
Model : any1: 4, any3: 0, any_list3: (Nil)
Model : any1: 3, any3: 2, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (7::(1::(Nil)))))))
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (4::(0::(Nil)))))))
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (3::(2::(Nil)))))))
Simplifying took 0.000326 seconds
Result : true
advanced_generalize done
=================================================
Progress: 72


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), SUCC (half (SUCC (len (any_list3)))) = half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))
Model : any1: 1, any3: 8, any_list3: (Nil)
Model : any1: 5, any3: 3, any_list3: (Nil)
Model : any1: 0, any3: 1, any_list3: (1::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (1::(8::(Nil)))))))
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (5::(3::(Nil)))))))
SUCC (half (SUCC (len ((1::(Nil)))))) = half (SUCC (len (((1::(Nil)) @ (0::(1::(Nil)))))))
Simplifying took 0.000447 seconds
Result : true
advanced_generalize done
=================================================
Progress: 73


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any), SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list1 @ (any2::(any4::any_list2)))))) = SUCC (half (len ((any_list2 @ (any1::(any3::any_list1))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (SUCC (half (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any1::(any3::(Nil)))))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
SUCC (SUCC (half (SUCC (len (any_list3))))) = SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), SUCC (half (SUCC (len (any_list3)))) = half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))
Model : any1: 7, any3: 3, any_list3: (Nil)
Model : any1: 0, any3: 2, any_list3: (Nil)
Model : any1: 6, any3: 5, any_list3: (8::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (7::(3::(Nil)))))))
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (0::(2::(Nil)))))))
SUCC (half (SUCC (len ((8::(Nil)))))) = half (SUCC (len (((8::(Nil)) @ (6::(5::(Nil)))))))
Simplifying took 0.000532 seconds
Result : true
advanced_generalize done
=================================================
Progress: 74


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
>>> induction any_list1(rank : 10)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (any1::(any2::(Nil)))))))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 75


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (any1::(any2::(Nil)))))))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len ((any3::any_list2))))) = half (SUCC (len (((any3::any_list2) @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 76


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len ((any3::any_list2))))) = half (SUCC (len (((any3::any_list2) @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any1(rank:9)
intro any2(rank:9)
=================================================
Progress: 77


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any1(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro any2(rank:9)
=================================================
Progress: 78


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list2:any list), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Model : any1: 5, any2: 7, any_list2: (Nil)
Model : any1: 0, any2: 5, any_list2: (Nil)
Model : any1: 5, any2: 4, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (len ((Nil)))) = half (len (((Nil) @ (5::(7::(Nil))))))
SUCC (half (len ((Nil)))) = half (len (((Nil) @ (0::(5::(Nil))))))
SUCC (half (len ((Nil)))) = half (len (((Nil) @ (5::(4::(Nil))))))
Simplifying took 0.000331 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 79


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any_list2:any list), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:12)
=================================================
Progress: 80


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
any2 : any
---------------------------------------
SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list2:any list), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Model : any1: 2, any2: 6, any_list2: (Nil)
Model : any1: 4, any2: 8, any_list2: (Nil)
Model : any1: 7, any2: 2, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (len ((Nil)))) = half (len (((Nil) @ (2::(6::(Nil))))))
SUCC (half (len ((Nil)))) = half (len (((Nil) @ (4::(8::(Nil))))))
SUCC (half (len ((Nil)))) = half (len (((Nil) @ (7::(2::(Nil))))))
Simplifying took 0.000341 seconds
Result : true
advanced_generalize done
=================================================
Progress: 81


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list2(rank : 12)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any_list1:any list), half (len ((any_list1 @ (Nil)))) = half (len (((Nil) @ any_list1)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 82


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any_list1:any list), half (len ((any_list1 @ (Nil)))) = half (len (((Nil) @ any_list1)))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any_list1:any list), half (len ((any_list1 @ (Nil)))) = half (len (any_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:5)
=================================================
Progress: 83


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any_list1:any list), half (len ((any_list1 @ (Nil)))) = half (len (any_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> induction any_list1(rank : 5)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
half (len (((Nil) @ (Nil)))) = half (len ((Nil)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 84


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
half (len (((Nil) @ (Nil)))) = half (len ((Nil)))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : half (len ((any_list3 @ (Nil)))) = half (len (any_list3))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
half (len (((any1::any_list3) @ (Nil)))) = half (len ((any1::any_list3)))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 85


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : half (len ((any_list3 @ (Nil)))) = half (len (any_list3))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
half (len (((any1::any_list3) @ (Nil)))) = half (len ((any1::any_list3)))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : half (len ((any_list3 @ (Nil)))) = half (len (any_list3))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
half (SUCC (len ((any_list3 @ (Nil))))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (any_list3:any list), (any_list3 @ (Nil)) = any_list3
Model : any_list3: (5::(Nil))
Model : any_list3: (Nil)
Model : any_list3: (1::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
((5::(Nil)) @ (Nil)) = (5::(Nil))
((Nil) @ (Nil)) = (Nil)
((1::(Nil)) @ (Nil)) = (1::(Nil))
Simplifying took 0.000103 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : half (len ((any_list3 @ (Nil)))) = half (len (any_list3))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
half (SUCC (len ((any_list3 @ (Nil))))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 86


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : half (len ((any_list3 @ (Nil)))) = half (len (any_list3))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
half (SUCC (len ((any_list3 @ (Nil))))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any_list3:any list), (any_list3 @ (Nil)) = any_list3(rank : 0)


1st goal of : forall (any_list1:any list), (any_list1 @ (Nil)) = any_list1

---------------------------------------
forall (any_list1:any list), (any_list1 @ (Nil)) = any_list1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 87


1st goal of : forall (any_list1:any list), (any_list1 @ (Nil)) = any_list1

---------------------------------------
forall (any_list1:any list), (any_list1 @ (Nil)) = any_list1

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any_list1:any list), (any_list1 @ (Nil)) = any_list1
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
((Nil) @ (Nil)) = (Nil)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 88


1st goal of : forall (any_list1:any list), (any_list1 @ (Nil)) = any_list1
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
((Nil) @ (Nil)) = (Nil)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list), (any_list1 @ (Nil)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : (any_list2 @ (Nil)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
((any1::any_list2) @ (Nil)) = (any1::any_list2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 89


1st goal of : forall (any_list1:any list), (any_list1 @ (Nil)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : (any_list2 @ (Nil)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
((any1::any_list2) @ (Nil)) = (any1::any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any_list1:any list), (any_list1 @ (Nil)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : (any_list2 @ (Nil)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::(any_list2 @ (Nil))) = (any1::any_list2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:5)
=================================================
Progress: 90


1st goal of : forall (any_list1:any list), (any_list1 @ (Nil)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : (any_list2 @ (Nil)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::(any_list2 @ (Nil))) = (any1::any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 5)


1st goal of : forall (any_list1:any list), (any_list1 @ (Nil)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : (any_list2 @ (Nil)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::any_list2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 91


1st goal of : forall (any_list1:any list), (any_list1 @ (Nil)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : (any_list2 @ (Nil)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : half (len ((any_list3 @ (Nil)))) = half (len (any_list3))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
half (SUCC (len ((any_list3 @ (Nil))))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite lemma3 in goal at 0(rank:4)
=================================================
Progress: 92


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : half (len ((any_list3 @ (Nil)))) = half (len (any_list3))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
half (SUCC (len ((any_list3 @ (Nil))))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : half (len ((any_list3 @ (Nil)))) = half (len (any_list3))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 93


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : half (len ((any_list3 @ (Nil)))) = half (len (any_list3))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
forall (any_list1:any list), half (len ((any_list1 @ (any1::any_list3)))) = half (len (((any1::any_list3) @ any_list1)))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 94


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
forall (any_list1:any list), half (len ((any_list1 @ (any1::any_list3)))) = half (len (((any1::any_list3) @ any_list1)))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
forall (any_list1:any list), half (len ((any_list1 @ (any1::any_list3)))) = half (SUCC (len ((any_list3 @ any_list1))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:4)
=================================================
Progress: 95


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
forall (any_list1:any list), half (len ((any_list1 @ (any1::any_list3)))) = half (SUCC (len ((any_list3 @ any_list1))))

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list1(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
half (len (((Nil) @ (any1::any_list3)))) = half (SUCC (len ((any_list3 @ (Nil)))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 96


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
half (len (((Nil) @ (any1::any_list3)))) = half (SUCC (len ((any_list3 @ (Nil)))))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len ((any_list3 @ (Nil)))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:4)
=================================================
Progress: 97


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len ((any_list3 @ (Nil)))))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 98


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
half (SUCC (len (any_list3))) = half (SUCC (len (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
any_list1 : any list
any2 : any
any_list4 : any list
IH2 : half (len ((any_list4 @ (any1::any_list3)))) = half (SUCC (len ((any_list3 @ any_list4))))
Inductive2 : any_list1 = (any2::any_list4)
---------------------------------------
half (len (((any2::any_list4) @ (any1::any_list3)))) = half (SUCC (len ((any_list3 @ (any2::any_list4)))))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 99


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
any_list1 : any list
any2 : any
any_list4 : any list
IH2 : half (len ((any_list4 @ (any1::any_list3)))) = half (SUCC (len ((any_list3 @ any_list4))))
Inductive2 : any_list1 = (any2::any_list4)
---------------------------------------
half (len (((any2::any_list4) @ (any1::any_list3)))) = half (SUCC (len ((any_list3 @ (any2::any_list4)))))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
any_list1 : any list
any2 : any
any_list4 : any list
IH2 : half (len ((any_list4 @ (any1::any_list3)))) = half (SUCC (len ((any_list3 @ any_list4))))
Inductive2 : any_list1 = (any2::any_list4)
---------------------------------------
half (SUCC (len ((any_list4 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list4)))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list), (any_list4 @ (any1::any_list3)) = (any_list3 @ (any2::any_list4))
Model : any1: 6, any2: 4, any_list3: (2::(7::(Nil))), any_list4: (Nil)
Model : any1: 0, any2: 6, any_list3: (Nil), any_list4: (Nil)
Model : any1: 6, any2: 4, any_list3: (Nil), any_list4: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
((Nil) @ (6::(2::(7::(Nil))))) = ((2::(7::(Nil))) @ (4::(Nil)))
((Nil) @ (0::(Nil))) = ((Nil) @ (6::(Nil)))
((Nil) @ (6::(Nil))) = ((Nil) @ (4::(Nil)))
Simplifying took 0.000288 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list), half (SUCC (len ((any_list4 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list4)))))
Model : any1: 4, any2: 2, any_list3: (Nil), any_list4: (Nil)
Model : any1: 4, any2: 6, any_list3: (Nil), any_list4: (Nil)
Model : any1: 6, any2: 1, any_list3: (Nil), any_list4: (5::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (SUCC (len (((Nil) @ (4::(Nil)))))) = half (SUCC (len (((Nil) @ (2::(Nil))))))
half (SUCC (len (((Nil) @ (4::(Nil)))))) = half (SUCC (len (((Nil) @ (6::(Nil))))))
half (SUCC (len (((5::(Nil)) @ (6::(Nil)))))) = half (SUCC (len (((Nil) @ (1::(5::(Nil)))))))
Simplifying took 0.000473 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
any_list1 : any list
any2 : any
any_list4 : any list
IH2 : half (len ((any_list4 @ (any1::any_list3)))) = half (SUCC (len ((any_list3 @ any_list4))))
Inductive2 : any_list1 = (any2::any_list4)
---------------------------------------
half (SUCC (len ((any_list4 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list4)))))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 100


1st goal of : forall (any_list1:any list) (any_list2:any list), half (len ((any_list1 @ any_list2))) = half (len ((any_list2 @ any_list1)))
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list1:any list), half (len ((any_list1 @ any_list3))) = half (len ((any_list3 @ any_list1)))
Inductive1 : any_list2 = (any1::any_list3)
any_list1 : any list
any2 : any
any_list4 : any list
IH2 : half (len ((any_list4 @ (any1::any_list3)))) = half (SUCC (len ((any_list3 @ any_list4))))
Inductive2 : any_list1 = (any2::any_list4)
---------------------------------------
half (SUCC (len ((any_list4 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list4)))))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list), half (SUCC (len ((any_list4 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list4)))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 101


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::(Nil)))))) = half (SUCC (len (((Nil) @ (any2::any_list2)))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 102


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::(Nil)))))) = half (SUCC (len (((Nil) @ (any2::any_list2)))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::(Nil)))))) = SUCC (half (len (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:7)
=================================================
Progress: 103


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::(Nil)))))) = SUCC (half (len (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> induction any_list2(rank : 7)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((Nil) @ (any1::(Nil)))))) = SUCC (half (len ((Nil))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 104


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((Nil) @ (any1::(Nil)))))) = SUCC (half (len ((Nil))))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((any3::any_list3) @ (any1::(Nil)))))) = SUCC (half (len ((any3::any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 105


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((any3::any_list3) @ (any1::(Nil)))))) = SUCC (half (len ((any3::any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any1(rank:6)
intro any2(rank:6)
=================================================
Progress: 106


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro any2(rank:6)
=================================================
Progress: 107


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any2(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any_list3:any list), len ((any_list3 @ (any1::(Nil)))) = SUCC (len (any_list3))
Model : any1: 3, any_list3: (Nil)
Model : any1: 4, any_list3: (Nil)
Model : any1: 4, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
len (((Nil) @ (3::(Nil)))) = SUCC (len ((Nil)))
len (((Nil) @ (4::(Nil)))) = SUCC (len ((Nil)))
len (((Nil) @ (4::(Nil)))) = SUCC (len ((Nil)))
Simplifying took 0.000136 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 108


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list3:any list), len ((any_list3 @ (any1::(Nil)))) = SUCC (len (any_list3))(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 109


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any2(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
any1 : any
any2 : any
---------------------------------------
SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any_list3:any list), len ((any_list3 @ (any1::(Nil)))) = SUCC (len (any_list3))
Model : any1: 8, any_list3: (Nil)
Model : any1: 7, any_list3: (Nil)
Model : any1: 8, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
len (((Nil) @ (8::(Nil)))) = SUCC (len ((Nil)))
len (((Nil) @ (7::(Nil)))) = SUCC (len ((Nil)))
len (((Nil) @ (8::(Nil)))) = SUCC (len ((Nil)))
Simplifying took 0.000172 seconds
Result : true
advanced_generalize done
=================================================
Progress: 110


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), len (((Nil) @ (any1::(Nil)))) = SUCC (len ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 111


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), len (((Nil) @ (any1::(Nil)))) = SUCC (len ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), len (((any2::any_list2) @ (any1::(Nil)))) = SUCC (len ((any2::any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 112


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), len (((any2::any_list2) @ (any1::(Nil)))) = SUCC (len ((any2::any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), SUCC (len ((any_list2 @ (any1::(Nil))))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any1(rank:7)
rewrite IH1 in goal at 0(rank:15)
=================================================
Progress: 113


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), SUCC (len ((any_list2 @ (any1::(Nil))))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (len ((any_list2 @ (any1::(Nil))))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:7)
=================================================
Progress: 114


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (len ((any_list2 @ (any1::(Nil))))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 115


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 2
intro any1(rank:6)
rewrite lemma4 in goal at 0(rank:14)
=================================================
Progress: 116


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
any1 : any
---------------------------------------
SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma4 in goal at 0(rank:6)
=================================================
Progress: 117


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
any1 : any
---------------------------------------
SUCC (half (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
any1 : any
---------------------------------------
SUCC (half (SUCC (len (any_list3)))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 118


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list3 @ (any1::(Nil)))))) = SUCC (half (len (any_list3)))
Inductive1 : any_list2 = (any3::any_list3)
any2 : any
any1 : any
---------------------------------------
SUCC (half (SUCC (len (any_list3)))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::(any3::any_list3)))))) = half (SUCC (len (((any3::any_list3) @ (any2::any_list2)))))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 119


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::(any3::any_list3)))))) = half (SUCC (len (((any3::any_list3) @ (any2::any_list2)))))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list2)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:6)
=================================================
Progress: 120


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list2)))))

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list2(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((Nil) @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 121


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((Nil) @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any2::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro any1(rank:6)
intro any2(rank:6)
rewrite lemma4 in goal at 0(rank:14)
=================================================
Progress: 122


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any2::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any2::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any2(rank:6)
rewrite lemma4 in goal at 0(rank:14)
=================================================
Progress: 123


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any2::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any2(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any2::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma4 in goal at 0(rank:6)
=================================================
Progress: 124


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any2::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any2(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any1 : any
any2 : any
---------------------------------------
SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any2::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma4 in goal at 0(rank:6)
=================================================
Progress: 125


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (len ((any_list3 @ (any2::(Nil))))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 6)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 126


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list3)))) = SUCC (half (SUCC (len (any_list3))))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), half (SUCC (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list4)))))
Inductive2 : any_list2 = (any4::any_list4)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((any4::any_list4) @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 127


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), half (SUCC (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list4)))))
Inductive2 : any_list2 = (any4::any_list4)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((any4::any_list4) @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), half (SUCC (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list4)))))
Inductive2 : any_list2 = (any4::any_list4)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any1(rank:5)
intro any2(rank:5)
=================================================
Progress: 128


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), half (SUCC (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list4)))))
Inductive2 : any_list2 = (any4::any_list4)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), half (SUCC (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list4)))))
Inductive2 : any_list2 = (any4::any_list4)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro any2(rank:5)
=================================================
Progress: 129


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), half (SUCC (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list4)))))
Inductive2 : any_list2 = (any4::any_list4)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any2(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), half (SUCC (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list4)))))
Inductive2 : any_list2 = (any4::any_list4)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list3:any list) (any_list4:any list), (any_list4 @ (any1::(any3::any_list3))) = (any_list3 @ (any2::(any4::any_list4)))
Model : any1: 6, any2: 6, any3: 7, any4: 0, any_list3: (Nil), any_list4: (7::(Nil))
Model : any1: 7, any2: 2, any3: 0, any4: 1, any_list3: (Nil), any_list4: (2::(Nil))
Model : any1: 6, any2: 0, any3: 0, any4: 8, any_list3: (0::(Nil)), any_list4: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
((7::(Nil)) @ (6::(7::(Nil)))) = ((Nil) @ (6::(0::(7::(Nil)))))
((2::(Nil)) @ (7::(0::(Nil)))) = ((Nil) @ (2::(1::(2::(Nil)))))
((Nil) @ (6::(0::(0::(Nil))))) = ((0::(Nil)) @ (0::(8::(Nil))))
Simplifying took 0.000406 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list3:any list) (any_list4:any list), SUCC (half (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))
Model : any1: 6, any2: 2, any3: 6, any4: 1, any_list3: (Nil), any_list4: (Nil)
Model : any1: 5, any2: 8, any3: 0, any4: 1, any_list3: (Nil), any_list4: (Nil)
Model : any1: 2, any2: 4, any3: 3, any4: 0, any_list3: (Nil), any_list4: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (len (((Nil) @ (6::(6::(Nil))))))) = SUCC (half (len (((Nil) @ (2::(1::(Nil)))))))
SUCC (half (len (((Nil) @ (5::(0::(Nil))))))) = SUCC (half (len (((Nil) @ (8::(1::(Nil)))))))
SUCC (half (len (((Nil) @ (2::(3::(Nil))))))) = SUCC (half (len (((Nil) @ (4::(0::(Nil)))))))
Simplifying took 0.000558 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), half (SUCC (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list4)))))
Inductive2 : any_list2 = (any4::any_list4)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 130


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), half (SUCC (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list4)))))
Inductive2 : any_list2 = (any4::any_list4)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list3:any list) (any_list4:any list), SUCC (half (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 131


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), half (SUCC (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list4)))))
Inductive2 : any_list2 = (any4::any_list4)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any2(rank : 5)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list1))))) = half (SUCC (len ((any_list1 @ (any2::any_list2)))))
any_list1 : any list
any3 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::any_list3))))) = half (SUCC (len ((any_list3 @ (any2::any_list2)))))
Inductive1 : any_list1 = (any3::any_list3)
any_list2 : any list
any4 : any
any_list4 : any list
IH2 : forall (any1:any) (any2:any), half (SUCC (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::any_list4)))))
Inductive2 : any_list2 = (any4::any_list4)
any1 : any
any2 : any
---------------------------------------
SUCC (half (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list3:any list) (any_list4:any list), (any_list4 @ (any1::(any3::any_list3))) = (any_list3 @ (any2::(any4::any_list4)))
Model : any1: 0, any2: 3, any3: 3, any4: 8, any_list3: (Nil), any_list4: (Nil)
Model : any1: 2, any2: 2, any3: 1, any4: 4, any_list3: (3::(Nil)), any_list4: (Nil)
Model : any1: 1, any2: 0, any3: 0, any4: 4, any_list3: (Nil), any_list4: (7::(0::(1::(Nil))))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
((Nil) @ (0::(3::(Nil)))) = ((Nil) @ (3::(8::(Nil))))
((Nil) @ (2::(1::(3::(Nil))))) = ((3::(Nil)) @ (2::(4::(Nil))))
((7::(0::(1::(Nil)))) @ (1::(0::(Nil)))) = ((Nil) @ (0::(4::(7::(0::(1::(Nil)))))))
Simplifying took 0.000435 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list3:any list) (any_list4:any list), SUCC (half (len ((any_list4 @ (any1::(any3::any_list3)))))) = SUCC (half (len ((any_list3 @ (any2::(any4::any_list4))))))
Model : any1: 8, any2: 0, any3: 1, any4: 1, any_list3: (2::(Nil)), any_list4: (Nil)
Model : any1: 6, any2: 4, any3: 2, any4: 3, any_list3: (Nil), any_list4: (Nil)
Model : any1: 6, any2: 3, any3: 3, any4: 0, any_list3: (4::(Nil)), any_list4: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (len (((Nil) @ (8::(1::(2::(Nil)))))))) = SUCC (half (len (((2::(Nil)) @ (0::(1::(Nil)))))))
SUCC (half (len (((Nil) @ (6::(2::(Nil))))))) = SUCC (half (len (((Nil) @ (4::(3::(Nil)))))))
SUCC (half (len (((Nil) @ (6::(3::(4::(Nil)))))))) = SUCC (half (len (((4::(Nil)) @ (3::(0::(Nil)))))))
Simplifying took 0.000824 seconds
Result : true
advanced_generalize done
=================================================
Progress: 132


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::(Nil))))))) = SUCC (half (len (((Nil) @ (any2::(any4::any_list2))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 133


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::(Nil))))))) = SUCC (half (len (((Nil) @ (any2::(any4::any_list2))))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:9)
=================================================
Progress: 134


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_list2(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len (((Nil) @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len ((Nil)))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 135


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len (((Nil) @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len ((Nil)))))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len (((any5::any_list3) @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len ((any5::any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 136


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len (((any5::any_list3) @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len ((any5::any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro any1(rank:8)
intro any2(rank:8)
intro any3(rank:8)
intro any4(rank:8)
=================================================
Progress: 137


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro any2(rank:8)
intro any3(rank:8)
intro any4(rank:8)
=================================================
Progress: 138


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any2(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any3(rank:8)
intro any4(rank:8)
=================================================
Progress: 139


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any3(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any4(rank:8)
=================================================
Progress: 140


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (half (SUCC (len (any_list3))))
Model : any1: 4, any3: 0, any_list3: (Nil)
Model : any1: 7, any3: 0, any_list3: (3::(Nil))
Model : any1: 0, any3: 5, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (SUCC (len (((Nil) @ (4::(0::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((3::(Nil)) @ (7::(0::(Nil))))))) = SUCC (half (SUCC (len ((3::(Nil))))))
half (SUCC (len (((Nil) @ (0::(5::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
Simplifying took 0.000438 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 141


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any1:any) (any3:any) (any_list3:any list), half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (half (SUCC (len (any_list3))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:10)
=================================================
Progress: 142


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any2(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any3(rank:8)
intro any4(rank:8)
=================================================
Progress: 143


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any3(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any4(rank:8)
=================================================
Progress: 144


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (half (SUCC (len (any_list3))))
Model : any1: 7, any3: 8, any_list3: (Nil)
Model : any1: 5, any3: 7, any_list3: (Nil)
Model : any1: 6, any3: 0, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (SUCC (len (((Nil) @ (7::(8::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (5::(7::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (6::(0::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
Simplifying took 0.000498 seconds
Result : true
advanced_generalize done
=================================================
Progress: 145


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any3(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any4(rank:8)
=================================================
Progress: 146


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (half (SUCC (len (any_list3))))
Model : any1: 4, any3: 3, any_list3: (Nil)
Model : any1: 7, any3: 4, any_list3: (Nil)
Model : any1: 0, any3: 0, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (SUCC (len (((Nil) @ (4::(3::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (7::(4::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (0::(0::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
Simplifying took 0.000315 seconds
Result : true
advanced_generalize done
=================================================
Progress: 147


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (half (SUCC (len (any_list3))))
Model : any1: 6, any3: 0, any_list3: (Nil)
Model : any1: 3, any3: 3, any_list3: (6::(Nil))
Model : any1: 0, any3: 8, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (SUCC (len (((Nil) @ (6::(0::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((6::(Nil)) @ (3::(3::(Nil))))))) = SUCC (half (SUCC (len ((6::(Nil))))))
half (SUCC (len (((Nil) @ (0::(8::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
Simplifying took 0.000445 seconds
Result : true
advanced_generalize done
=================================================
Progress: 148


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any3(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any4(rank:8)
=================================================
Progress: 149


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (half (SUCC (len (any_list3))))
Model : any1: 7, any3: 1, any_list3: (Nil)
Model : any1: 8, any3: 0, any_list3: (Nil)
Model : any1: 8, any3: 0, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (SUCC (len (((Nil) @ (7::(1::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (8::(0::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (8::(0::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
Simplifying took 0.000448 seconds
Result : true
advanced_generalize done
=================================================
Progress: 150


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (half (SUCC (len (any_list3))))
Model : any1: 7, any3: 3, any_list3: (4::(0::(Nil)))
Model : any1: 8, any3: 7, any_list3: (4::(Nil))
Model : any1: 0, any3: 7, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (SUCC (len (((4::(0::(Nil))) @ (7::(3::(Nil))))))) = SUCC (half (SUCC (len ((4::(0::(Nil)))))))
half (SUCC (len (((4::(Nil)) @ (8::(7::(Nil))))))) = SUCC (half (SUCC (len ((4::(Nil))))))
half (SUCC (len (((Nil) @ (0::(7::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
Simplifying took 0.000846 seconds
Result : true
advanced_generalize done
=================================================
Progress: 151


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (half (SUCC (len (any_list3))))
Model : any1: 6, any3: 0, any_list3: (Nil)
Model : any1: 1, any3: 5, any_list3: (Nil)
Model : any1: 0, any3: 6, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (SUCC (len (((Nil) @ (6::(0::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (1::(5::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (0::(6::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
Simplifying took 0.000381 seconds
Result : true
advanced_generalize done
=================================================
Progress: 152


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any), SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any4(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list) (any_list2:any list), SUCC (half (len ((any_list2 @ (any1::(any3::any_list1)))))) = SUCC (half (len ((any_list1 @ (any2::(any4::any_list2))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any5 : any
any_list3 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), SUCC (half (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (SUCC (half (len (any_list3))))
Inductive1 : any_list2 = (any5::any_list3)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
SUCC (half (SUCC (len ((any_list3 @ (any1::(any3::(Nil)))))))) = SUCC (SUCC (half (SUCC (len (any_list3)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any4
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any3:any) (any_list3:any list), half (SUCC (len ((any_list3 @ (any1::(any3::(Nil))))))) = SUCC (half (SUCC (len (any_list3))))
Model : any1: 0, any3: 3, any_list3: (Nil)
Model : any1: 3, any3: 3, any_list3: (Nil)
Model : any1: 2, any3: 0, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (SUCC (len (((Nil) @ (0::(3::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (3::(3::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (2::(0::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
Simplifying took 0.000283 seconds
Result : true
advanced_generalize done
=================================================
Progress: 153


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))

0 goal(s) more...

3 conjecture(s) more...
>>> induction any_list1(rank : 10)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((Nil) @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 154


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((Nil) @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((any3::any_list2) @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len ((any3::any_list2)))))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 155


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((any3::any_list2) @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len ((any3::any_list2)))))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any1(rank:9)
intro any2(rank:9)
=================================================
Progress: 156


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any1(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro any2(rank:9)
=================================================
Progress: 157


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list2:any list), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Model : any1: 3, any2: 2, any_list2: (4::(Nil))
Model : any1: 1, any2: 0, any_list2: (5::(Nil))
Model : any1: 0, any2: 7, any_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (len (((4::(Nil)) @ (3::(2::(Nil)))))) = SUCC (half (len ((4::(Nil)))))
half (len (((5::(Nil)) @ (1::(0::(Nil)))))) = SUCC (half (len ((5::(Nil)))))
half (len (((0::(Nil)) @ (0::(7::(Nil)))))) = SUCC (half (len ((0::(Nil)))))
Simplifying took 0.000634 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 158


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any_list2:any list), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:12)
=================================================
Progress: 159


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
any2 : any
---------------------------------------
SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list2:any list), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Model : any1: 3, any2: 4, any_list2: (6::(5::(Nil)))
Model : any1: 4, any2: 8, any_list2: (Nil)
Model : any1: 7, any2: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (len (((6::(5::(Nil))) @ (3::(4::(Nil)))))) = SUCC (half (len ((6::(5::(Nil))))))
half (len (((Nil) @ (4::(8::(Nil)))))) = SUCC (half (len ((Nil))))
half (len (((Nil) @ (7::(5::(Nil)))))) = SUCC (half (len ((Nil))))
Simplifying took 0.000662 seconds
Result : true
advanced_generalize done
=================================================
Progress: 160


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> induction any_list1(rank : 12)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((Nil)))) = half (len (((Nil) @ (any1::(any2::(Nil))))))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 161


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((Nil)))) = half (len (((Nil) @ (any1::(any2::(Nil))))))

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any3::any_list2)))) = half (len (((any3::any_list2) @ (any1::(any2::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 162


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any3::any_list2)))) = half (len (((any3::any_list2) @ (any1::(any2::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any1(rank:11)
intro any2(rank:11)
=================================================
Progress: 163


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any1(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro any2(rank:11)
=================================================
Progress: 164


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any2(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list2:any list), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Model : any1: 8, any2: 6, any_list2: (Nil)
Model : any1: 6, any2: 0, any_list2: (0::(Nil))
Model : any1: 3, any2: 7, any_list2: (8::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (8::(6::(Nil)))))))
SUCC (half (SUCC (len ((0::(Nil)))))) = half (SUCC (len (((0::(Nil)) @ (6::(0::(Nil)))))))
SUCC (half (SUCC (len ((8::(Nil)))))) = half (SUCC (len (((8::(Nil)) @ (3::(7::(Nil)))))))
Simplifying took 0.000607 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 165


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any_list2:any list), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:14)
=================================================
Progress: 166


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any2(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (len (any_list1))) = half (len ((any_list1 @ (any1::(any2::(Nil))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
any2 : any
---------------------------------------
SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list2:any list), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Model : any1: 4, any2: 8, any_list2: (Nil)
Model : any1: 1, any2: 2, any_list2: (Nil)
Model : any1: 1, any2: 1, any_list2: (2::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (4::(8::(Nil)))))))
SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (1::(2::(Nil)))))))
SUCC (half (SUCC (len ((2::(Nil)))))) = half (SUCC (len (((2::(Nil)) @ (1::(1::(Nil)))))))
Simplifying took 0.000485 seconds
Result : true
advanced_generalize done
=================================================
Progress: 167


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))

0 goal(s) more...

4 conjecture(s) more...
>>> induction any_list1(rank : 12)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), half (len (((Nil) @ (any1::(any2::(Nil)))))) = SUCC (half (len ((Nil))))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 168


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), half (len (((Nil) @ (any1::(any2::(Nil)))))) = SUCC (half (len ((Nil))))

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), half (len (((any3::any_list2) @ (any1::(any2::(Nil)))))) = SUCC (half (len ((any3::any_list2))))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 169


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), half (len (((any3::any_list2) @ (any1::(any2::(Nil)))))) = SUCC (half (len ((any3::any_list2))))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any1(rank:11)
intro any2(rank:11)
=================================================
Progress: 170


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any1(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro any2(rank:11)
=================================================
Progress: 171


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any2(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Model : any1: 1, any2: 7, any_list2: (Nil)
Model : any1: 4, any2: 8, any_list2: (Nil)
Model : any1: 7, any2: 0, any_list2: (8::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (SUCC (len (((Nil) @ (1::(7::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (4::(8::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((8::(Nil)) @ (7::(0::(Nil))))))) = SUCC (half (SUCC (len ((8::(Nil))))))
Simplifying took 0.000521 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 172


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:14)
=================================================
Progress: 173


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any2(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (len ((any_list1 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list1)))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
any2 : any
---------------------------------------
half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list2:any list), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Model : any1: 2, any2: 6, any_list2: (Nil)
Model : any1: 4, any2: 2, any_list2: (Nil)
Model : any1: 0, any2: 8, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (SUCC (len (((Nil) @ (2::(6::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (4::(2::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
half (SUCC (len (((Nil) @ (0::(8::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))
Simplifying took 0.000366 seconds
Result : true
advanced_generalize done
=================================================
Progress: 174


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

5 conjecture(s) more...
>>> induction any_list1(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (any1::(any2::(Nil)))))))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 175


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len ((Nil))))) = half (SUCC (len (((Nil) @ (any1::(any2::(Nil)))))))

1 goal(s) more...

5 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len ((any3::any_list2))))) = half (SUCC (len (((any3::any_list2) @ (any1::(any2::(Nil)))))))

0 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 176


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (SUCC (len ((any3::any_list2))))) = half (SUCC (len (((any3::any_list2) @ (any1::(any2::(Nil)))))))

0 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
intro any1(rank:13)
intro any2(rank:13)
=================================================
Progress: 177


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any1(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro any2(rank:13)
=================================================
Progress: 178


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any2(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list2:any list), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Model : any1: 6, any2: 6, any_list2: (Nil)
Model : any1: 2, any2: 7, any_list2: (Nil)
Model : any1: 4, any2: 0, any_list2: (7::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (len ((Nil)))) = half (len (((Nil) @ (6::(6::(Nil))))))
SUCC (half (len ((Nil)))) = half (len (((Nil) @ (2::(7::(Nil))))))
SUCC (half (len ((7::(Nil))))) = half (len (((7::(Nil)) @ (4::(0::(Nil))))))
Simplifying took 0.000467 seconds
Result : true
advanced_generalize done
=================================================
Progress: 179


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any2(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), SUCC (half (SUCC (len (any_list1)))) = half (SUCC (len ((any_list1 @ (any1::(any2::(Nil)))))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), SUCC (half (SUCC (len (any_list2)))) = half (SUCC (len ((any_list2 @ (any1::(any2::(Nil)))))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
any2 : any
---------------------------------------
SUCC (SUCC (half (len (any_list2)))) = SUCC (half (len ((any_list2 @ (any1::(any2::(Nil)))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list2:any list), SUCC (half (len (any_list2))) = half (len ((any_list2 @ (any1::(any2::(Nil))))))
Model : any1: 5, any2: 4, any_list2: (Nil)
Model : any1: 8, any2: 8, any_list2: (Nil)
Model : any1: 7, any2: 7, any_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (half (len ((Nil)))) = half (len (((Nil) @ (5::(4::(Nil))))))
SUCC (half (len ((Nil)))) = half (len (((Nil) @ (8::(8::(Nil))))))
SUCC (half (len ((0::(Nil))))) = half (len (((0::(Nil)) @ (7::(7::(Nil))))))
Simplifying took 0.000478 seconds
Result : true
advanced_generalize done
=================================================
Progress: 180


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))

0 goal(s) more...

5 conjecture(s) more...
>>> induction any_list1(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((Nil) @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 181


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((Nil) @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len ((Nil)))))

1 goal(s) more...

5 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((any3::any_list2) @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len ((any3::any_list2)))))

0 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 182


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), half (SUCC (len (((any3::any_list2) @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len ((any3::any_list2)))))

0 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
intro any1(rank:13)
intro any2(rank:13)
=================================================
Progress: 183


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any1(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro any2(rank:13)
=================================================
Progress: 184


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any2(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list2:any list), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Model : any1: 3, any2: 2, any_list2: (Nil)
Model : any1: 1, any2: 0, any_list2: (5::(Nil))
Model : any1: 8, any2: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (len (((Nil) @ (3::(2::(Nil)))))) = SUCC (half (len ((Nil))))
half (len (((5::(Nil)) @ (1::(0::(Nil)))))) = SUCC (half (len ((5::(Nil)))))
half (len (((Nil) @ (8::(0::(Nil)))))) = SUCC (half (len ((Nil))))
Simplifying took 0.000372 seconds
Result : true
advanced_generalize done
=================================================
Progress: 185


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any2(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), half (SUCC (len ((any_list1 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list1))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), half (SUCC (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (half (SUCC (len (any_list2))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
any2 : any
---------------------------------------
SUCC (half (len ((any_list2 @ (any1::(any2::(Nil))))))) = SUCC (SUCC (half (len (any_list2))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any2:any) (any_list2:any list), half (len ((any_list2 @ (any1::(any2::(Nil)))))) = SUCC (half (len (any_list2)))
Model : any1: 4, any2: 0, any_list2: (Nil)
Model : any1: 1, any2: 5, any_list2: (Nil)
Model : any1: 7, any2: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
half (len (((Nil) @ (4::(0::(Nil)))))) = SUCC (half (len ((Nil))))
half (len (((Nil) @ (1::(5::(Nil)))))) = SUCC (half (len ((Nil))))
half (len (((Nil) @ (7::(5::(Nil)))))) = SUCC (half (len ((Nil))))
Simplifying took 0.000300 seconds
Result : true
advanced_generalize done
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 292, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
