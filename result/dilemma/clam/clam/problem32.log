Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:any list), rotate (len (x)) (x) = x(rank : 0)


1st goal of : forall (any_list1:any list), rotate (len (any_list1)) (any_list1) = any_list1

---------------------------------------
forall (any_list1:any list), rotate (len (any_list1)) (any_list1) = any_list1

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (any_list1:any list), rotate (len (any_list1)) (any_list1) = any_list1

---------------------------------------
forall (any_list1:any list), rotate (len (any_list1)) (any_list1) = any_list1

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list1(rank : 4)


1st goal of : forall (any_list1:any list), rotate (len (any_list1)) (any_list1) = any_list1
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
rotate (len ((Nil))) ((Nil)) = (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (any_list1:any list), rotate (len (any_list1)) (any_list1) = any_list1
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
rotate (len ((Nil))) ((Nil)) = (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (any_list1:any list), rotate (len (any_list1)) (any_list1) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : rotate (len (any_list2)) (any_list2) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
rotate (len ((any1::any_list2))) ((any1::any_list2)) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (any_list1:any list), rotate (len (any_list1)) (any_list1) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : rotate (len (any_list2)) (any_list2) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
rotate (len ((any1::any_list2))) ((any1::any_list2)) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (any_list1:any list), rotate (len (any_list1)) (any_list1) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : rotate (len (any_list2)) (any_list2) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
advanced_generalize done
Lemma : forall (any1:any) (any_list2:any list), rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)
Model : any1: 4, any_list2: (6::(Nil))
Model : any1: 8, any_list2: (Nil)
Model : any1: 6, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((6::(Nil)))) (((6::(Nil)) @ (4::(Nil)))) = (4::(6::(Nil)))
rotate (len ((Nil))) (((Nil) @ (8::(Nil)))) = (8::(Nil))
rotate (len ((Nil))) (((Nil) @ (6::(Nil)))) = (6::(Nil))
Simplifying took 0.000408 seconds
Result : true
New Env

;;
Lemma List
forall (any1:any) (any_list2:any list), rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)
End of Lemma List


1st goal of : forall (any_list1:any list), rotate (len (any_list1)) (any_list1) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : rotate (len (any_list2)) (any_list2) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 5


1st goal of : forall (any_list1:any list), rotate (len (any_list1)) (any_list1) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : rotate (len (any_list2)) (any_list2) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any1:any) (any_list2:any list), rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)

---------------------------------------
forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 6


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)

---------------------------------------
forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), rotate (len ((Nil))) (((Nil) @ (any1::(Nil)))) = (any1::(Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 7


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), rotate (len ((Nil))) (((Nil) @ (any1::(Nil)))) = (any1::(Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len ((any2::any_list2))) (((any2::any_list2) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 8


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len ((any2::any_list2))) (((any2::any_list2) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any1(rank:5)
rewrite <- IH1 in goal at 0(rank:13)
=================================================
Progress: 9


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) (((any_list2 @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:5)
=================================================
Progress: 10


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) (((any_list2 @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) (((any_list2 @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) ((any_list2 @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
rewrite <- IH1 in goal at 0
advanced_generalize done
Lemma : forall (any1:any) (any_list2:any list) (arg1:any list) (arg2:nat), rotate (arg2) (((any_list2 @ (any1::(Nil))) @ arg1)) = (any1::rotate (arg2) ((any_list2 @ arg1)))
Model : any1: 4, any_list2: (Nil), arg1: (Nil), arg2: SUCC (ZERO)
Model : any1: 2, any_list2: (6::(Nil)), arg1: (Nil), arg2: ZERO
Model : any1: 8, any_list2: (7::(Nil)), arg1: (Nil), arg2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((Nil) @ (4::(Nil))) @ (Nil))) = (4::rotate (SUCC (ZERO)) (((Nil) @ (Nil))))
rotate (ZERO) ((((6::(Nil)) @ (2::(Nil))) @ (Nil))) = (2::rotate (ZERO) (((6::(Nil)) @ (Nil))))
rotate (ZERO) ((((7::(Nil)) @ (8::(Nil))) @ (Nil))) = (8::rotate (ZERO) (((7::(Nil)) @ (Nil))))
Simplifying took 0.000739 seconds
Result : false
=================================================
Progress: 11


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) ((any_list2 @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
advanced_generalize done
Lemma : forall (any1:any) (any_list2:any list) (arg3:any list) (arg4:nat), rotate (arg4) (((any_list2 @ (any1::(Nil))) @ arg3)) = (any1::rotate (arg4) ((any_list2 @ arg3)))
Model : any1: 7, any_list2: (Nil), arg3: (Nil), arg4: SUCC (SUCC (ZERO))
Model : any1: 7, any_list2: (Nil), arg3: (Nil), arg4: SUCC (ZERO)
Model : any1: 0, any_list2: (2::(Nil)), arg3: (7::(Nil)), arg4: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (SUCC (ZERO))) ((((Nil) @ (7::(Nil))) @ (Nil))) = (7::rotate (SUCC (SUCC (ZERO))) (((Nil) @ (Nil))))
rotate (SUCC (ZERO)) ((((Nil) @ (7::(Nil))) @ (Nil))) = (7::rotate (SUCC (ZERO)) (((Nil) @ (Nil))))
rotate (ZERO) ((((2::(Nil)) @ (0::(Nil))) @ (7::(Nil)))) = (0::rotate (ZERO) (((2::(Nil)) @ (7::(Nil)))))
Simplifying took 0.000770 seconds
Result : false
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 288, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
