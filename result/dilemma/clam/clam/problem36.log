Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:int list), len (sort (x)) = len (x)(rank : 0)


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)

---------------------------------------
forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)

---------------------------------------
forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
len (sort ((Nil))) = len ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
len (sort ((Nil))) = len ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : len (sort (int_list2)) = len (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
len (sort ((int1::int_list2))) = len ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : len (sort (int_list2)) = len (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
len (sort ((int1::int_list2))) = len ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : len (sort (int_list2)) = len (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
len (insort (int1) (sort (int_list2))) = SUCC (len (int_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:3)
=================================================
Progress: 5


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : len (sort (int_list2)) = len (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
len (insort (int1) (sort (int_list2))) = SUCC (len (int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 3)


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : len (sort (int_list2)) = len (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
len (insort (int1) (sort (int_list2))) = SUCC (len (sort (int_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg1:any list) (int1:int), len (insort (int1) (arg1)) = SUCC (len (arg1))
Model : arg1: (Nil), int1: 0
Model : arg1: (Nil), int1: 0
Model : arg1: (Nil), int1: -0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
len (insort (0) ((Nil))) = SUCC (len ((Nil)))
len (insort (0) ((Nil))) = SUCC (len ((Nil)))
len (insort (-0) ((Nil))) = SUCC (len ((Nil)))
Simplifying took 0.000096 seconds
Result : true
advanced_generalize done


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : len (sort (int_list2)) = len (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
len (insort (int1) (sort (int_list2))) = SUCC (len (sort (int_list2)))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : len (sort (int_list2)) = len (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
len (insort (int1) (sort (int_list2))) = SUCC (len (sort (int_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg1:any list) (int1:int), len (insort (int1) (arg1)) = SUCC (len (arg1))(rank : 0)


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))

---------------------------------------
forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 7


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))

---------------------------------------
forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int1:int), len (insort (int1) ((Nil))) = SUCC (len ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 8


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int1:int), len (insort (int1) ((Nil))) = SUCC (len ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), len (insort (int1) (any_list2)) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int1:int), len (insort (int1) ((any1::any_list2))) = SUCC (len ((any1::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 9


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), len (insort (int1) (any_list2)) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int1:int), len (insort (int1) ((any1::any_list2))) = SUCC (len ((any1::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), len (insort (int1) (any_list2)) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int1:int), len (if match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int1::(any1::any_list2)) else (any1::insort (int1) (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5)
=================================================
Progress: 10


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), len (insort (int1) (any_list2)) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int1:int), len (if match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int1::(any1::any_list2)) else (any1::insort (int1) (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), len (insort (int1) (any_list2)) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
---------------------------------------
len (if match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int1::(any1::any_list2)) else (any1::insort (int1) (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6)
=================================================
Progress: 11


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), len (insort (int1) (any_list2)) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
---------------------------------------
len (if match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int1::(any1::any_list2)) else (any1::insort (int1) (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), len (insort (int1) (any_list2)) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
Case1 : match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (SUCC (len (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 12


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), len (insort (int1) (any_list2)) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
Case1 : match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (SUCC (len (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), len (insort (int1) (any_list2)) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
Case1 : match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (len (insort (int1) (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH1 in goal at 0(rank:5)
=================================================
Progress: 13


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), len (insort (int1) (any_list2)) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
Case1 : match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (len (insort (int1) (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), len (insort (int1) (any_list2)) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
Case1 : match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 14


1st goal of : forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), len (insort (int1) (any_list2)) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
Case1 : match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : len (sort (int_list2)) = len (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
len (insort (int1) (sort (int_list2))) = SUCC (len (sort (int_list2)))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite lemma3 in goal at 0(rank:3)
=================================================
Progress: 15


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : len (sort (int_list2)) = len (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
len (insort (int1) (sort (int_list2))) = SUCC (len (sort (int_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 3)


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : len (sort (int_list2)) = len (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
SUCC (len (sort (int_list2))) = SUCC (len (sort (int_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 16


1st goal of : forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : len (sort (int_list2)) = len (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
SUCC (len (sort (int_list2))) = SUCC (len (sort (int_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


No conjecture
Proof Success
Proof
assert forall (int_list1:int list), len (sort (int_list1)) = len (int_list1)
induction int_list1
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0
assert forall (any_list1:any list) (int1:int), len (insort (int1) (any_list1)) = SUCC (len (any_list1))
induction any_list1
reflexivity
simpl in goal
intro int1
case match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
Qed
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
