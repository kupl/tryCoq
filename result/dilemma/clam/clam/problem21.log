Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:any list) (y:any list), rotate (len (x)) ((x @ y)) = (y @ x)(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)

---------------------------------------
forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction any_list1(rank:12)
induction any_list2(rank:12)
=================================================
Progress: 2


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)

---------------------------------------
forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list1(rank : 12)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), rotate (len ((Nil))) (((Nil) @ any_list2)) = (any_list2 @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 3


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), rotate (len ((Nil))) (((Nil) @ any_list2)) = (any_list2 @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), any_list2 = (any_list2 @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:5)
=================================================
Progress: 4


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), any_list2 = (any_list2 @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> induction any_list2(rank : 5)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
(Nil) = ((Nil) @ (Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 5


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
(Nil) = ((Nil) @ (Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : any_list3 = (any_list3 @ (Nil))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
(any1::any_list3) = ((any1::any_list3) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 6


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : any_list3 = (any_list3 @ (Nil))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
(any1::any_list3) = ((any1::any_list3) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : any_list3 = (any_list3 @ (Nil))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
(any1::any_list3) = (any1::(any_list3 @ (Nil)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4)
=================================================
Progress: 7


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : any_list3 = (any_list3 @ (Nil))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
(any1::any_list3) = (any1::(any_list3 @ (Nil)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : any_list3 = (any_list3 @ (Nil))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
(any1::any_list3) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 8


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : any_list3 = (any_list3 @ (Nil))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
(any1::any_list3) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), rotate (len ((any1::any_list3))) (((any1::any_list3) @ any_list2)) = (any_list2 @ (any1::any_list3))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 9


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), rotate (len ((any1::any_list3))) (((any1::any_list3) @ any_list2)) = (any_list2 @ (any1::any_list3))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), rotate (len (any_list3)) (((any_list3 @ any_list2) @ (any1::(Nil)))) = (any_list2 @ (any1::any_list3))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:4)
=================================================
Progress: 10


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), rotate (len (any_list3)) (((any_list3 @ any_list2) @ (any1::(Nil)))) = (any_list2 @ (any1::any_list3))

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list2(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = ((Nil) @ (any1::any_list3))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 11


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = ((Nil) @ (any1::any_list3))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
Lemma : forall (any1:any) (any_list3:any list), rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list3)
Model : any1: 4, any_list3: (Nil)
Model : any1: 3, any_list3: (Nil)
Model : any1: 5, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (4::(Nil)))) = (4::(Nil))
rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (3::(Nil)))) = (3::(Nil))
rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (5::(Nil)))) = (5::(Nil))
Simplifying took 0.000183 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 12


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any1:any) (any_list3:any list), rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list3)(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)

---------------------------------------
forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 13


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)

---------------------------------------
forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (any1::(Nil)))) = (any1::(Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 14


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (any1::(Nil)))) = (any1::(Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len ((any2::any_list2))) ((((any2::any_list2) @ (Nil)) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 15


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len ((any2::any_list2))) ((((any2::any_list2) @ (Nil)) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any1(rank:5)
rewrite <- IH1 in goal at 0(rank:13)
=================================================
Progress: 16


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:5)
=================================================
Progress: 17


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
rewrite <- IH1 in goal at 0
Lemma : forall (any1:any) (arg1:any list) (arg2:any list) (arg3:nat), rotate (arg3) (((arg1 @ (any1::(Nil))) @ arg2)) = (any1::rotate (arg3) ((arg1 @ arg2)))
Model : any1: 7, arg1: (Nil), arg2: (Nil), arg3: ZERO
Model : any1: 0, arg1: (Nil), arg2: (Nil), arg3: ZERO
Model : any1: 2, arg1: (Nil), arg2: (Nil), arg3: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((Nil) @ (7::(Nil))) @ (Nil))) = (7::rotate (ZERO) (((Nil) @ (Nil))))
rotate (ZERO) ((((Nil) @ (0::(Nil))) @ (Nil))) = (0::rotate (ZERO) (((Nil) @ (Nil))))
rotate (ZERO) ((((Nil) @ (2::(Nil))) @ (Nil))) = (2::rotate (ZERO) (((Nil) @ (Nil))))
Simplifying took 0.000230 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 18


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (arg1:any list) (arg2:any list) (arg3:nat), rotate (arg3) (((arg1 @ (any1::(Nil))) @ arg2)) = (any1::rotate (arg3) ((arg1 @ arg2)))(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 19


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any_list2:any list) (nat1:nat), rotate (nat1) ((((Nil) @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) (((Nil) @ any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 20


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any_list2:any list) (nat1:nat), rotate (nat1) ((((Nil) @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) (((Nil) @ any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any_list2:any list) (nat1:nat), rotate (nat1) ((any1::any_list2)) = (any1::rotate (nat1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:9)
=================================================
Progress: 21


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any_list2:any list) (nat1:nat), rotate (nat1) ((any1::any_list2)) = (any1::rotate (nat1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_list2(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (nat1:nat), rotate (nat1) ((any1::(Nil))) = (any1::rotate (nat1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10)
=================================================
Progress: 22


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (nat1:nat), rotate (nat1) ((any1::(Nil))) = (any1::rotate (nat1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 10)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (any1:any), rotate (ZERO) ((any1::(Nil))) = (any1::rotate (ZERO) ((Nil)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 23


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (any1:any), rotate (ZERO) ((any1::(Nil))) = (any1::rotate (ZERO) ((Nil)))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (SUCC (nat2)) ((any1::(Nil))) = (any1::rotate (SUCC (nat2)) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 24


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (SUCC (nat2)) ((any1::(Nil))) = (any1::rotate (SUCC (nat2)) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any1(rank:9)
rewrite IH1 in goal at 0(rank:25)
=================================================
Progress: 25


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
rotate (nat2) ((any1::(Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:9)
=================================================
Progress: 26


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
rotate (nat2) ((any1::(Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
(any1::rotate (nat2) ((Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (nat2:nat), (any1::rotate (nat2) ((Nil))) = (any1::(Nil))
Model : any1: 7, nat2: SUCC (ZERO)
Model : any1: 5, nat2: SUCC (ZERO)
Model : any1: 8, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(7::rotate (SUCC (ZERO)) ((Nil))) = (7::(Nil))
(5::rotate (SUCC (ZERO)) ((Nil))) = (5::(Nil))
(8::rotate (ZERO) ((Nil))) = (8::(Nil))
Simplifying took 0.000102 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
(any1::rotate (nat2) ((Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 27


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
(any1::rotate (nat2) ((Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any1:any) (nat2:nat), (any1::rotate (nat2) ((Nil))) = (any1::(Nil))(rank : 0)


1st goal of : forall (any1:any) (nat1:nat), (any1::rotate (nat1) ((Nil))) = (any1::(Nil))

---------------------------------------
forall (any1:any) (nat1:nat), (any1::rotate (nat1) ((Nil))) = (any1::(Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10)
=================================================
Progress: 28


1st goal of : forall (any1:any) (nat1:nat), (any1::rotate (nat1) ((Nil))) = (any1::(Nil))

---------------------------------------
forall (any1:any) (nat1:nat), (any1::rotate (nat1) ((Nil))) = (any1::(Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 10)


1st goal of : forall (any1:any) (nat1:nat), (any1::rotate (nat1) ((Nil))) = (any1::(Nil))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (any1:any), (any1::rotate (ZERO) ((Nil))) = (any1::(Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 29


1st goal of : forall (any1:any) (nat1:nat), (any1::rotate (nat1) ((Nil))) = (any1::(Nil))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (any1:any), (any1::rotate (ZERO) ((Nil))) = (any1::(Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any1:any) (nat1:nat), (any1::rotate (nat1) ((Nil))) = (any1::(Nil))
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), (any1::rotate (nat2) ((Nil))) = (any1::(Nil))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), (any1::rotate (SUCC (nat2)) ((Nil))) = (any1::(Nil))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 30


1st goal of : forall (any1:any) (nat1:nat), (any1::rotate (nat1) ((Nil))) = (any1::(Nil))
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), (any1::rotate (nat2) ((Nil))) = (any1::(Nil))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), (any1::rotate (SUCC (nat2)) ((Nil))) = (any1::(Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
(any1::rotate (nat2) ((Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite lemma3 in goal at 0(rank:9)
=================================================
Progress: 31


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
(any1::rotate (nat2) ((Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
(any1::(Nil)) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 32


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
(any1::(Nil)) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (nat1:nat), rotate (nat1) ((any1::any_list3)) = (any1::rotate (nat1) (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
---------------------------------------
forall (any1:any) (nat1:nat), rotate (nat1) ((any1::(any2::any_list3))) = (any1::rotate (nat1) ((any2::any_list3)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 1
induction nat1(rank:9)
=================================================
Progress: 33


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (nat1:nat), rotate (nat1) ((any1::any_list3)) = (any1::rotate (nat1) (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
---------------------------------------
forall (any1:any) (nat1:nat), rotate (nat1) ((any1::(any2::any_list3))) = (any1::rotate (nat1) ((any2::any_list3)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (nat1:nat), rotate (nat1) ((any1::any_list3)) = (any1::rotate (nat1) (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (any1:any), rotate (ZERO) ((any1::(any2::any_list3))) = (any1::rotate (ZERO) ((any2::any_list3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 34


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (nat1:nat), rotate (nat1) ((any1::any_list3)) = (any1::rotate (nat1) (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (any1:any), rotate (ZERO) ((any1::(any2::any_list3))) = (any1::rotate (ZERO) ((any2::any_list3)))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (nat1:nat), rotate (nat1) ((any1::any_list3)) = (any1::rotate (nat1) (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
nat1 : nat
nat2 : nat
IH2 : forall (any1:any), rotate (nat2) ((any1::(any2::any_list3))) = (any1::rotate (nat2) ((any2::any_list3)))
Inductive2 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (SUCC (nat2)) ((any1::(any2::any_list3))) = (any1::rotate (SUCC (nat2)) ((any2::any_list3)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 35


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (nat1:nat), rotate (nat1) ((any1::any_list3)) = (any1::rotate (nat1) (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
nat1 : nat
nat2 : nat
IH2 : forall (any1:any), rotate (nat2) ((any1::(any2::any_list3))) = (any1::rotate (nat2) ((any2::any_list3)))
Inductive2 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (SUCC (nat2)) ((any1::(any2::any_list3))) = (any1::rotate (SUCC (nat2)) ((any2::any_list3)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (nat1:nat), rotate (nat1) ((any1::any_list3)) = (any1::rotate (nat1) (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
nat1 : nat
nat2 : nat
IH2 : forall (any1:any), rotate (nat2) ((any1::(any2::any_list3))) = (any1::rotate (nat2) ((any2::any_list3)))
Inductive2 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any_list3 @ (any1::(Nil))))) = (any1::rotate (nat2) ((any_list3 @ (any2::(Nil)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any1(rank:8)
=================================================
Progress: 36


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (nat1:nat), rotate (nat1) ((any1::any_list3)) = (any1::rotate (nat1) (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
nat1 : nat
nat2 : nat
IH2 : forall (any1:any), rotate (nat2) ((any1::(any2::any_list3))) = (any1::rotate (nat2) ((any2::any_list3)))
Inductive2 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any_list3 @ (any1::(Nil))))) = (any1::rotate (nat2) ((any_list3 @ (any2::(Nil)))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (nat1:nat), rotate (nat1) ((any1::any_list3)) = (any1::rotate (nat1) (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
nat1 : nat
nat2 : nat
IH2 : forall (any1:any), rotate (nat2) ((any1::(any2::any_list3))) = (any1::rotate (nat2) ((any2::any_list3)))
Inductive2 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
rotate (nat2) ((any2::(any_list3 @ (any1::(Nil))))) = (any1::rotate (nat2) ((any_list3 @ (any2::(Nil)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
Lemma : forall (any1:any) (any2:any) (any_list3:any list) (nat2:nat), rotate (nat2) ((any2::(any_list3 @ (any1::(Nil))))) = (any1::rotate (nat2) ((any_list3 @ (any2::(Nil)))))
Model : any1: 5, any2: 5, any_list3: (Nil), nat2: ZERO
Model : any1: 1, any2: 3, any_list3: (Nil), nat2: ZERO
Model : any1: 2, any2: 4, any_list3: (Nil), nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((5::((Nil) @ (5::(Nil))))) = (5::rotate (ZERO) (((Nil) @ (5::(Nil)))))
rotate (ZERO) ((3::((Nil) @ (1::(Nil))))) = (1::rotate (ZERO) (((Nil) @ (3::(Nil)))))
rotate (ZERO) ((4::((Nil) @ (2::(Nil))))) = (2::rotate (ZERO) (((Nil) @ (4::(Nil)))))
Simplifying took 0.000338 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any_list3:any list) (nat2:nat), rotate (nat2) ((any2::(any_list3 @ (any1::(Nil))))) = (any1::rotate (nat2) ((any_list3 @ (any2::(Nil)))))
Model : any1: 2, any2: 0, any_list3: (Nil), nat2: ZERO
Model : any1: 0, any2: 0, any_list3: (Nil), nat2: ZERO
Model : any1: 4, any2: 1, any_list3: (Nil), nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((0::((Nil) @ (2::(Nil))))) = (2::rotate (ZERO) (((Nil) @ (0::(Nil)))))
rotate (ZERO) ((0::((Nil) @ (0::(Nil))))) = (0::rotate (ZERO) (((Nil) @ (0::(Nil)))))
rotate (ZERO) ((1::((Nil) @ (4::(Nil))))) = (4::rotate (ZERO) (((Nil) @ (1::(Nil)))))
Simplifying took 0.000394 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any_list3:any list) (nat2:nat), rotate (nat2) ((any2::(any_list3 @ (any1::(Nil))))) = (any1::rotate (nat2) ((any_list3 @ (any2::(Nil)))))
Model : any1: 7, any2: 7, any_list3: (Nil), nat2: ZERO
Model : any1: 0, any2: 8, any_list3: (Nil), nat2: ZERO
Model : any1: 8, any2: 6, any_list3: (Nil), nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((7::((Nil) @ (7::(Nil))))) = (7::rotate (ZERO) (((Nil) @ (7::(Nil)))))
rotate (ZERO) ((8::((Nil) @ (0::(Nil))))) = (0::rotate (ZERO) (((Nil) @ (8::(Nil)))))
rotate (ZERO) ((6::((Nil) @ (8::(Nil))))) = (8::rotate (ZERO) (((Nil) @ (6::(Nil)))))
Simplifying took 0.000423 seconds
Result : false
advanced_generalize done
=================================================
Progress: 37


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)

---------------------------------------
forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list2(rank : 12)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (Nil))) = ((Nil) @ any_list1)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 38


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (Nil))) = ((Nil) @ any_list1)

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (Nil))) = any_list1

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:5)
=================================================
Progress: 39


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (Nil))) = any_list1

1 goal(s) more...

0 conjecture(s) more...
>>> induction any_list1(rank : 5)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
rotate (len ((Nil))) (((Nil) @ (Nil))) = (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 40


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
rotate (len ((Nil))) (((Nil) @ (Nil))) = (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : rotate (len (any_list3)) ((any_list3 @ (Nil))) = any_list3
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
rotate (len ((any1::any_list3))) (((any1::any_list3) @ (Nil))) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 41


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : rotate (len (any_list3)) ((any_list3 @ (Nil))) = any_list3
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
rotate (len ((any1::any_list3))) (((any1::any_list3) @ (Nil))) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : rotate (len (any_list3)) ((any_list3 @ (Nil))) = any_list3
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
Lemma : forall (any1:any) (any_list3:any list), rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list3)
Model : any1: 0, any_list3: (2::(Nil))
Model : any1: 7, any_list3: (0::(Nil))
Model : any1: 0, any_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((2::(Nil)))) ((((2::(Nil)) @ (Nil)) @ (0::(Nil)))) = (0::(2::(Nil)))
rotate (len ((0::(Nil)))) ((((0::(Nil)) @ (Nil)) @ (7::(Nil)))) = (7::(0::(Nil)))
rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (0::(Nil)))) = (0::(Nil))
Simplifying took 0.000417 seconds
Result : true
advanced_generalize done
=================================================
Progress: 42


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
Lemma : forall (any1:any) (arg4:any list) (arg5:any list) (arg6:nat), rotate (arg6) (((arg4 @ (any1::(Nil))) @ arg5)) = (any1::rotate (arg6) ((arg4 @ arg5)))
Model : any1: 0, arg4: (8::(Nil)), arg5: (Nil), arg6: ZERO
Model : any1: 4, arg4: (7::(Nil)), arg5: (Nil), arg6: SUCC (SUCC (ZERO))
Model : any1: 6, arg4: (Nil), arg5: (Nil), arg6: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((8::(Nil)) @ (0::(Nil))) @ (Nil))) = (0::rotate (ZERO) (((8::(Nil)) @ (Nil))))
rotate (SUCC (SUCC (ZERO))) ((((7::(Nil)) @ (4::(Nil))) @ (Nil))) = (4::rotate (SUCC (SUCC (ZERO))) (((7::(Nil)) @ (Nil))))
rotate (ZERO) ((((Nil) @ (6::(Nil))) @ (Nil))) = (6::rotate (ZERO) (((Nil) @ (Nil))))
Simplifying took 0.000853 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any_list2:any list), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Model : any1: 4, any2: 0, any_list2: (Nil)
Model : any1: 6, any2: 6, any_list2: (Nil)
Model : any1: 0, any2: 6, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (4::(Nil))) @ (0::(Nil)))) = (4::rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (0::(Nil)))))
rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (6::(Nil))) @ (6::(Nil)))) = (6::rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (6::(Nil)))))
rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (0::(Nil))) @ (6::(Nil)))) = (0::rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (6::(Nil)))))
Simplifying took 0.000460 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 43


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any_list2:any list), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 44


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (any2::(Nil)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 45


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any), rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (any2::(Nil)))))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), rotate (len ((any3::any_list2))) (((((any3::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len ((any3::any_list2))) ((((any3::any_list2) @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 46


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), rotate (len ((any3::any_list2))) (((((any3::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len ((any3::any_list2))) ((((any3::any_list2) @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any2::(Nil))) @ (any3::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro any1(rank:7)
intro any2(rank:7)
rewrite IH1 in goal at 0(rank:23)
=================================================
Progress: 47


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any2::(Nil))) @ (any3::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any2::(Nil))) @ (any3::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any2(rank:7)
rewrite IH1 in goal at 0(rank:23)
=================================================
Progress: 48


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any2::(Nil))) @ (any3::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any2(rank : 7)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any2::(Nil))) @ (any3::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:7)
=================================================
Progress: 49


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
---------------------------------------
forall (any2:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any2::(Nil))) @ (any3::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any2(rank : 7)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
any2 : any
---------------------------------------
rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any2::(Nil))) @ (any3::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:7)
=================================================
Progress: 50


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any2::(Nil))) @ (any3::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (arg7:any list) (arg8:any list) (arg9:nat), rotate (arg9) ((((arg7 @ (any1::(Nil))) @ (any2::(Nil))) @ arg8)) = (any1::(any2::rotate (arg9) ((arg7 @ arg8))))
Model : any1: 2, any2: 0, arg7: (6::(Nil)), arg8: (Nil), arg9: SUCC (ZERO)
Model : any1: 6, any2: 4, arg7: (Nil), arg8: (4::(Nil)), arg9: ZERO
Model : any1: 0, any2: 2, arg7: (Nil), arg8: (Nil), arg9: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((6::(Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (Nil))) = (2::(0::rotate (SUCC (ZERO)) (((6::(Nil)) @ (Nil)))))
rotate (ZERO) (((((Nil) @ (6::(Nil))) @ (4::(Nil))) @ (4::(Nil)))) = (6::(4::rotate (ZERO) (((Nil) @ (4::(Nil))))))
rotate (ZERO) (((((Nil) @ (0::(Nil))) @ (2::(Nil))) @ (Nil))) = (0::(2::rotate (ZERO) (((Nil) @ (Nil)))))
Simplifying took 0.000907 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 51


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
any2 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg7:any list) (arg8:any list) (arg9:nat), rotate (arg9) ((((arg7 @ (any1::(Nil))) @ (any2::(Nil))) @ arg8)) = (any1::(any2::rotate (arg9) ((arg7 @ arg8))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:10)
=================================================
Progress: 52


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
any2 : any
---------------------------------------
rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any2::(Nil))) @ (any3::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
any2 : any
---------------------------------------
rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (arg10:any list) (arg11:any list) (arg12:nat), rotate (arg12) ((((arg10 @ (any1::(Nil))) @ (any2::(Nil))) @ arg11)) = (any1::(any2::rotate (arg12) ((arg10 @ arg11))))
Model : any1: 4, any2: 0, arg10: (Nil), arg11: (Nil), arg12: ZERO
Model : any1: 7, any2: 7, arg10: (Nil), arg11: (Nil), arg12: SUCC (ZERO)
Model : any1: 2, any2: 6, arg10: (Nil), arg11: (Nil), arg12: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((Nil) @ (4::(Nil))) @ (0::(Nil))) @ (Nil))) = (4::(0::rotate (ZERO) (((Nil) @ (Nil)))))
rotate (SUCC (ZERO)) (((((Nil) @ (7::(Nil))) @ (7::(Nil))) @ (Nil))) = (7::(7::rotate (SUCC (ZERO)) (((Nil) @ (Nil)))))
rotate (ZERO) (((((Nil) @ (2::(Nil))) @ (6::(Nil))) @ (Nil))) = (2::(6::rotate (ZERO) (((Nil) @ (Nil)))))
Simplifying took 0.000731 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
any2 : any
---------------------------------------
rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 53


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
any1 : any
any2 : any
---------------------------------------
rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg10:any list) (arg11:any list) (arg12:nat), rotate (arg12) ((((arg10 @ (any1::(Nil))) @ (any2::(Nil))) @ arg11)) = (any1::(any2::rotate (arg12) ((arg10 @ arg11))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:10)
=================================================
Progress: 54


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))

0 goal(s) more...

3 conjecture(s) more...
>>> induction any_list1(rank : 10)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (nat1:nat), rotate (nat1) (((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) (((Nil) @ any_list2))))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 55


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))

0 goal(s) more...

3 conjecture(s) more...
>>> induction any_list1(rank : 10)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (nat1:nat), rotate (nat1) (((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) (((Nil) @ any_list2))))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 56


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (nat1:nat), rotate (nat1) (((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) (((Nil) @ any_list2))))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list2))) = (any1::(any2::rotate (nat1) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:11)
=================================================
Progress: 57


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (nat1:nat), rotate (nat1) (((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) (((Nil) @ any_list2))))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list2))) = (any1::(any2::rotate (nat1) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:11)
=================================================
Progress: 58


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list2))) = (any1::(any2::rotate (nat1) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
>>> induction any_list2(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), rotate (nat1) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat1) ((Nil))))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12)
=================================================
Progress: 59


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list2))) = (any1::(any2::rotate (nat1) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
>>> induction any_list2(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), rotate (nat1) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat1) ((Nil))))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12)
=================================================
Progress: 60


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), rotate (nat1) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat1) ((Nil))))

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 12)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (any1:any) (any2:any), rotate (ZERO) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (ZERO) ((Nil))))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 61


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (any1:any) (any2:any), rotate (ZERO) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (ZERO) ((Nil))))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (SUCC (nat2)) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (SUCC (nat2)) ((Nil))))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 62


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (SUCC (nat2)) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (SUCC (nat2)) ((Nil))))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any1(rank:11)
intro any2(rank:11)
rewrite IH1 in goal at 0(rank:27)
=================================================
Progress: 63


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
>>> intro any1(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
forall (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any2(rank:11)
rewrite IH1 in goal at 0(rank:27)
=================================================
Progress: 64


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11)
=================================================
Progress: 65


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
forall (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11)
=================================================
Progress: 66


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 8, any2: 3, nat2: ZERO
Model : any1: 4, any2: 7, nat2: ZERO
Model : any1: 7, any2: 0, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(3::(8::rotate (ZERO) ((Nil)))) = (8::(3::(Nil)))
(7::(4::rotate (ZERO) ((Nil)))) = (4::(7::(Nil)))
(0::(7::rotate (ZERO) ((Nil)))) = (7::(0::(Nil)))
Simplifying took 0.000136 seconds
Result : false
Lemma : forall (nat2:nat), rotate (nat2) ((Nil)) = (Nil)
Model : nat2: ZERO
Model : nat2: ZERO
Model : nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
Simplifying took 0.000030 seconds
Result : true
Lemma : forall (any1:any) (any2:any), any1 = any2
Model : any1: 2, any2: 1
Model : any1: 8, any2: 4
Model : any1: 3, any2: 1
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
2 = 1
8 = 4
3 = 1
Simplifying took 0.000043 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 1, any2: 3, nat2: ZERO
Model : any1: 3, any2: 0, nat2: ZERO
Model : any1: 7, any2: 2, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(3::(1::rotate (ZERO) ((Nil)))) = (1::(3::(Nil)))
(0::(3::rotate (ZERO) ((Nil)))) = (3::(0::(Nil)))
(2::(7::rotate (ZERO) ((Nil)))) = (7::(2::(Nil)))
Simplifying took 0.000106 seconds
Result : false
advanced_generalize done
=================================================
Progress: 67


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
(any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 8, any2: 4, nat2: ZERO
Model : any1: 0, any2: 2, nat2: ZERO
Model : any1: 3, any2: 3, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(4::(8::rotate (ZERO) ((Nil)))) = (8::(4::(Nil)))
(2::(0::rotate (ZERO) ((Nil)))) = (0::(2::(Nil)))
(3::(3::rotate (ZERO) ((Nil)))) = (3::(3::(Nil)))
Simplifying took 0.000125 seconds
Result : false
Lemma : forall (nat2:nat), rotate (nat2) ((Nil)) = (Nil)
Model : nat2: ZERO
Model : nat2: ZERO
Model : nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
Simplifying took 0.000030 seconds
Result : true
Lemma : forall (any1:any) (any2:any), any1 = any2
Model : any1: 3, any2: 0
Model : any1: 4, any2: 4
Model : any1: 7, any2: 8
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
3 = 0
4 = 4
7 = 8
Simplifying took 0.000050 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 7, any2: 6, nat2: SUCC (ZERO)
Model : any1: 3, any2: 5, nat2: ZERO
Model : any1: 2, any2: 3, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(6::(7::rotate (SUCC (ZERO)) ((Nil)))) = (7::(6::(Nil)))
(5::(3::rotate (ZERO) ((Nil)))) = (3::(5::(Nil)))
(3::(2::rotate (ZERO) ((Nil)))) = (2::(3::(Nil)))
Simplifying took 0.000132 seconds
Result : false
advanced_generalize done
=================================================
Progress: 68


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), rotate (nat1) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat1) ((Nil))))

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 12)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (any1:any) (any2:any), rotate (ZERO) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (ZERO) ((Nil))))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 69


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (any1:any) (any2:any), rotate (ZERO) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (ZERO) ((Nil))))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (SUCC (nat2)) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (SUCC (nat2)) ((Nil))))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 70


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (SUCC (nat2)) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (SUCC (nat2)) ((Nil))))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any1(rank:11)
intro any2(rank:11)
rewrite IH1 in goal at 0(rank:27)
=================================================
Progress: 71


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
>>> intro any1(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
forall (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any2(rank:11)
rewrite IH1 in goal at 0(rank:27)
=================================================
Progress: 72


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11)
=================================================
Progress: 73


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
forall (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11)
=================================================
Progress: 74


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 2, any2: 6, nat2: ZERO
Model : any1: 0, any2: 0, nat2: ZERO
Model : any1: 8, any2: 0, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(6::(2::rotate (ZERO) ((Nil)))) = (2::(6::(Nil)))
(0::(0::rotate (ZERO) ((Nil)))) = (0::(0::(Nil)))
(0::(8::rotate (ZERO) ((Nil)))) = (8::(0::(Nil)))
Simplifying took 0.000104 seconds
Result : false
Lemma : forall (nat2:nat), rotate (nat2) ((Nil)) = (Nil)
Model : nat2: ZERO
Model : nat2: ZERO
Model : nat2: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
rotate (SUCC (ZERO)) ((Nil)) = (Nil)
Simplifying took 0.000035 seconds
Result : true
Lemma : forall (any1:any) (any2:any), any1 = any2
Model : any1: 6, any2: 1
Model : any1: 1, any2: 6
Model : any1: 0, any2: 3
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
6 = 1
1 = 6
0 = 3
Simplifying took 0.000037 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 7, any2: 7, nat2: ZERO
Model : any1: 6, any2: 2, nat2: SUCC (ZERO)
Model : any1: 1, any2: 3, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(7::(7::rotate (ZERO) ((Nil)))) = (7::(7::(Nil)))
(2::(6::rotate (SUCC (ZERO)) ((Nil)))) = (6::(2::(Nil)))
(3::(1::rotate (ZERO) ((Nil)))) = (1::(3::(Nil)))
Simplifying took 0.000128 seconds
Result : false
advanced_generalize done
=================================================
Progress: 75


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) ((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2)) = (any1::(any2::rotate (nat1) ((any_list1 @ any_list2))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
(any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 2, any2: 1, nat2: SUCC (ZERO)
Model : any1: 1, any2: 3, nat2: ZERO
Model : any1: 4, any2: 0, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(1::(2::rotate (SUCC (ZERO)) ((Nil)))) = (2::(1::(Nil)))
(3::(1::rotate (ZERO) ((Nil)))) = (1::(3::(Nil)))
(0::(4::rotate (ZERO) ((Nil)))) = (4::(0::(Nil)))
Simplifying took 0.000104 seconds
Result : false
Lemma : forall (nat2:nat), rotate (nat2) ((Nil)) = (Nil)
Model : nat2: ZERO
Model : nat2: ZERO
Model : nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
Simplifying took 0.000031 seconds
Result : true
Lemma : forall (any1:any) (any2:any), any1 = any2
Model : any1: 2, any2: 3
Model : any1: 3, any2: 7
Model : any1: 2, any2: 2
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
2 = 3
3 = 7
2 = 2
Simplifying took 0.000040 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 0, any2: 7, nat2: ZERO
Model : any1: 1, any2: 6, nat2: ZERO
Model : any1: 5, any2: 7, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(7::(0::rotate (ZERO) ((Nil)))) = (0::(7::(Nil)))
(6::(1::rotate (ZERO) ((Nil)))) = (1::(6::(Nil)))
(7::(5::rotate (ZERO) ((Nil)))) = (5::(7::(Nil)))
Simplifying took 0.000130 seconds
Result : false
advanced_generalize done
=================================================
Progress: 76


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any2::(Nil))) @ (any3::(Nil)))))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (arg13:any list) (arg14:any list) (arg15:nat), rotate (arg15) ((((arg13 @ (any1::(Nil))) @ (any2::(Nil))) @ arg14)) = (any1::(any2::rotate (arg15) ((arg13 @ arg14))))
Model : any1: 3, any2: 6, arg13: (Nil), arg14: (Nil), arg15: SUCC (ZERO)
Model : any1: 8, any2: 5, arg13: (4::(Nil)), arg14: (Nil), arg15: ZERO
Model : any1: 8, any2: 6, arg13: (Nil), arg14: (Nil), arg15: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((Nil) @ (3::(Nil))) @ (6::(Nil))) @ (Nil))) = (3::(6::rotate (SUCC (ZERO)) (((Nil) @ (Nil)))))
rotate (ZERO) (((((4::(Nil)) @ (8::(Nil))) @ (5::(Nil))) @ (Nil))) = (8::(5::rotate (ZERO) (((4::(Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) (((((Nil) @ (8::(Nil))) @ (6::(Nil))) @ (Nil))) = (8::(6::rotate (SUCC (ZERO)) (((Nil) @ (Nil)))))
Simplifying took 0.001116 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any_list2:any list), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Model : any1: 6, any2: 2, any3: 1, any_list2: (Nil)
Model : any1: 0, any2: 4, any3: 4, any_list2: (Nil)
Model : any1: 5, any2: 0, any3: 6, any_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (6::(Nil))) @ (2::(Nil))) @ (1::(Nil)))) = (6::(2::rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (4::(Nil)))) = (0::(4::rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (4::(Nil))))))
rotate (len ((0::(Nil)))) ((((((0::(Nil)) @ (Nil)) @ (5::(Nil))) @ (0::(Nil))) @ (6::(Nil)))) = (5::(0::rotate (len ((0::(Nil)))) ((((0::(Nil)) @ (Nil)) @ (6::(Nil))))))
Simplifying took 0.001147 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 77


1st goal of : forall (any1:any) (any2:any) (any_list1:any list), rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any2::(Nil)))))
any_list1 : any list
any3 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))
Inductive1 : any_list1 = (any3::any_list2)
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any3:any) (any_list2:any list), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:10)
=================================================
Progress: 78


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
>>> induction any_list1(rank : 10)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (any3::(Nil))))))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 79


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (any3::(Nil))))))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len ((any4::any_list2))) ((((((any4::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len ((any4::any_list2))) ((((any4::any_list2) @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 80


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len ((any4::any_list2))) ((((((any4::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len ((any4::any_list2))) ((((any4::any_list2) @ (Nil)) @ (any3::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any1(rank:9)
intro any2(rank:9)
intro any3(rank:9)
=================================================
Progress: 81


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any1(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any2(rank:9)
intro any3(rank:9)
=================================================
Progress: 82


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro any3(rank:9)
=================================================
Progress: 83


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any3(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
Lemma : forall (any1:any) (any2:any) (arg16:any list) (arg17:any list) (arg18:any list) (arg19:nat), rotate (arg19) (((((arg16 @ (any1::(Nil))) @ (any2::(Nil))) @ arg17) @ arg18)) = (any1::(any2::rotate (arg19) (((arg16 @ arg17) @ arg18))))
Model : any1: 0, any2: 8, arg16: (2::(Nil)), arg17: (Nil), arg18: (3::(Nil)), arg19: ZERO
Model : any1: 3, any2: 2, arg16: (Nil), arg17: (Nil), arg18: (3::(Nil)), arg19: ZERO
Model : any1: 0, any2: 5, arg16: (4::(Nil)), arg17: (Nil), arg18: (Nil), arg19: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((2::(Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (3::(Nil)))) = (0::(8::rotate (ZERO) ((((2::(Nil)) @ (Nil)) @ (3::(Nil))))))
rotate (ZERO) ((((((Nil) @ (3::(Nil))) @ (2::(Nil))) @ (Nil)) @ (3::(Nil)))) = (3::(2::rotate (ZERO) ((((Nil) @ (Nil)) @ (3::(Nil))))))
rotate (ZERO) ((((((4::(Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil))) = (0::(5::rotate (ZERO) ((((4::(Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001283 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list2:any list), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Model : any1: 2, any2: 3, any3: 7, any4: 6, any_list2: (Nil)
Model : any1: 1, any2: 5, any3: 0, any4: 8, any_list2: (Nil)
Model : any1: 3, any2: 7, any3: 8, any4: 4, any_list2: (8::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (2::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (6::(Nil)))) = (2::(3::rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (7::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (1::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (8::(Nil)))) = (1::(5::rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))))))
rotate (len ((8::(Nil)))) (((((((8::(Nil)) @ (Nil)) @ (3::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (4::(Nil)))) = (3::(7::rotate (len ((8::(Nil)))) (((((8::(Nil)) @ (Nil)) @ (8::(Nil))) @ (4::(Nil))))))
Simplifying took 0.002660 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 84


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list2:any list), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:12)
=================================================
Progress: 85


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any2(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro any3(rank:9)
=================================================
Progress: 86


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any3(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
Lemma : forall (any1:any) (any2:any) (arg20:any list) (arg21:any list) (arg22:any list) (arg23:nat), rotate (arg23) (((((arg20 @ (any1::(Nil))) @ (any2::(Nil))) @ arg21) @ arg22)) = (any1::(any2::rotate (arg23) (((arg20 @ arg21) @ arg22))))
Model : any1: 1, any2: 0, arg20: (Nil), arg21: (Nil), arg22: (6::(Nil)), arg23: ZERO
Model : any1: 0, any2: 2, arg20: (Nil), arg21: (Nil), arg22: (Nil), arg23: ZERO
Model : any1: 4, any2: 3, arg20: (Nil), arg21: (Nil), arg22: (Nil), arg23: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((Nil) @ (1::(Nil))) @ (0::(Nil))) @ (Nil)) @ (6::(Nil)))) = (1::(0::rotate (ZERO) ((((Nil) @ (Nil)) @ (6::(Nil))))))
rotate (ZERO) ((((((Nil) @ (0::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil))) = (0::(2::rotate (ZERO) ((((Nil) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((Nil) @ (4::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (4::(3::rotate (ZERO) ((((Nil) @ (Nil)) @ (Nil)))))
Simplifying took 0.000652 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 87


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg20:any list) (arg21:any list) (arg22:any list) (arg23:nat), rotate (arg23) (((((arg20 @ (any1::(Nil))) @ (any2::(Nil))) @ arg21) @ arg22)) = (any1::(any2::rotate (arg23) (((arg20 @ arg21) @ arg22))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:12)
=================================================
Progress: 88


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any3(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
Lemma : forall (any1:any) (any2:any) (arg24:any list) (arg25:any list) (arg26:any list) (arg27:nat), rotate (arg27) (((((arg24 @ (any1::(Nil))) @ (any2::(Nil))) @ arg25) @ arg26)) = (any1::(any2::rotate (arg27) (((arg24 @ arg25) @ arg26))))
Model : any1: 0, any2: 0, arg24: (Nil), arg25: (Nil), arg26: (Nil), arg27: SUCC (SUCC (ZERO))
Model : any1: 4, any2: 0, arg24: (Nil), arg25: (Nil), arg26: (Nil), arg27: SUCC (ZERO)
Model : any1: 2, any2: 1, arg24: (4::(Nil)), arg25: (Nil), arg26: (Nil), arg27: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (SUCC (ZERO))) ((((((Nil) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (0::(0::rotate (SUCC (SUCC (ZERO))) ((((Nil) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((Nil) @ (4::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (4::(0::rotate (SUCC (ZERO)) ((((Nil) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((4::(Nil)) @ (2::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil))) = (2::(1::rotate (ZERO) ((((4::(Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.000908 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list2:any list), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Model : any1: 3, any2: 5, any3: 5, any4: 0, any_list2: (Nil)
Model : any1: 3, any2: 5, any3: 3, any4: 5, any_list2: (Nil)
Model : any1: 0, any2: 0, any3: 1, any4: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (3::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (0::(Nil)))) = (3::(5::rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (5::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (3::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (5::(Nil)))) = (3::(5::rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (3::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (5::(Nil)))) = (0::(0::rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (1::(Nil))) @ (5::(Nil))))))
Simplifying took 0.001432 seconds
Result : true
advanced_generalize done
=================================================
Progress: 89


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any3(rank : 9)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any_list1:any list), rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any3::(Nil))))))
any_list1 : any list
any4 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any3::(Nil))))))
Inductive1 : any_list1 = (any4::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
Lemma : forall (any1:any) (any2:any) (arg28:any list) (arg29:any list) (arg30:any list) (arg31:nat), rotate (arg31) (((((arg28 @ (any1::(Nil))) @ (any2::(Nil))) @ arg29) @ arg30)) = (any1::(any2::rotate (arg31) (((arg28 @ arg29) @ arg30))))
Model : any1: 4, any2: 3, arg28: (7::(Nil)), arg29: (Nil), arg30: (Nil), arg31: ZERO
Model : any1: 7, any2: 7, arg28: (Nil), arg29: (Nil), arg30: (Nil), arg31: SUCC (SUCC (ZERO))
Model : any1: 0, any2: 5, arg28: (Nil), arg29: (1::(Nil)), arg30: (Nil), arg31: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((7::(Nil)) @ (4::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (4::(3::rotate (ZERO) ((((7::(Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (SUCC (ZERO))) ((((((Nil) @ (7::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil))) = (7::(7::rotate (SUCC (SUCC (ZERO))) ((((Nil) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((Nil) @ (0::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (Nil))) = (0::(5::rotate (SUCC (ZERO)) ((((Nil) @ (1::(Nil))) @ (Nil)))))
Simplifying took 0.001561 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list2:any list), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Model : any1: 0, any2: 8, any3: 0, any4: 2, any_list2: (Nil)
Model : any1: 2, any2: 4, any3: 7, any4: 1, any_list2: (Nil)
Model : any1: 5, any2: 2, any3: 6, any4: 1, any_list2: (6::(2::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (2::(Nil)))) = (0::(8::rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (2::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (1::(Nil)))) = (2::(4::rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (7::(Nil))) @ (1::(Nil))))))
rotate (len ((6::(2::(Nil))))) (((((((6::(2::(Nil))) @ (Nil)) @ (5::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (1::(Nil)))) = (5::(2::rotate (len ((6::(2::(Nil))))) (((((6::(2::(Nil))) @ (Nil)) @ (6::(Nil))) @ (1::(Nil))))))
Simplifying took 0.003656 seconds
Result : true
advanced_generalize done
=================================================
Progress: 90


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> induction any_list1(rank : 12)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 91


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len ((any5::any_list2))) (((((((any5::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len ((any5::any_list2))) (((((any5::any_list2) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 92


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len ((any5::any_list2))) (((((((any5::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len ((any5::any_list2))) (((((any5::any_list2) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
intro any1(rank:11)
intro any2(rank:11)
intro any3(rank:11)
intro any4(rank:11)
=================================================
Progress: 93


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any1(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any2(rank:11)
intro any3(rank:11)
intro any4(rank:11)
=================================================
Progress: 94


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any2(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any3(rank:11)
intro any4(rank:11)
=================================================
Progress: 95


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any3(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro any4(rank:11)
=================================================
Progress: 96


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any4(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
Lemma : forall (any1:any) (any2:any) (arg32:any list) (arg33:any list) (arg34:any list) (arg35:any list) (arg36:nat), rotate (arg36) ((((((arg32 @ (any1::(Nil))) @ (any2::(Nil))) @ arg33) @ arg34) @ arg35)) = (any1::(any2::rotate (arg36) ((((arg32 @ arg33) @ arg34) @ arg35))))
Model : any1: 2, any2: 2, arg32: (Nil), arg33: (Nil), arg34: (6::(Nil)), arg35: (Nil), arg36: ZERO
Model : any1: 0, any2: 6, arg32: (3::(Nil)), arg33: (Nil), arg34: (Nil), arg35: (Nil), arg36: ZERO
Model : any1: 0, any2: 8, arg32: (Nil), arg33: (2::(Nil)), arg34: (Nil), arg35: (4::(8::(Nil))), arg36: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((Nil) @ (2::(Nil))) @ (2::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil))) = (2::(2::rotate (ZERO) (((((Nil) @ (Nil)) @ (6::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((3::(Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(6::rotate (ZERO) (((((3::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((Nil) @ (0::(Nil))) @ (8::(Nil))) @ (2::(Nil))) @ (Nil)) @ (4::(8::(Nil))))) = (0::(8::rotate (ZERO) (((((Nil) @ (2::(Nil))) @ (Nil)) @ (4::(8::(Nil)))))))
Simplifying took 0.001711 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list2:any list), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Model : any1: 4, any2: 0, any3: 6, any4: 7, any5: 4, any_list2: (Nil)
Model : any1: 0, any2: 6, any3: 4, any4: 5, any5: 3, any_list2: (Nil)
Model : any1: 1, any2: 0, any3: 0, any4: 2, any5: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (4::(Nil)))) = (4::(0::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (6::(Nil))) @ (7::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (3::(Nil)))) = (0::(6::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (4::(Nil))) @ (5::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (5::(Nil)))) = (1::(0::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))) @ (5::(Nil))))))
Simplifying took 0.002440 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 97


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list2:any list), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:14)
=================================================
Progress: 98


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any2(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any3(rank:11)
intro any4(rank:11)
=================================================
Progress: 99


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any3(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro any4(rank:11)
=================================================
Progress: 100


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any4(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any4
Lemma : forall (any1:any) (any2:any) (arg37:any list) (arg38:any list) (arg39:any list) (arg40:any list) (arg41:nat), rotate (arg41) ((((((arg37 @ (any1::(Nil))) @ (any2::(Nil))) @ arg38) @ arg39) @ arg40)) = (any1::(any2::rotate (arg41) ((((arg37 @ arg38) @ arg39) @ arg40))))
Model : any1: 7, any2: 4, arg37: (Nil), arg38: (Nil), arg39: (Nil), arg40: (Nil), arg41: ZERO
Model : any1: 3, any2: 1, arg37: (Nil), arg38: (4::(5::(Nil))), arg39: (Nil), arg40: (Nil), arg41: ZERO
Model : any1: 6, any2: 3, arg37: (Nil), arg38: (0::(Nil)), arg39: (Nil), arg40: (Nil), arg41: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((Nil) @ (7::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(4::rotate (ZERO) (((((Nil) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((Nil) @ (3::(Nil))) @ (1::(Nil))) @ (4::(5::(Nil)))) @ (Nil)) @ (Nil))) = (3::(1::rotate (ZERO) (((((Nil) @ (4::(5::(Nil)))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((Nil) @ (6::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (6::(3::rotate (ZERO) (((((Nil) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.001653 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 101


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg37:any list) (arg38:any list) (arg39:any list) (arg40:any list) (arg41:nat), rotate (arg41) ((((((arg37 @ (any1::(Nil))) @ (any2::(Nil))) @ arg38) @ arg39) @ arg40)) = (any1::(any2::rotate (arg41) ((((arg37 @ arg38) @ arg39) @ arg40))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:14)
=================================================
Progress: 102


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any3(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro any4(rank:11)
=================================================
Progress: 103


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any4(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any4
Lemma : forall (any1:any) (any2:any) (arg42:any list) (arg43:any list) (arg44:any list) (arg45:any list) (arg46:nat), rotate (arg46) ((((((arg42 @ (any1::(Nil))) @ (any2::(Nil))) @ arg43) @ arg44) @ arg45)) = (any1::(any2::rotate (arg46) ((((arg42 @ arg43) @ arg44) @ arg45))))
Model : any1: 5, any2: 2, arg42: (Nil), arg43: (0::(Nil)), arg44: (Nil), arg45: (Nil), arg46: ZERO
Model : any1: 8, any2: 7, arg42: (0::(0::(Nil))), arg43: (3::(Nil)), arg44: (Nil), arg45: (Nil), arg46: ZERO
Model : any1: 8, any2: 3, arg42: (Nil), arg43: (Nil), arg44: (Nil), arg45: (Nil), arg46: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((Nil) @ (5::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (5::(2::rotate (ZERO) (((((Nil) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((0::(0::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (8::(7::rotate (ZERO) (((((0::(0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((Nil) @ (8::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(3::rotate (ZERO) (((((Nil) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002260 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list2:any list), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Model : any1: 0, any2: 1, any3: 0, any4: 6, any5: 4, any_list2: (4::(0::(Nil)))
Model : any1: 1, any2: 2, any3: 1, any4: 1, any5: 2, any_list2: (Nil)
Model : any1: 4, any2: 7, any3: 2, any4: 3, any5: 2, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((4::(0::(Nil))))) ((((((((4::(0::(Nil))) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil)))) = (0::(1::rotate (len ((4::(0::(Nil))))) ((((((4::(0::(Nil))) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (2::(Nil)))) = (1::(2::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (1::(Nil))) @ (1::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (2::(Nil)))) = (4::(7::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (2::(Nil))) @ (3::(Nil))) @ (2::(Nil))))))
Simplifying took 0.004627 seconds
Result : true
advanced_generalize done
=================================================
Progress: 104


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any4(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any4
Lemma : forall (any1:any) (any2:any) (arg47:any list) (arg48:any list) (arg49:any list) (arg50:any list) (arg51:nat), rotate (arg51) ((((((arg47 @ (any1::(Nil))) @ (any2::(Nil))) @ arg48) @ arg49) @ arg50)) = (any1::(any2::rotate (arg51) ((((arg47 @ arg48) @ arg49) @ arg50))))
Model : any1: 6, any2: 3, arg47: (Nil), arg48: (Nil), arg49: (Nil), arg50: (Nil), arg51: ZERO
Model : any1: 0, any2: 4, arg47: (Nil), arg48: (6::(Nil)), arg49: (Nil), arg50: (Nil), arg51: ZERO
Model : any1: 5, any2: 0, arg47: (Nil), arg48: (Nil), arg49: (Nil), arg50: (Nil), arg51: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((Nil) @ (6::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(3::rotate (ZERO) (((((Nil) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((Nil) @ (0::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil))) = (0::(4::rotate (ZERO) (((((Nil) @ (6::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((Nil) @ (5::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(0::rotate (ZERO) (((((Nil) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001104 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 105


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg47:any list) (arg48:any list) (arg49:any list) (arg50:any list) (arg51:nat), rotate (arg51) ((((((arg47 @ (any1::(Nil))) @ (any2::(Nil))) @ arg48) @ arg49) @ arg50)) = (any1::(any2::rotate (arg51) ((((arg47 @ arg48) @ arg49) @ arg50))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:14)
=================================================
Progress: 106


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any3(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro any4(rank:11)
=================================================
Progress: 107


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any4(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any4
Lemma : forall (any1:any) (any2:any) (arg52:any list) (arg53:any list) (arg54:any list) (arg55:any list) (arg56:nat), rotate (arg56) ((((((arg52 @ (any1::(Nil))) @ (any2::(Nil))) @ arg53) @ arg54) @ arg55)) = (any1::(any2::rotate (arg56) ((((arg52 @ arg53) @ arg54) @ arg55))))
Model : any1: 3, any2: 8, arg52: (Nil), arg53: (Nil), arg54: (Nil), arg55: (Nil), arg56: ZERO
Model : any1: 3, any2: 5, arg52: (Nil), arg53: (Nil), arg54: (Nil), arg55: (Nil), arg56: ZERO
Model : any1: 2, any2: 7, arg52: (Nil), arg53: (Nil), arg54: (Nil), arg55: (Nil), arg56: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((Nil) @ (3::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(8::rotate (ZERO) (((((Nil) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((Nil) @ (3::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(5::rotate (ZERO) (((((Nil) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) (((((((Nil) @ (2::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(7::rotate (SUCC (ZERO)) (((((Nil) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001140 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list2:any list), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Model : any1: 7, any2: 2, any3: 0, any4: 2, any5: 2, any_list2: (Nil)
Model : any1: 7, any2: 6, any3: 0, any4: 1, any5: 6, any_list2: (Nil)
Model : any1: 3, any2: 3, any3: 0, any4: 5, any5: 0, any_list2: (7::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (2::(Nil)))) = (7::(2::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (6::(Nil)))) = (7::(6::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (6::(Nil))))))
rotate (len ((7::(Nil)))) ((((((((7::(Nil)) @ (Nil)) @ (3::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil)))) = (3::(3::rotate (len ((7::(Nil)))) ((((((7::(Nil)) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil))))))
Simplifying took 0.003155 seconds
Result : true
advanced_generalize done
=================================================
Progress: 108


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any4(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any4
Lemma : forall (any1:any) (any2:any) (arg57:any list) (arg58:any list) (arg59:any list) (arg60:any list) (arg61:nat), rotate (arg61) ((((((arg57 @ (any1::(Nil))) @ (any2::(Nil))) @ arg58) @ arg59) @ arg60)) = (any1::(any2::rotate (arg61) ((((arg57 @ arg58) @ arg59) @ arg60))))
Model : any1: 0, any2: 1, arg57: (Nil), arg58: (Nil), arg59: (Nil), arg60: (7::(Nil)), arg61: SUCC (ZERO)
Model : any1: 3, any2: 8, arg57: (Nil), arg58: (0::(Nil)), arg59: (Nil), arg60: (Nil), arg61: ZERO
Model : any1: 5, any2: 4, arg57: (Nil), arg58: (Nil), arg59: (Nil), arg60: (Nil), arg61: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil)))) = (0::(1::rotate (SUCC (ZERO)) (((((Nil) @ (Nil)) @ (Nil)) @ (7::(Nil))))))
rotate (ZERO) (((((((Nil) @ (3::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (3::(8::rotate (ZERO) (((((Nil) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((Nil) @ (5::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(4::rotate (ZERO) (((((Nil) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001295 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list2:any list), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Model : any1: 7, any2: 2, any3: 3, any4: 1, any5: 5, any_list2: (Nil)
Model : any1: 6, any2: 0, any3: 5, any4: 7, any5: 7, any_list2: (Nil)
Model : any1: 1, any2: 8, any3: 5, any4: 1, any5: 8, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (5::(Nil)))) = (7::(2::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (7::(Nil)))) = (6::(0::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (5::(Nil))) @ (7::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (8::(Nil)))) = (1::(8::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (5::(Nil))) @ (1::(Nil))) @ (8::(Nil))))))
Simplifying took 0.002666 seconds
Result : true
advanced_generalize done
=================================================
Progress: 109


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any4(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any4
Lemma : forall (any1:any) (any2:any) (arg62:any list) (arg63:any list) (arg64:any list) (arg65:any list) (arg66:nat), rotate (arg66) ((((((arg62 @ (any1::(Nil))) @ (any2::(Nil))) @ arg63) @ arg64) @ arg65)) = (any1::(any2::rotate (arg66) ((((arg62 @ arg63) @ arg64) @ arg65))))
Model : any1: 0, any2: 5, arg62: (Nil), arg63: (Nil), arg64: (Nil), arg65: (Nil), arg66: SUCC (ZERO)
Model : any1: 8, any2: 0, arg62: (Nil), arg63: (Nil), arg64: (1::(4::(Nil))), arg65: (Nil), arg66: ZERO
Model : any1: 8, any2: 6, arg62: (Nil), arg63: (Nil), arg64: (5::(Nil)), arg65: (Nil), arg66: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((Nil) @ (0::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(5::rotate (SUCC (ZERO)) (((((Nil) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((Nil) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (1::(4::(Nil)))) @ (Nil))) = (8::(0::rotate (ZERO) (((((Nil) @ (Nil)) @ (1::(4::(Nil)))) @ (Nil)))))
rotate (ZERO) (((((((Nil) @ (8::(Nil))) @ (6::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (8::(6::rotate (ZERO) (((((Nil) @ (Nil)) @ (5::(Nil))) @ (Nil)))))
Simplifying took 0.001604 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list2:any list), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Model : any1: 7, any2: 8, any3: 6, any4: 1, any5: 4, any_list2: (Nil)
Model : any1: 2, any2: 8, any3: 7, any4: 7, any5: 0, any_list2: (Nil)
Model : any1: 5, any2: 0, any3: 0, any4: 4, any5: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (4::(Nil)))) = (7::(8::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (6::(Nil))) @ (1::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (0::(Nil)))) = (2::(8::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (5::(Nil)))) = (5::(0::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (5::(Nil))))))
Simplifying took 0.002698 seconds
Result : true
advanced_generalize done
=================================================
Progress: 110


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any4(rank : 11)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any4
Lemma : forall (any1:any) (any2:any) (arg67:any list) (arg68:any list) (arg69:any list) (arg70:any list) (arg71:nat), rotate (arg71) ((((((arg67 @ (any1::(Nil))) @ (any2::(Nil))) @ arg68) @ arg69) @ arg70)) = (any1::(any2::rotate (arg71) ((((arg67 @ arg68) @ arg69) @ arg70))))
Model : any1: 4, any2: 4, arg67: (Nil), arg68: (Nil), arg69: (Nil), arg70: (Nil), arg71: ZERO
Model : any1: 5, any2: 6, arg67: (Nil), arg68: (0::(Nil)), arg69: (2::(6::(Nil))), arg70: (Nil), arg71: ZERO
Model : any1: 7, any2: 2, arg67: (Nil), arg68: (Nil), arg69: (Nil), arg70: (Nil), arg71: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((Nil) @ (4::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(4::rotate (ZERO) (((((Nil) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((Nil) @ (5::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (2::(6::(Nil)))) @ (Nil))) = (5::(6::rotate (ZERO) (((((Nil) @ (0::(Nil))) @ (2::(6::(Nil)))) @ (Nil)))))
rotate (ZERO) (((((((Nil) @ (7::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(2::rotate (ZERO) (((((Nil) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001512 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 111


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any_list1:any list), rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
any_list1 : any list
any5 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))))))
Inductive1 : any_list1 = (any5::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg67:any list) (arg68:any list) (arg69:any list) (arg70:any list) (arg71:nat), rotate (arg71) ((((((arg67 @ (any1::(Nil))) @ (any2::(Nil))) @ arg68) @ arg69) @ arg70)) = (any1::(any2::rotate (arg71) ((((arg67 @ arg68) @ arg69) @ arg70))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:14)
=================================================
Progress: 112


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))

0 goal(s) more...

4 conjecture(s) more...
>>> induction any_list1(rank : 12)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) ((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list2) @ any_list3))))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12)
=================================================
Progress: 113


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) ((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list2) @ any_list3))))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list2 @ any_list3)))) = (any1::(any2::rotate (nat1) ((any_list2 @ any_list3))))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:13)
=================================================
Progress: 114


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list2 @ any_list3)))) = (any1::(any2::rotate (nat1) ((any_list2 @ any_list3))))

1 goal(s) more...

4 conjecture(s) more...
>>> induction any_list2(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list3)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list3))))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 115


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list3)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list3))))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list3))) = (any1::(any2::rotate (nat1) (any_list3)))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:14)
=================================================
Progress: 116


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> induction any_list1(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 117


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len ((Nil))) ((((((Nil) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

1 goal(s) more...

5 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len ((any6::any_list2))) ((((((((any6::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len ((any6::any_list2))) ((((((any6::any_list2) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 118


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len ((any6::any_list2))) ((((((((any6::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len ((any6::any_list2))) ((((((any6::any_list2) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 5
intro any1(rank:13)
intro any3(rank:13)
intro any4(rank:13)
intro any5(rank:13)
intro any2(rank:13)
=================================================
Progress: 119


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any1(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 4
intro any2(rank:13)
intro any3(rank:13)
intro any4(rank:13)
intro any5(rank:13)
=================================================
Progress: 120


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any2(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
intro any3(rank:13)
intro any4(rank:13)
intro any5(rank:13)
=================================================
Progress: 121


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any3(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
intro any4(rank:13)
intro any5(rank:13)
=================================================
Progress: 122


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any4(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro any5(rank:13)
=================================================
Progress: 123


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any5
Lemma : forall (any1:any) (any2:any) (arg72:any list) (arg73:any list) (arg74:any list) (arg75:any list) (arg76:any list) (arg77:nat), rotate (arg77) (((((((arg72 @ (any1::(Nil))) @ (any2::(Nil))) @ arg73) @ arg74) @ arg75) @ arg76)) = (any1::(any2::rotate (arg77) (((((arg72 @ arg73) @ arg74) @ arg75) @ arg76))))
Model : any1: 0, any2: 8, arg72: (Nil), arg73: (Nil), arg74: (Nil), arg75: (4::(Nil)), arg76: (Nil), arg77: ZERO
Model : any1: 5, any2: 6, arg72: (Nil), arg73: (4::(Nil)), arg74: (Nil), arg75: (Nil), arg76: (Nil), arg77: ZERO
Model : any1: 5, any2: 2, arg72: (Nil), arg73: (Nil), arg74: (0::(Nil)), arg75: (Nil), arg76: (Nil), arg77: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((Nil) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) = (0::(8::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (5::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(6::rotate (ZERO) ((((((Nil) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (5::(Nil))) @ (2::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (5::(2::rotate (ZERO) ((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.001698 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 124


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg72:any list) (arg73:any list) (arg74:any list) (arg75:any list) (arg76:any list) (arg77:nat), rotate (arg77) (((((((arg72 @ (any1::(Nil))) @ (any2::(Nil))) @ arg73) @ arg74) @ arg75) @ arg76)) = (any1::(any2::rotate (arg77) (((((arg72 @ arg73) @ arg74) @ arg75) @ arg76))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:16)
=================================================
Progress: 125


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any2(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
intro any3(rank:13)
intro any4(rank:13)
intro any5(rank:13)
=================================================
Progress: 126


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any3(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
intro any4(rank:13)
intro any5(rank:13)
=================================================
Progress: 127


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any4(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro any5(rank:13)
=================================================
Progress: 128


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any5
Lemma : forall (any1:any) (any2:any) (arg78:any list) (arg79:any list) (arg80:any list) (arg81:any list) (arg82:any list) (arg83:nat), rotate (arg83) (((((((arg78 @ (any1::(Nil))) @ (any2::(Nil))) @ arg79) @ arg80) @ arg81) @ arg82)) = (any1::(any2::rotate (arg83) (((((arg78 @ arg79) @ arg80) @ arg81) @ arg82))))
Model : any1: 1, any2: 4, arg78: (1::(Nil)), arg79: (Nil), arg80: (Nil), arg81: (Nil), arg82: (Nil), arg83: ZERO
Model : any1: 7, any2: 5, arg78: (Nil), arg79: (Nil), arg80: (Nil), arg81: (Nil), arg82: (Nil), arg83: ZERO
Model : any1: 4, any2: 4, arg78: (Nil), arg79: (1::(Nil)), arg80: (Nil), arg81: (2::(Nil)), arg82: (Nil), arg83: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((1::(Nil)) @ (1::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(4::rotate (ZERO) ((((((1::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (7::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(5::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (4::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil))) = (4::(4::rotate (ZERO) ((((((Nil) @ (1::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil)))))
Simplifying took 0.001849 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list2:any list), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Model : any1: 6, any2: 6, any3: 2, any4: 6, any5: 0, any6: 0, any_list2: (Nil)
Model : any1: 2, any2: 8, any3: 0, any4: 7, any5: 5, any6: 3, any_list2: (Nil)
Model : any1: 4, any2: 5, any3: 1, any4: 2, any5: 2, any6: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (6::(6::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (2::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (3::(Nil)))) = (2::(8::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (0::(Nil)))) = (4::(5::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (1::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (0::(Nil))))))
Simplifying took 0.003717 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 129


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list2:any list), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:16)
=================================================
Progress: 130


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any3(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
intro any4(rank:13)
intro any5(rank:13)
=================================================
Progress: 131


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any4(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro any5(rank:13)
=================================================
Progress: 132


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any5
Lemma : forall (any1:any) (any2:any) (arg84:any list) (arg85:any list) (arg86:any list) (arg87:any list) (arg88:any list) (arg89:nat), rotate (arg89) (((((((arg84 @ (any1::(Nil))) @ (any2::(Nil))) @ arg85) @ arg86) @ arg87) @ arg88)) = (any1::(any2::rotate (arg89) (((((arg84 @ arg85) @ arg86) @ arg87) @ arg88))))
Model : any1: 0, any2: 6, arg84: (Nil), arg85: (6::(0::(Nil))), arg86: (7::(Nil)), arg87: (Nil), arg88: (Nil), arg89: ZERO
Model : any1: 4, any2: 5, arg84: (7::(2::(1::(Nil)))), arg85: (Nil), arg86: (Nil), arg87: (Nil), arg88: (6::(3::(Nil))), arg89: ZERO
Model : any1: 0, any2: 4, arg84: (Nil), arg85: (Nil), arg86: (Nil), arg87: (Nil), arg88: (Nil), arg89: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((Nil) @ (0::(Nil))) @ (6::(Nil))) @ (6::(0::(Nil)))) @ (7::(Nil))) @ (Nil)) @ (Nil))) = (0::(6::rotate (ZERO) ((((((Nil) @ (6::(0::(Nil)))) @ (7::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((7::(2::(1::(Nil)))) @ (4::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(3::(Nil))))) = (4::(5::rotate (ZERO) ((((((7::(2::(1::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(3::(Nil)))))))
rotate (ZERO) ((((((((Nil) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(4::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.004023 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list2:any list), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Model : any1: 6, any2: 6, any3: 5, any4: 8, any5: 1, any6: 6, any_list2: (5::(Nil))
Model : any1: 1, any2: 0, any3: 5, any4: 7, any5: 0, any6: 4, any_list2: (Nil)
Model : any1: 5, any2: 2, any3: 3, any4: 8, any5: 1, any6: 8, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((5::(Nil)))) (((((((((5::(Nil)) @ (Nil)) @ (6::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (6::(Nil)))) = (6::(6::rotate (len ((5::(Nil)))) (((((((5::(Nil)) @ (Nil)) @ (5::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (4::(Nil)))) = (1::(0::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (5::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (8::(Nil)))) = (5::(2::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (3::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (8::(Nil))))))
Simplifying took 0.006087 seconds
Result : true
advanced_generalize done
=================================================
Progress: 133


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any4(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro any5(rank:13)
=================================================
Progress: 134


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any5
Lemma : forall (any1:any) (any2:any) (arg90:any list) (arg91:any list) (arg92:any list) (arg93:any list) (arg94:any list) (arg95:nat), rotate (arg95) (((((((arg90 @ (any1::(Nil))) @ (any2::(Nil))) @ arg91) @ arg92) @ arg93) @ arg94)) = (any1::(any2::rotate (arg95) (((((arg90 @ arg91) @ arg92) @ arg93) @ arg94))))
Model : any1: 7, any2: 7, arg90: (Nil), arg91: (Nil), arg92: (Nil), arg93: (Nil), arg94: (Nil), arg95: ZERO
Model : any1: 7, any2: 0, arg90: (Nil), arg91: (Nil), arg92: (Nil), arg93: (Nil), arg94: (Nil), arg95: ZERO
Model : any1: 8, any2: 1, arg90: (Nil), arg91: (1::(4::(Nil))), arg92: (Nil), arg93: (Nil), arg94: (Nil), arg95: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((Nil) @ (7::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(7::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (7::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(0::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (8::(Nil))) @ (1::(Nil))) @ (1::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(1::rotate (ZERO) ((((((Nil) @ (1::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001744 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 135


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg90:any list) (arg91:any list) (arg92:any list) (arg93:any list) (arg94:any list) (arg95:nat), rotate (arg95) (((((((arg90 @ (any1::(Nil))) @ (any2::(Nil))) @ arg91) @ arg92) @ arg93) @ arg94)) = (any1::(any2::rotate (arg95) (((((arg90 @ arg91) @ arg92) @ arg93) @ arg94))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:16)
=================================================
Progress: 136


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
intro any5
Lemma : forall (any1:any) (any2:any) (arg100:any list) (arg101:nat) (arg96:any list) (arg97:any list) (arg98:any list) (arg99:any list), rotate (arg101) (((((((arg96 @ (any1::(Nil))) @ (any2::(Nil))) @ arg97) @ arg98) @ arg99) @ arg100)) = (any1::(any2::rotate (arg101) (((((arg96 @ arg97) @ arg98) @ arg99) @ arg100))))
Model : any1: 1, any2: 0, arg100: (Nil), arg101: ZERO, arg96: (Nil), arg97: (Nil), arg98: (Nil), arg99: (8::(0::(0::(Nil))))
Model : any1: 5, any2: 5, arg100: (Nil), arg101: ZERO, arg96: (Nil), arg97: (Nil), arg98: (Nil), arg99: (Nil)
Model : any1: 0, any2: 1, arg100: (Nil), arg101: ZERO, arg96: (Nil), arg97: (Nil), arg98: (Nil), arg99: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((Nil) @ (1::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (8::(0::(0::(Nil))))) @ (Nil))) = (1::(0::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (8::(0::(0::(Nil))))) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (5::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(5::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (0::(1::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)))))
Simplifying took 0.001457 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 137


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg100:any list) (arg101:nat) (arg96:any list) (arg97:any list) (arg98:any list) (arg99:any list), rotate (arg101) (((((((arg96 @ (any1::(Nil))) @ (any2::(Nil))) @ arg97) @ arg98) @ arg99) @ arg100)) = (any1::(any2::rotate (arg101) (((((arg96 @ arg97) @ arg98) @ arg99) @ arg100))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:16)
=================================================
Progress: 138


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any3(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
intro any4(rank:13)
intro any5(rank:13)
=================================================
Progress: 139


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any4(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro any5(rank:13)
=================================================
Progress: 140


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any5 : any
---------------------------------------
forall (any3:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any5
Lemma : forall (any1:any) (any2:any) (arg102:any list) (arg103:any list) (arg104:any list) (arg105:any list) (arg106:any list) (arg107:nat), rotate (arg107) (((((((arg102 @ (any1::(Nil))) @ (any2::(Nil))) @ arg103) @ arg104) @ arg105) @ arg106)) = (any1::(any2::rotate (arg107) (((((arg102 @ arg103) @ arg104) @ arg105) @ arg106))))
Model : any1: 0, any2: 7, arg102: (Nil), arg103: (Nil), arg104: (Nil), arg105: (3::(0::(Nil))), arg106: (Nil), arg107: ZERO
Model : any1: 8, any2: 8, arg102: (Nil), arg103: (8::(Nil)), arg104: (Nil), arg105: (Nil), arg106: (6::(6::(Nil))), arg107: ZERO
Model : any1: 0, any2: 0, arg102: (Nil), arg103: (8::(Nil)), arg104: (Nil), arg105: (Nil), arg106: (4::(Nil)), arg107: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((Nil) @ (0::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (3::(0::(Nil)))) @ (Nil))) = (0::(7::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (3::(0::(Nil)))) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (8::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (6::(6::(Nil))))) = (8::(8::rotate (ZERO) ((((((Nil) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (6::(6::(Nil)))))))
rotate (ZERO) ((((((((Nil) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (0::(0::rotate (ZERO) ((((((Nil) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil))))))
Simplifying took 0.002514 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any5 : any
---------------------------------------
forall (any3:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 141


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any5 : any
---------------------------------------
forall (any3:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg102:any list) (arg103:any list) (arg104:any list) (arg105:any list) (arg106:any list) (arg107:nat), rotate (arg107) (((((((arg102 @ (any1::(Nil))) @ (any2::(Nil))) @ arg103) @ arg104) @ arg105) @ arg106)) = (any1::(any2::rotate (arg107) (((((arg102 @ arg103) @ arg104) @ arg105) @ arg106))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:16)
=================================================
Progress: 142


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any4(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro any5(rank:13)
=================================================
Progress: 143


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any3 : any
any5 : any
---------------------------------------
forall (any2:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any5
Lemma : forall (any1:any) (any2:any) (arg108:any list) (arg109:any list) (arg110:any list) (arg111:any list) (arg112:any list) (arg113:nat), rotate (arg113) (((((((arg108 @ (any1::(Nil))) @ (any2::(Nil))) @ arg109) @ arg110) @ arg111) @ arg112)) = (any1::(any2::rotate (arg113) (((((arg108 @ arg109) @ arg110) @ arg111) @ arg112))))
Model : any1: 8, any2: 6, arg108: (Nil), arg109: (Nil), arg110: (Nil), arg111: (Nil), arg112: (Nil), arg113: SUCC (ZERO)
Model : any1: 0, any2: 0, arg108: (Nil), arg109: (Nil), arg110: (Nil), arg111: (Nil), arg112: (Nil), arg113: ZERO
Model : any1: 7, any2: 3, arg108: (Nil), arg109: (Nil), arg110: (Nil), arg111: (Nil), arg112: (Nil), arg113: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((Nil) @ (8::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(6::rotate (SUCC (ZERO)) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(0::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (7::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(3::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001187 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list2:any list), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Model : any1: 0, any2: 0, any3: 4, any4: 4, any5: 5, any6: 0, any_list2: (Nil)
Model : any1: 6, any2: 2, any3: 0, any4: 0, any5: 3, any6: 1, any_list2: (Nil)
Model : any1: 1, any2: 3, any3: 1, any4: 5, any5: 1, any6: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (0::(Nil)))) = (0::(0::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (4::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (1::(Nil)))) = (6::(2::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (5::(Nil)))) = (1::(3::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (1::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (5::(Nil))))))
Simplifying took 0.003363 seconds
Result : true
advanced_generalize done
=================================================
Progress: 144


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any4
intro any5
Lemma : forall (any1:any) (any2:any) (arg114:any list) (arg115:any list) (arg116:any list) (arg117:any list) (arg118:any list) (arg119:nat), rotate (arg119) (((((((arg114 @ (any1::(Nil))) @ (any2::(Nil))) @ arg115) @ arg116) @ arg117) @ arg118)) = (any1::(any2::rotate (arg119) (((((arg114 @ arg115) @ arg116) @ arg117) @ arg118))))
Model : any1: 4, any2: 7, arg114: (Nil), arg115: (Nil), arg116: (0::(Nil)), arg117: (Nil), arg118: (3::(Nil)), arg119: ZERO
Model : any1: 0, any2: 8, arg114: (Nil), arg115: (0::(Nil)), arg116: (Nil), arg117: (Nil), arg118: (6::(Nil)), arg119: SUCC (ZERO)
Model : any1: 8, any2: 0, arg114: (Nil), arg115: (Nil), arg116: (Nil), arg117: (Nil), arg118: (0::(Nil)), arg119: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((Nil) @ (4::(Nil))) @ (7::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (3::(Nil)))) = (4::(7::rotate (ZERO) ((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (3::(Nil))))))
rotate (SUCC (ZERO)) ((((((((Nil) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (0::(8::rotate (SUCC (ZERO)) ((((((Nil) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))))))
rotate (ZERO) ((((((((Nil) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (8::(0::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))))))
Simplifying took 0.002042 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list2:any list), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Model : any1: 6, any2: 5, any3: 5, any4: 4, any5: 4, any6: 5, any_list2: (3::(Nil))
Model : any1: 7, any2: 0, any3: 5, any4: 1, any5: 7, any6: 1, any_list2: (Nil)
Model : any1: 8, any2: 2, any3: 7, any4: 2, any5: 1, any6: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((3::(Nil)))) (((((((((3::(Nil)) @ (Nil)) @ (6::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (5::(Nil)))) = (6::(5::rotate (len ((3::(Nil)))) (((((((3::(Nil)) @ (Nil)) @ (5::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (1::(Nil)))) = (7::(0::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (5::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (5::(Nil)))) = (8::(2::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (7::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (5::(Nil))))))
Simplifying took 0.005677 seconds
Result : true
advanced_generalize done
=================================================
Progress: 145


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any4(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro any5(rank:13)
=================================================
Progress: 146


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any5
Lemma : forall (any1:any) (any2:any) (arg120:any list) (arg121:any list) (arg122:any list) (arg123:any list) (arg124:any list) (arg125:nat), rotate (arg125) (((((((arg120 @ (any1::(Nil))) @ (any2::(Nil))) @ arg121) @ arg122) @ arg123) @ arg124)) = (any1::(any2::rotate (arg125) (((((arg120 @ arg121) @ arg122) @ arg123) @ arg124))))
Model : any1: 8, any2: 8, arg120: (Nil), arg121: (Nil), arg122: (0::(Nil)), arg123: (Nil), arg124: (4::(Nil)), arg125: SUCC (ZERO)
Model : any1: 4, any2: 3, arg120: (Nil), arg121: (Nil), arg122: (Nil), arg123: (Nil), arg124: (Nil), arg125: ZERO
Model : any1: 4, any2: 2, arg120: (Nil), arg121: (Nil), arg122: (0::(Nil)), arg123: (Nil), arg124: (Nil), arg125: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((Nil) @ (8::(Nil))) @ (8::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (4::(Nil)))) = (8::(8::rotate (SUCC (ZERO)) ((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (4::(Nil))))))
rotate (ZERO) ((((((((Nil) @ (4::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(3::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (4::(Nil))) @ (2::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (4::(2::rotate (ZERO) ((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.001739 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list2:any list), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Model : any1: 0, any2: 4, any3: 0, any4: 0, any5: 0, any6: 4, any_list2: (Nil)
Model : any1: 1, any2: 5, any3: 0, any4: 6, any5: 0, any6: 3, any_list2: (Nil)
Model : any1: 1, any2: 0, any3: 3, any4: 1, any5: 7, any6: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (4::(Nil)))) = (0::(4::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (3::(Nil)))) = (1::(5::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (7::(Nil)))) = (1::(0::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (7::(Nil))))))
Simplifying took 0.002983 seconds
Result : true
advanced_generalize done
=================================================
Progress: 147


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any4
intro any5
Lemma : forall (any1:any) (any2:any) (arg126:any list) (arg127:any list) (arg128:any list) (arg129:any list) (arg130:any list) (arg131:nat), rotate (arg131) (((((((arg126 @ (any1::(Nil))) @ (any2::(Nil))) @ arg127) @ arg128) @ arg129) @ arg130)) = (any1::(any2::rotate (arg131) (((((arg126 @ arg127) @ arg128) @ arg129) @ arg130))))
Model : any1: 4, any2: 0, arg126: (Nil), arg127: (4::(Nil)), arg128: (Nil), arg129: (Nil), arg130: (Nil), arg131: ZERO
Model : any1: 3, any2: 3, arg126: (Nil), arg127: (0::(2::(Nil))), arg128: (3::(3::(Nil))), arg129: (Nil), arg130: (Nil), arg131: ZERO
Model : any1: 1, any2: 2, arg126: (Nil), arg127: (Nil), arg128: (6::(Nil)), arg129: (Nil), arg130: (Nil), arg131: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((Nil) @ (4::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(0::rotate (ZERO) ((((((Nil) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (3::(Nil))) @ (3::(Nil))) @ (0::(2::(Nil)))) @ (3::(3::(Nil)))) @ (Nil)) @ (Nil))) = (3::(3::rotate (ZERO) ((((((Nil) @ (0::(2::(Nil)))) @ (3::(3::(Nil)))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (1::(Nil))) @ (2::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil))) = (1::(2::rotate (ZERO) ((((((Nil) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.002566 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 148


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg126:any list) (arg127:any list) (arg128:any list) (arg129:any list) (arg130:any list) (arg131:nat), rotate (arg131) (((((((arg126 @ (any1::(Nil))) @ (any2::(Nil))) @ arg127) @ arg128) @ arg129) @ arg130)) = (any1::(any2::rotate (arg131) (((((arg126 @ arg127) @ arg128) @ arg129) @ arg130))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:16)
=================================================
Progress: 149


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any4
intro any5
Lemma : forall (any1:any) (any2:any) (arg132:any list) (arg133:any list) (arg134:any list) (arg135:any list) (arg136:any list) (arg137:nat), rotate (arg137) (((((((arg132 @ (any1::(Nil))) @ (any2::(Nil))) @ arg133) @ arg134) @ arg135) @ arg136)) = (any1::(any2::rotate (arg137) (((((arg132 @ arg133) @ arg134) @ arg135) @ arg136))))
Model : any1: 5, any2: 1, arg132: (1::(Nil)), arg133: (Nil), arg134: (4::(Nil)), arg135: (Nil), arg136: (Nil), arg137: ZERO
Model : any1: 2, any2: 7, arg132: (Nil), arg133: (Nil), arg134: (Nil), arg135: (Nil), arg136: (5::(Nil)), arg137: ZERO
Model : any1: 1, any2: 0, arg132: (Nil), arg133: (4::(Nil)), arg134: (Nil), arg135: (0::(Nil)), arg136: (Nil), arg137: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((1::(Nil)) @ (5::(Nil))) @ (1::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil))) = (5::(1::rotate (ZERO) ((((((1::(Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (2::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) = (2::(7::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))))))
rotate (ZERO) ((((((((Nil) @ (1::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (1::(0::rotate (ZERO) ((((((Nil) @ (4::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)))))
Simplifying took 0.002088 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list2:any list), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Model : any1: 0, any2: 3, any3: 0, any4: 6, any5: 7, any6: 6, any_list2: (Nil)
Model : any1: 4, any2: 1, any3: 1, any4: 2, any5: 7, any6: 6, any_list2: (Nil)
Model : any1: 3, any2: 8, any3: 4, any4: 0, any5: 4, any6: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (6::(Nil)))) = (0::(3::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (6::(Nil)))) = (4::(1::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (1::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (0::(Nil)))) = (3::(8::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (0::(Nil))))))
Simplifying took 0.003869 seconds
Result : true
advanced_generalize done
=================================================
Progress: 150


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any4(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro any5(rank:13)
=================================================
Progress: 151


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any4:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any5
Lemma : forall (any1:any) (any2:any) (arg138:any list) (arg139:any list) (arg140:any list) (arg141:any list) (arg142:any list) (arg143:nat), rotate (arg143) (((((((arg138 @ (any1::(Nil))) @ (any2::(Nil))) @ arg139) @ arg140) @ arg141) @ arg142)) = (any1::(any2::rotate (arg143) (((((arg138 @ arg139) @ arg140) @ arg141) @ arg142))))
Model : any1: 4, any2: 1, arg138: (Nil), arg139: (Nil), arg140: (Nil), arg141: (Nil), arg142: (1::(Nil)), arg143: ZERO
Model : any1: 1, any2: 3, arg138: (Nil), arg139: (4::(Nil)), arg140: (Nil), arg141: (Nil), arg142: (1::(Nil)), arg143: ZERO
Model : any1: 8, any2: 2, arg138: (Nil), arg139: (Nil), arg140: (5::(Nil)), arg141: (Nil), arg142: (Nil), arg143: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((Nil) @ (4::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (4::(1::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))))))
rotate (ZERO) ((((((((Nil) @ (1::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (1::(3::rotate (ZERO) ((((((Nil) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))))))
rotate (SUCC (ZERO)) ((((((((Nil) @ (8::(Nil))) @ (2::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil))) = (8::(2::rotate (SUCC (ZERO)) ((((((Nil) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.001911 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list2:any list), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Model : any1: 7, any2: 8, any3: 3, any4: 0, any5: 1, any6: 3, any_list2: (Nil)
Model : any1: 7, any2: 5, any3: 7, any4: 1, any5: 3, any6: 6, any_list2: (Nil)
Model : any1: 0, any2: 3, any3: 6, any4: 0, any5: 6, any6: 4, any_list2: (4::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (3::(Nil)))) = (7::(8::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (6::(Nil)))) = (7::(5::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (7::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (6::(Nil))))))
rotate (len ((4::(Nil)))) (((((((((4::(Nil)) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil)))) = (0::(3::rotate (len ((4::(Nil)))) (((((((4::(Nil)) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))))))
Simplifying took 0.005371 seconds
Result : true
advanced_generalize done
=================================================
Progress: 152


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any3:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any4
intro any5
Lemma : forall (any1:any) (any2:any) (arg144:any list) (arg145:any list) (arg146:any list) (arg147:any list) (arg148:any list) (arg149:nat), rotate (arg149) (((((((arg144 @ (any1::(Nil))) @ (any2::(Nil))) @ arg145) @ arg146) @ arg147) @ arg148)) = (any1::(any2::rotate (arg149) (((((arg144 @ arg145) @ arg146) @ arg147) @ arg148))))
Model : any1: 2, any2: 1, arg144: (Nil), arg145: (Nil), arg146: (Nil), arg147: (Nil), arg148: (Nil), arg149: ZERO
Model : any1: 2, any2: 7, arg144: (Nil), arg145: (4::(3::(Nil))), arg146: (Nil), arg147: (6::(Nil)), arg148: (Nil), arg149: ZERO
Model : any1: 7, any2: 0, arg144: (6::(Nil)), arg145: (Nil), arg146: (Nil), arg147: (3::(4::(Nil))), arg148: (Nil), arg149: SUCC (SUCC (ZERO))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((Nil) @ (2::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(1::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (2::(Nil))) @ (7::(Nil))) @ (4::(3::(Nil)))) @ (Nil)) @ (6::(Nil))) @ (Nil))) = (2::(7::rotate (ZERO) ((((((Nil) @ (4::(3::(Nil)))) @ (Nil)) @ (6::(Nil))) @ (Nil)))))
rotate (SUCC (SUCC (ZERO))) ((((((((6::(Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (3::(4::(Nil)))) @ (Nil))) = (7::(0::rotate (SUCC (SUCC (ZERO))) ((((((6::(Nil)) @ (Nil)) @ (Nil)) @ (3::(4::(Nil)))) @ (Nil)))))
Simplifying took 0.003709 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list2:any list), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Model : any1: 0, any2: 0, any3: 0, any4: 7, any5: 4, any6: 5, any_list2: (Nil)
Model : any1: 8, any2: 0, any3: 4, any4: 0, any5: 5, any6: 3, any_list2: (5::(Nil))
Model : any1: 7, any2: 0, any3: 6, any4: 0, any5: 6, any6: 2, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (5::(Nil)))) = (0::(0::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (5::(Nil))))))
rotate (len ((5::(Nil)))) (((((((((5::(Nil)) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (3::(Nil)))) = (8::(0::rotate (len ((5::(Nil)))) (((((((5::(Nil)) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil)))) = (7::(0::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil))))))
Simplifying took 0.004874 seconds
Result : true
advanced_generalize done
=================================================
Progress: 153


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any4
intro any5
Lemma : forall (any1:any) (any2:any) (arg150:any list) (arg151:any list) (arg152:any list) (arg153:any list) (arg154:any list) (arg155:nat), rotate (arg155) (((((((arg150 @ (any1::(Nil))) @ (any2::(Nil))) @ arg151) @ arg152) @ arg153) @ arg154)) = (any1::(any2::rotate (arg155) (((((arg150 @ arg151) @ arg152) @ arg153) @ arg154))))
Model : any1: 5, any2: 4, arg150: (Nil), arg151: (Nil), arg152: (Nil), arg153: (Nil), arg154: (Nil), arg155: ZERO
Model : any1: 0, any2: 5, arg150: (Nil), arg151: (Nil), arg152: (Nil), arg153: (Nil), arg154: (Nil), arg155: ZERO
Model : any1: 7, any2: 5, arg150: (Nil), arg151: (Nil), arg152: (Nil), arg153: (Nil), arg154: (Nil), arg155: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((Nil) @ (5::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(4::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (0::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(5::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((Nil) @ (7::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(5::rotate (ZERO) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001184 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 154


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg150:any list) (arg151:any list) (arg152:any list) (arg153:any list) (arg154:any list) (arg155:nat), rotate (arg155) (((((((arg150 @ (any1::(Nil))) @ (any2::(Nil))) @ arg151) @ arg152) @ arg153) @ arg154)) = (any1::(any2::rotate (arg155) (((((arg150 @ arg151) @ arg152) @ arg153) @ arg154))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:16)
=================================================
Progress: 155


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any4
intro any5
Lemma : forall (any1:any) (any2:any) (arg156:any list) (arg157:any list) (arg158:any list) (arg159:any list) (arg160:any list) (arg161:nat), rotate (arg161) (((((((arg156 @ (any1::(Nil))) @ (any2::(Nil))) @ arg157) @ arg158) @ arg159) @ arg160)) = (any1::(any2::rotate (arg161) (((((arg156 @ arg157) @ arg158) @ arg159) @ arg160))))
Model : any1: 7, any2: 8, arg156: (Nil), arg157: (Nil), arg158: (7::(Nil)), arg159: (Nil), arg160: (Nil), arg161: ZERO
Model : any1: 0, any2: 0, arg156: (4::(Nil)), arg157: (Nil), arg158: (Nil), arg159: (Nil), arg160: (Nil), arg161: ZERO
Model : any1: 2, any2: 7, arg156: (Nil), arg157: (Nil), arg158: (Nil), arg159: (Nil), arg160: (Nil), arg161: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((Nil) @ (7::(Nil))) @ (8::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil))) = (7::(8::rotate (ZERO) ((((((Nil) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((4::(Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(0::rotate (ZERO) ((((((4::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((Nil) @ (2::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(7::rotate (SUCC (ZERO)) ((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001805 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list2:any list), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Model : any1: 6, any2: 7, any3: 2, any4: 4, any5: 3, any6: 1, any_list2: (Nil)
Model : any1: 3, any2: 4, any3: 8, any4: 0, any5: 1, any6: 4, any_list2: (Nil)
Model : any1: 7, any2: 3, any3: 7, any4: 7, any5: 2, any6: 4, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (1::(Nil)))) = (6::(7::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (2::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (4::(Nil)))) = (3::(4::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (4::(Nil)))) = (7::(3::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (4::(Nil))))))
Simplifying took 0.004028 seconds
Result : true
advanced_generalize done
=================================================
Progress: 156


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any5:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
>>> intro any5(rank : 13)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any_list1:any list), rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
any_list1 : any list
any6 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))))))
Inductive1 : any_list1 = (any6::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any4
intro any5
Lemma : forall (any1:any) (any2:any) (arg162:any list) (arg163:any list) (arg164:any list) (arg165:any list) (arg166:any list) (arg167:nat), rotate (arg167) (((((((arg162 @ (any1::(Nil))) @ (any2::(Nil))) @ arg163) @ arg164) @ arg165) @ arg166)) = (any1::(any2::rotate (arg167) (((((arg162 @ arg163) @ arg164) @ arg165) @ arg166))))
Model : any1: 0, any2: 1, arg162: (8::(Nil)), arg163: (Nil), arg164: (Nil), arg165: (Nil), arg166: (Nil), arg167: SUCC (ZERO)
Model : any1: 4, any2: 0, arg162: (Nil), arg163: (8::(Nil)), arg164: (Nil), arg165: (Nil), arg166: (Nil), arg167: SUCC (ZERO)
Model : any1: 4, any2: 3, arg162: (3::(Nil)), arg163: (Nil), arg164: (Nil), arg165: (Nil), arg166: (Nil), arg167: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((8::(Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(1::rotate (SUCC (ZERO)) ((((((8::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((Nil) @ (4::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(0::rotate (SUCC (ZERO)) ((((((Nil) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((3::(Nil)) @ (4::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(3::rotate (ZERO) ((((((3::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002445 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list2:any list), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Model : any1: 0, any2: 8, any3: 6, any4: 7, any5: 3, any6: 0, any_list2: (Nil)
Model : any1: 3, any2: 0, any3: 8, any4: 3, any5: 5, any6: 0, any_list2: (Nil)
Model : any1: 0, any2: 5, any3: 4, any4: 0, any5: 2, any6: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (0::(Nil)))) = (0::(8::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (6::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (0::(Nil)))) = (3::(0::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (8::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil)))) = (0::(5::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))))))
Simplifying took 0.003735 seconds
Result : true
advanced_generalize done
=================================================
Progress: 157


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))

0 goal(s) more...

5 conjecture(s) more...
>>> induction any_list1(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) (((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list2) @ any_list3) @ any_list4))))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14)
=================================================
Progress: 158


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))

0 goal(s) more...

5 conjecture(s) more...
>>> induction any_list1(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) (((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list2) @ any_list3) @ any_list4))))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14)
=================================================
Progress: 159


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))

0 goal(s) more...

5 conjecture(s) more...
>>> induction any_list1(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) (((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list2) @ any_list3) @ any_list4))))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14)
=================================================
Progress: 160


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list3))) = (any1::(any2::rotate (nat1) (any_list3)))

2 goal(s) more...

4 conjecture(s) more...
>>> induction any_list3(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), rotate (nat1) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat1) ((Nil))))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:15)
=================================================
Progress: 161


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) (((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list2) @ any_list3) @ any_list4))))

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list2 @ any_list3) @ any_list4)))) = (any1::(any2::rotate (nat1) (((any_list2 @ any_list3) @ any_list4))))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:15)
=================================================
Progress: 162


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) (((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list2) @ any_list3) @ any_list4))))

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list2 @ any_list3) @ any_list4)))) = (any1::(any2::rotate (nat1) (((any_list2 @ any_list3) @ any_list4))))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:15)
=================================================
Progress: 163


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) (((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list2) @ any_list3) @ any_list4))))

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list2 @ any_list3) @ any_list4)))) = (any1::(any2::rotate (nat1) (((any_list2 @ any_list3) @ any_list4))))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:15)
=================================================
Progress: 164


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), rotate (nat1) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat1) ((Nil))))

3 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
forall (any1:any) (any2:any), rotate (ZERO) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (ZERO) ((Nil))))

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 165


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
forall (any1:any) (any2:any), rotate (ZERO) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (ZERO) ((Nil))))

4 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (SUCC (nat2)) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (SUCC (nat2)) ((Nil))))

3 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14)
=================================================
Progress: 166


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (SUCC (nat2)) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (SUCC (nat2)) ((Nil))))

3 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any1(rank:14)
intro any2(rank:14)
rewrite IH1 in goal at 0(rank:30)
=================================================
Progress: 167


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

3 goal(s) more...

4 conjecture(s) more...
>>> intro any1(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
forall (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any2(rank:14)
rewrite IH1 in goal at 0(rank:30)
=================================================
Progress: 168


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

3 goal(s) more...

4 conjecture(s) more...
>>> intro any2(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:14)
=================================================
Progress: 169


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
forall (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

3 goal(s) more...

4 conjecture(s) more...
>>> intro any2(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:14)
=================================================
Progress: 170


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 5, any2: 5, nat2: ZERO
Model : any1: 4, any2: 2, nat2: SUCC (ZERO)
Model : any1: 0, any2: 7, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(5::(5::rotate (ZERO) ((Nil)))) = (5::(5::(Nil)))
(2::(4::rotate (SUCC (ZERO)) ((Nil)))) = (4::(2::(Nil)))
(7::(0::rotate (ZERO) ((Nil)))) = (0::(7::(Nil)))
Simplifying took 0.000137 seconds
Result : false
Lemma : forall (nat2:nat), rotate (nat2) ((Nil)) = (Nil)
Model : nat2: ZERO
Model : nat2: SUCC (ZERO)
Model : nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((Nil)) = (Nil)
rotate (SUCC (ZERO)) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
Simplifying took 0.000038 seconds
Result : true
Lemma : forall (any1:any) (any2:any), any1 = any2
Model : any1: 8, any2: 2
Model : any1: 1, any2: 6
Model : any1: 7, any2: 5
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
8 = 2
1 = 6
7 = 5
Simplifying took 0.000055 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 7, any2: 0, nat2: ZERO
Model : any1: 1, any2: 0, nat2: ZERO
Model : any1: 5, any2: 6, nat2: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(0::(7::rotate (ZERO) ((Nil)))) = (7::(0::(Nil)))
(0::(1::rotate (ZERO) ((Nil)))) = (1::(0::(Nil)))
(6::(5::rotate (SUCC (ZERO)) ((Nil)))) = (5::(6::(Nil)))
Simplifying took 0.000114 seconds
Result : false
advanced_generalize done
=================================================
Progress: 171


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), rotate (nat1) (((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3)) = (any1::(any2::rotate (nat1) (((any_list1 @ any_list2) @ any_list3))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
(any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 8, any2: 3, nat2: ZERO
Model : any1: 1, any2: 1, nat2: ZERO
Model : any1: 5, any2: 5, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(3::(8::rotate (ZERO) ((Nil)))) = (8::(3::(Nil)))
(1::(1::rotate (ZERO) ((Nil)))) = (1::(1::(Nil)))
(5::(5::rotate (ZERO) ((Nil)))) = (5::(5::(Nil)))
Simplifying took 0.000122 seconds
Result : false
Lemma : forall (nat2:nat), rotate (nat2) ((Nil)) = (Nil)
Model : nat2: ZERO
Model : nat2: ZERO
Model : nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
Simplifying took 0.000030 seconds
Result : true
Lemma : forall (any1:any) (any2:any), any1 = any2
Model : any1: 7, any2: 3
Model : any1: 0, any2: 0
Model : any1: 2, any2: 5
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
7 = 3
0 = 0
2 = 5
Simplifying took 0.000038 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 1, any2: 6, nat2: ZERO
Model : any1: 7, any2: 1, nat2: ZERO
Model : any1: 6, any2: 8, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(6::(1::rotate (ZERO) ((Nil)))) = (1::(6::(Nil)))
(1::(7::rotate (ZERO) ((Nil)))) = (7::(1::(Nil)))
(8::(6::rotate (ZERO) ((Nil)))) = (6::(8::(Nil)))
Simplifying took 0.000133 seconds
Result : false
advanced_generalize done
=================================================
Progress: 172


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list2 @ any_list3) @ any_list4)))) = (any1::(any2::rotate (nat1) (((any_list2 @ any_list3) @ any_list4))))

1 goal(s) more...

5 conjecture(s) more...
>>> induction any_list2(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list3) @ any_list4)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list3) @ any_list4))))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15)
=================================================
Progress: 173


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list2 @ any_list3) @ any_list4)))) = (any1::(any2::rotate (nat1) (((any_list2 @ any_list3) @ any_list4))))

1 goal(s) more...

5 conjecture(s) more...
>>> induction any_list2(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list3) @ any_list4)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list3) @ any_list4))))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15)
=================================================
Progress: 174


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list2 @ any_list3) @ any_list4)))) = (any1::(any2::rotate (nat1) (((any_list2 @ any_list3) @ any_list4))))

1 goal(s) more...

5 conjecture(s) more...
>>> induction any_list2(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list3) @ any_list4)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list3) @ any_list4))))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15)
=================================================
Progress: 175


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list3) @ any_list4)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list3) @ any_list4))))

2 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list3 @ any_list4)))) = (any1::(any2::rotate (nat1) ((any_list3 @ any_list4))))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:16)
=================================================
Progress: 176


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list3) @ any_list4)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list3) @ any_list4))))

2 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list3 @ any_list4)))) = (any1::(any2::rotate (nat1) ((any_list3 @ any_list4))))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:16)
=================================================
Progress: 177


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list3) @ any_list4)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list3) @ any_list4))))

2 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list3 @ any_list4)))) = (any1::(any2::rotate (nat1) ((any_list3 @ any_list4))))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:16)
=================================================
Progress: 178


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

0 goal(s) more...

6 conjecture(s) more...
>>> induction any_list1(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16)
=================================================
Progress: 179


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> induction any_list1(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
reflexivity(rank:15)
=================================================
Progress: 180


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len ((Nil))) (((((((Nil) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

1 goal(s) more...

6 conjecture(s) more...
>>> reflexivity(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len ((any7::any_list2))) (((((((((any7::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len ((any7::any_list2))) (((((((any7::any_list2) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:15)
=================================================
Progress: 181


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len ((any7::any_list2))) (((((((((any7::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len ((any7::any_list2))) (((((((any7::any_list2) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 6
intro any1(rank:15)
intro any3(rank:15)
intro any4(rank:15)
intro any5(rank:15)
intro any6(rank:15)
intro any2(rank:15)
=================================================
Progress: 182


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any1(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 5
intro any2(rank:15)
intro any4(rank:15)
intro any5(rank:15)
intro any6(rank:15)
intro any3(rank:15)
=================================================
Progress: 183


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any2(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
intro any3(rank:15)
intro any4(rank:15)
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 184


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any3(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 3
intro any4(rank:15)
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 185


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any4(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 2
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 186


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 187


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any6
Lemma : forall (any1:any) (any2:any) (arg168:any list) (arg169:any list) (arg170:any list) (arg171:any list) (arg172:any list) (arg173:any list) (arg174:nat), rotate (arg174) ((((((((arg168 @ (any1::(Nil))) @ (any2::(Nil))) @ arg169) @ arg170) @ arg171) @ arg172) @ arg173)) = (any1::(any2::rotate (arg174) ((((((arg168 @ arg169) @ arg170) @ arg171) @ arg172) @ arg173))))
Model : any1: 0, any2: 6, arg168: (Nil), arg169: (Nil), arg170: (Nil), arg171: (Nil), arg172: (6::(Nil)), arg173: (Nil), arg174: ZERO
Model : any1: 5, any2: 5, arg168: (Nil), arg169: (Nil), arg170: (Nil), arg171: (Nil), arg172: (Nil), arg173: (Nil), arg174: ZERO
Model : any1: 8, any2: 3, arg168: (Nil), arg169: (Nil), arg170: (0::(Nil)), arg171: (Nil), arg172: (Nil), arg173: (Nil), arg174: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil))) = (0::(6::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (5::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(5::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (8::(Nil))) @ (3::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(3::rotate (ZERO) (((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001647 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
=================================================
Progress: 188


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg168:any list) (arg169:any list) (arg170:any list) (arg171:any list) (arg172:any list) (arg173:any list) (arg174:nat), rotate (arg174) ((((((((arg168 @ (any1::(Nil))) @ (any2::(Nil))) @ arg169) @ arg170) @ arg171) @ arg172) @ arg173)) = (any1::(any2::rotate (arg174) ((((((arg168 @ arg169) @ arg170) @ arg171) @ arg172) @ arg173))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:18)
=================================================
Progress: 189


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any2(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
intro any3(rank:15)
intro any4(rank:15)
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 190


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any3(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 3
intro any4(rank:15)
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 191


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any4(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 2
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 192


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 193


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any6
Lemma : forall (any1:any) (any2:any) (arg175:any list) (arg176:any list) (arg177:any list) (arg178:any list) (arg179:any list) (arg180:any list) (arg181:nat), rotate (arg181) ((((((((arg175 @ (any1::(Nil))) @ (any2::(Nil))) @ arg176) @ arg177) @ arg178) @ arg179) @ arg180)) = (any1::(any2::rotate (arg181) ((((((arg175 @ arg176) @ arg177) @ arg178) @ arg179) @ arg180))))
Model : any1: 0, any2: 6, arg175: (Nil), arg176: (Nil), arg177: (Nil), arg178: (2::(Nil)), arg179: (Nil), arg180: (8::(Nil)), arg181: ZERO
Model : any1: 4, any2: 2, arg175: (Nil), arg176: (Nil), arg177: (Nil), arg178: (7::(1::(Nil))), arg179: (Nil), arg180: (Nil), arg181: ZERO
Model : any1: 2, any2: 4, arg175: (Nil), arg176: (Nil), arg177: (7::(7::(Nil))), arg178: (Nil), arg179: (Nil), arg180: (Nil), arg181: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (8::(Nil)))) = (0::(6::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (8::(Nil))))))
rotate (ZERO) (((((((((Nil) @ (4::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (7::(1::(Nil)))) @ (Nil)) @ (Nil))) = (4::(2::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (7::(1::(Nil)))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (2::(Nil))) @ (4::(Nil))) @ (Nil)) @ (7::(7::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(4::rotate (ZERO) (((((((Nil) @ (Nil)) @ (7::(7::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003018 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
=================================================
Progress: 194


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg175:any list) (arg176:any list) (arg177:any list) (arg178:any list) (arg179:any list) (arg180:any list) (arg181:nat), rotate (arg181) ((((((((arg175 @ (any1::(Nil))) @ (any2::(Nil))) @ arg176) @ arg177) @ arg178) @ arg179) @ arg180)) = (any1::(any2::rotate (arg181) ((((((arg175 @ arg176) @ arg177) @ arg178) @ arg179) @ arg180))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:18)
=================================================
Progress: 195


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any3(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 3
intro any4(rank:15)
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 196


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any4(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 2
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 197


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 198


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any6
Lemma : forall (any1:any) (any2:any) (arg182:any list) (arg183:any list) (arg184:any list) (arg185:any list) (arg186:any list) (arg187:any list) (arg188:nat), rotate (arg188) ((((((((arg182 @ (any1::(Nil))) @ (any2::(Nil))) @ arg183) @ arg184) @ arg185) @ arg186) @ arg187)) = (any1::(any2::rotate (arg188) ((((((arg182 @ arg183) @ arg184) @ arg185) @ arg186) @ arg187))))
Model : any1: 6, any2: 0, arg182: (Nil), arg183: (Nil), arg184: (5::(Nil)), arg185: (Nil), arg186: (Nil), arg187: (Nil), arg188: ZERO
Model : any1: 7, any2: 6, arg182: (Nil), arg183: (1::(Nil)), arg184: (4::(Nil)), arg185: (Nil), arg186: (Nil), arg187: (Nil), arg188: SUCC (SUCC (SUCC (ZERO)))
Model : any1: 2, any2: 8, arg182: (Nil), arg183: (Nil), arg184: (7::(Nil)), arg185: (6::(Nil)), arg186: (Nil), arg187: (0::(Nil)), arg188: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (6::(Nil))) @ (0::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(0::rotate (ZERO) (((((((Nil) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (SUCC (SUCC (ZERO)))) (((((((((Nil) @ (7::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(6::rotate (SUCC (SUCC (SUCC (ZERO)))) (((((((Nil) @ (1::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (2::(Nil))) @ (8::(Nil))) @ (Nil)) @ (7::(Nil))) @ (6::(Nil))) @ (Nil)) @ (0::(Nil)))) = (2::(8::rotate (ZERO) (((((((Nil) @ (Nil)) @ (7::(Nil))) @ (6::(Nil))) @ (Nil)) @ (0::(Nil))))))
Simplifying took 0.004180 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 5, any2: 7, any3: 2, any4: 5, any5: 2, any6: 7, any7: 0, any_list2: (Nil)
Model : any1: 7, any2: 0, any3: 2, any4: 6, any5: 4, any6: 5, any7: 5, any_list2: (Nil)
Model : any1: 5, any2: 3, any3: 2, any4: 5, any5: 6, any6: 0, any7: 4, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (0::(Nil)))) = (5::(7::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (5::(Nil)))) = (7::(0::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (4::(Nil)))) = (5::(3::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (4::(Nil))))))
Simplifying took 0.006255 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
=================================================
Progress: 199


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:18)
=================================================
Progress: 200


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any4(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 2
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 201


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 202


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any6
Lemma : forall (any1:any) (any2:any) (arg189:any list) (arg190:any list) (arg191:any list) (arg192:any list) (arg193:any list) (arg194:any list) (arg195:nat), rotate (arg195) ((((((((arg189 @ (any1::(Nil))) @ (any2::(Nil))) @ arg190) @ arg191) @ arg192) @ arg193) @ arg194)) = (any1::(any2::rotate (arg195) ((((((arg189 @ arg190) @ arg191) @ arg192) @ arg193) @ arg194))))
Model : any1: 7, any2: 2, arg189: (Nil), arg190: (Nil), arg191: (Nil), arg192: (1::(Nil)), arg193: (Nil), arg194: (Nil), arg195: ZERO
Model : any1: 8, any2: 6, arg189: (Nil), arg190: (2::(Nil)), arg191: (Nil), arg192: (Nil), arg193: (Nil), arg194: (Nil), arg195: ZERO
Model : any1: 6, any2: 7, arg189: (Nil), arg190: (Nil), arg191: (Nil), arg192: (Nil), arg193: (Nil), arg194: (1::(Nil)), arg195: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (7::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil))) = (7::(2::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (8::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(6::rotate (ZERO) (((((((Nil) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (6::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (6::(7::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))))))
Simplifying took 0.002059 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
=================================================
Progress: 203


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg189:any list) (arg190:any list) (arg191:any list) (arg192:any list) (arg193:any list) (arg194:any list) (arg195:nat), rotate (arg195) ((((((((arg189 @ (any1::(Nil))) @ (any2::(Nil))) @ arg190) @ arg191) @ arg192) @ arg193) @ arg194)) = (any1::(any2::rotate (arg195) ((((((arg189 @ arg190) @ arg191) @ arg192) @ arg193) @ arg194))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:18)
=================================================
Progress: 204


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 205


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
intro any6
Lemma : forall (any1:any) (any2:any) (arg196:any list) (arg197:any list) (arg198:any list) (arg199:any list) (arg200:any list) (arg201:any list) (arg202:nat), rotate (arg202) ((((((((arg196 @ (any1::(Nil))) @ (any2::(Nil))) @ arg197) @ arg198) @ arg199) @ arg200) @ arg201)) = (any1::(any2::rotate (arg202) ((((((arg196 @ arg197) @ arg198) @ arg199) @ arg200) @ arg201))))
Model : any1: 4, any2: 3, arg196: (Nil), arg197: (Nil), arg198: (Nil), arg199: (Nil), arg200: (Nil), arg201: (0::(Nil)), arg202: SUCC (ZERO)
Model : any1: 0, any2: 1, arg196: (Nil), arg197: (Nil), arg198: (Nil), arg199: (Nil), arg200: (8::(Nil)), arg201: (5::(Nil)), arg202: ZERO
Model : any1: 2, any2: 2, arg196: (Nil), arg197: (Nil), arg198: (Nil), arg199: (Nil), arg200: (Nil), arg201: (0::(Nil)), arg202: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((Nil) @ (4::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (4::(3::rotate (SUCC (ZERO)) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))))))
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (5::(Nil)))) = (0::(1::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (5::(Nil))))))
rotate (ZERO) (((((((((Nil) @ (2::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (2::(2::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))))))
Simplifying took 0.001612 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 3, any2: 3, any3: 1, any4: 6, any5: 2, any6: 1, any7: 0, any_list2: (Nil)
Model : any1: 6, any2: 5, any3: 4, any4: 2, any5: 8, any6: 7, any7: 2, any_list2: (6::(Nil))
Model : any1: 7, any2: 2, any3: 2, any4: 8, any5: 2, any6: 8, any7: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (0::(Nil)))) = (3::(3::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (0::(Nil))))))
rotate (len ((6::(Nil)))) ((((((((((6::(Nil)) @ (Nil)) @ (6::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (2::(Nil)))) = (6::(5::rotate (len ((6::(Nil)))) ((((((((6::(Nil)) @ (Nil)) @ (4::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil)))) = (7::(2::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (8::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil))))))
Simplifying took 0.008417 seconds
Result : true
advanced_generalize done
=================================================
Progress: 206


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg203:any list) (arg204:any list) (arg205:any list) (arg206:any list) (arg207:any list) (arg208:any list) (arg209:nat), rotate (arg209) ((((((((arg203 @ (any1::(Nil))) @ (any2::(Nil))) @ arg204) @ arg205) @ arg206) @ arg207) @ arg208)) = (any1::(any2::rotate (arg209) ((((((arg203 @ arg204) @ arg205) @ arg206) @ arg207) @ arg208))))
Model : any1: 3, any2: 7, arg203: (5::(Nil)), arg204: (3::(Nil)), arg205: (Nil), arg206: (Nil), arg207: (Nil), arg208: (0::(Nil)), arg209: ZERO
Model : any1: 0, any2: 8, arg203: (Nil), arg204: (Nil), arg205: (Nil), arg206: (Nil), arg207: (Nil), arg208: (Nil), arg209: ZERO
Model : any1: 3, any2: 4, arg203: (Nil), arg204: (Nil), arg205: (Nil), arg206: (6::(Nil)), arg207: (Nil), arg208: (Nil), arg209: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((5::(Nil)) @ (3::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (3::(7::rotate (ZERO) (((((((5::(Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))))))
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(8::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (3::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil))) = (3::(4::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.002701 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 8, any2: 0, any3: 6, any4: 1, any5: 4, any6: 8, any7: 2, any_list2: (Nil)
Model : any1: 8, any2: 8, any3: 6, any4: 7, any5: 7, any6: 3, any7: 7, any_list2: (Nil)
Model : any1: 3, any2: 2, any3: 7, any4: 1, any5: 0, any6: 0, any7: 2, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (2::(Nil)))) = (8::(0::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (7::(Nil)))) = (8::(8::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (2::(Nil)))) = (3::(2::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (2::(Nil))))))
Simplifying took 0.006307 seconds
Result : true
advanced_generalize done
=================================================
Progress: 207


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any3(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 3
intro any4(rank:15)
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 208


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any4(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 2
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 209


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any5 : any
---------------------------------------
forall (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 210


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any6
Lemma : forall (any1:any) (any2:any) (arg210:any list) (arg211:any list) (arg212:any list) (arg213:any list) (arg214:any list) (arg215:any list) (arg216:nat), rotate (arg216) ((((((((arg210 @ (any1::(Nil))) @ (any2::(Nil))) @ arg211) @ arg212) @ arg213) @ arg214) @ arg215)) = (any1::(any2::rotate (arg216) ((((((arg210 @ arg211) @ arg212) @ arg213) @ arg214) @ arg215))))
Model : any1: 0, any2: 0, arg210: (Nil), arg211: (Nil), arg212: (4::(Nil)), arg213: (Nil), arg214: (Nil), arg215: (2::(Nil)), arg216: ZERO
Model : any1: 7, any2: 5, arg210: (Nil), arg211: (Nil), arg212: (Nil), arg213: (Nil), arg214: (Nil), arg215: (Nil), arg216: ZERO
Model : any1: 6, any2: 0, arg210: (Nil), arg211: (7::(Nil)), arg212: (Nil), arg213: (Nil), arg214: (8::(Nil)), arg215: (5::(Nil)), arg216: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (2::(Nil)))) = (0::(0::rotate (ZERO) (((((((Nil) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (2::(Nil))))))
rotate (ZERO) (((((((((Nil) @ (7::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(5::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (6::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (5::(Nil)))) = (6::(0::rotate (ZERO) (((((((Nil) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (5::(Nil))))))
Simplifying took 0.002374 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
=================================================
Progress: 211


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg210:any list) (arg211:any list) (arg212:any list) (arg213:any list) (arg214:any list) (arg215:any list) (arg216:nat), rotate (arg216) ((((((((arg210 @ (any1::(Nil))) @ (any2::(Nil))) @ arg211) @ arg212) @ arg213) @ arg214) @ arg215)) = (any1::(any2::rotate (arg216) ((((((arg210 @ arg211) @ arg212) @ arg213) @ arg214) @ arg215))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:18)
=================================================
Progress: 212


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any4(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 2
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 213


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any5 : any
---------------------------------------
forall (any2:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 214


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any6 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any6
Lemma : forall (any1:any) (any2:any) (arg217:any list) (arg218:any list) (arg219:any list) (arg220:any list) (arg221:any list) (arg222:any list) (arg223:nat), rotate (arg223) ((((((((arg217 @ (any1::(Nil))) @ (any2::(Nil))) @ arg218) @ arg219) @ arg220) @ arg221) @ arg222)) = (any1::(any2::rotate (arg223) ((((((arg217 @ arg218) @ arg219) @ arg220) @ arg221) @ arg222))))
Model : any1: 0, any2: 6, arg217: (Nil), arg218: (Nil), arg219: (4::(Nil)), arg220: (Nil), arg221: (Nil), arg222: (Nil), arg223: SUCC (ZERO)
Model : any1: 8, any2: 1, arg217: (Nil), arg218: (Nil), arg219: (Nil), arg220: (Nil), arg221: (Nil), arg222: (Nil), arg223: ZERO
Model : any1: 0, any2: 6, arg217: (6::(Nil)), arg218: (Nil), arg219: (6::(Nil)), arg220: (Nil), arg221: (Nil), arg222: (7::(Nil)), arg223: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((Nil) @ (0::(Nil))) @ (6::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(6::rotate (SUCC (ZERO)) (((((((Nil) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (8::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(1::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((6::(Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil)))) = (0::(6::rotate (ZERO) (((((((6::(Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil))))))
Simplifying took 0.003077 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 7, any2: 6, any3: 8, any4: 7, any5: 7, any6: 8, any7: 1, any_list2: (Nil)
Model : any1: 8, any2: 0, any3: 2, any4: 6, any5: 0, any6: 6, any7: 2, any_list2: (Nil)
Model : any1: 0, any2: 5, any3: 0, any4: 4, any5: 6, any6: 1, any7: 2, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (1::(Nil)))) = (7::(6::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil)))) = (8::(0::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (2::(Nil)))) = (0::(5::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (2::(Nil))))))
Simplifying took 0.006260 seconds
Result : true
advanced_generalize done
=================================================
Progress: 215


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 216


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any4 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any4
intro any6
Lemma : forall (any1:any) (any2:any) (arg224:any list) (arg225:any list) (arg226:any list) (arg227:any list) (arg228:any list) (arg229:any list) (arg230:nat), rotate (arg230) ((((((((arg224 @ (any1::(Nil))) @ (any2::(Nil))) @ arg225) @ arg226) @ arg227) @ arg228) @ arg229)) = (any1::(any2::rotate (arg230) ((((((arg224 @ arg225) @ arg226) @ arg227) @ arg228) @ arg229))))
Model : any1: 4, any2: 6, arg224: (Nil), arg225: (Nil), arg226: (Nil), arg227: (Nil), arg228: (Nil), arg229: (Nil), arg230: ZERO
Model : any1: 3, any2: 8, arg224: (Nil), arg225: (6::(Nil)), arg226: (Nil), arg227: (Nil), arg228: (Nil), arg229: (0::(Nil)), arg230: ZERO
Model : any1: 8, any2: 0, arg224: (Nil), arg225: (Nil), arg226: (Nil), arg227: (Nil), arg228: (Nil), arg229: (Nil), arg230: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (4::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(6::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (3::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (3::(8::rotate (ZERO) (((((((Nil) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))))))
rotate (ZERO) (((((((((Nil) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(0::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001888 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any4 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
=================================================
Progress: 217


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any4 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg224:any list) (arg225:any list) (arg226:any list) (arg227:any list) (arg228:any list) (arg229:any list) (arg230:nat), rotate (arg230) ((((((((arg224 @ (any1::(Nil))) @ (any2::(Nil))) @ arg225) @ arg226) @ arg227) @ arg228) @ arg229)) = (any1::(any2::rotate (arg230) ((((((arg224 @ arg225) @ arg226) @ arg227) @ arg228) @ arg229))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:18)
=================================================
Progress: 218


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg231:any list) (arg232:any list) (arg233:any list) (arg234:any list) (arg235:any list) (arg236:any list) (arg237:nat), rotate (arg237) ((((((((arg231 @ (any1::(Nil))) @ (any2::(Nil))) @ arg232) @ arg233) @ arg234) @ arg235) @ arg236)) = (any1::(any2::rotate (arg237) ((((((arg231 @ arg232) @ arg233) @ arg234) @ arg235) @ arg236))))
Model : any1: 0, any2: 4, arg231: (Nil), arg232: (Nil), arg233: (Nil), arg234: (8::(Nil)), arg235: (Nil), arg236: (Nil), arg237: ZERO
Model : any1: 6, any2: 4, arg231: (Nil), arg232: (Nil), arg233: (Nil), arg234: (Nil), arg235: (Nil), arg236: (Nil), arg237: ZERO
Model : any1: 4, any2: 6, arg231: (2::(2::(Nil))), arg232: (Nil), arg233: (Nil), arg234: (Nil), arg235: (Nil), arg236: (1::(Nil)), arg237: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (0::(4::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (6::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(4::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((2::(2::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (4::(6::rotate (ZERO) (((((((2::(2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))))))
Simplifying took 0.002794 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 1, any2: 0, any3: 8, any4: 1, any5: 6, any6: 5, any7: 0, any_list2: (Nil)
Model : any1: 7, any2: 0, any3: 6, any4: 3, any5: 2, any6: 6, any7: 5, any_list2: (4::(Nil))
Model : any1: 3, any2: 1, any3: 3, any4: 7, any5: 1, any6: 8, any7: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (0::(Nil)))) = (1::(0::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (0::(Nil))))))
rotate (len ((4::(Nil)))) ((((((((((4::(Nil)) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (5::(Nil)))) = (7::(0::rotate (len ((4::(Nil)))) ((((((((4::(Nil)) @ (Nil)) @ (6::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (7::(Nil)))) = (3::(1::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (7::(Nil))))))
Simplifying took 0.008441 seconds
Result : true
advanced_generalize done
=================================================
Progress: 219


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any4(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 2
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 220


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 221


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any6 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any6
Lemma : forall (any1:any) (any2:any) (arg238:any list) (arg239:any list) (arg240:any list) (arg241:any list) (arg242:any list) (arg243:any list) (arg244:nat), rotate (arg244) ((((((((arg238 @ (any1::(Nil))) @ (any2::(Nil))) @ arg239) @ arg240) @ arg241) @ arg242) @ arg243)) = (any1::(any2::rotate (arg244) ((((((arg238 @ arg239) @ arg240) @ arg241) @ arg242) @ arg243))))
Model : any1: 3, any2: 2, arg238: (Nil), arg239: (4::(6::(5::(5::(Nil))))), arg240: (Nil), arg241: (Nil), arg242: (4::(Nil)), arg243: (1::(Nil)), arg244: SUCC (ZERO)
Model : any1: 1, any2: 0, arg238: (Nil), arg239: (Nil), arg240: (Nil), arg241: (Nil), arg242: (1::(Nil)), arg243: (1::(Nil)), arg244: SUCC (ZERO)
Model : any1: 8, any2: 6, arg238: (Nil), arg239: (Nil), arg240: (0::(Nil)), arg241: (Nil), arg242: (Nil), arg243: (Nil), arg244: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((Nil) @ (3::(Nil))) @ (2::(Nil))) @ (4::(6::(5::(5::(Nil)))))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (1::(Nil)))) = (3::(2::rotate (SUCC (ZERO)) (((((((Nil) @ (4::(6::(5::(5::(Nil)))))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (1::(Nil))))))
rotate (SUCC (ZERO)) (((((((((Nil) @ (1::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (1::(Nil)))) = (1::(0::rotate (SUCC (ZERO)) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (1::(Nil))))))
rotate (ZERO) (((((((((Nil) @ (8::(Nil))) @ (6::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(6::rotate (ZERO) (((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.005844 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 8, any2: 0, any3: 2, any4: 1, any5: 4, any6: 0, any7: 8, any_list2: (Nil)
Model : any1: 4, any2: 8, any3: 8, any4: 6, any5: 1, any6: 0, any7: 0, any_list2: (Nil)
Model : any1: 0, any2: 1, any3: 4, any4: 4, any5: 4, any6: 8, any7: 8, any_list2: (4::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (8::(Nil)))) = (8::(0::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (8::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (4::(8::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((4::(Nil)))) ((((((((((4::(Nil)) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (8::(Nil)))) = (0::(1::rotate (len ((4::(Nil)))) ((((((((4::(Nil)) @ (Nil)) @ (4::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (8::(Nil))))))
Simplifying took 0.008140 seconds
Result : true
advanced_generalize done
=================================================
Progress: 222


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 223


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any4
intro any6
Lemma : forall (any1:any) (any2:any) (arg245:any list) (arg246:any list) (arg247:any list) (arg248:any list) (arg249:any list) (arg250:any list) (arg251:nat), rotate (arg251) ((((((((arg245 @ (any1::(Nil))) @ (any2::(Nil))) @ arg246) @ arg247) @ arg248) @ arg249) @ arg250)) = (any1::(any2::rotate (arg251) ((((((arg245 @ arg246) @ arg247) @ arg248) @ arg249) @ arg250))))
Model : any1: 6, any2: 1, arg245: (Nil), arg246: (Nil), arg247: (Nil), arg248: (Nil), arg249: (Nil), arg250: (Nil), arg251: ZERO
Model : any1: 2, any2: 3, arg245: (Nil), arg246: (6::(Nil)), arg247: (Nil), arg248: (Nil), arg249: (Nil), arg250: (Nil), arg251: ZERO
Model : any1: 5, any2: 8, arg245: (Nil), arg246: (Nil), arg247: (1::(Nil)), arg248: (Nil), arg249: (Nil), arg250: (Nil), arg251: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (6::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(1::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (2::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(3::rotate (ZERO) (((((((Nil) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (5::(Nil))) @ (8::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(8::rotate (ZERO) (((((((Nil) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002106 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
=================================================
Progress: 224


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg245:any list) (arg246:any list) (arg247:any list) (arg248:any list) (arg249:any list) (arg250:any list) (arg251:nat), rotate (arg251) ((((((((arg245 @ (any1::(Nil))) @ (any2::(Nil))) @ arg246) @ arg247) @ arg248) @ arg249) @ arg250)) = (any1::(any2::rotate (arg251) ((((((arg245 @ arg246) @ arg247) @ arg248) @ arg249) @ arg250))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:18)
=================================================
Progress: 225


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg252:any list) (arg253:any list) (arg254:any list) (arg255:any list) (arg256:any list) (arg257:any list) (arg258:nat), rotate (arg258) ((((((((arg252 @ (any1::(Nil))) @ (any2::(Nil))) @ arg253) @ arg254) @ arg255) @ arg256) @ arg257)) = (any1::(any2::rotate (arg258) ((((((arg252 @ arg253) @ arg254) @ arg255) @ arg256) @ arg257))))
Model : any1: 4, any2: 6, arg252: (Nil), arg253: (Nil), arg254: (Nil), arg255: (Nil), arg256: (Nil), arg257: (Nil), arg258: SUCC (SUCC (ZERO))
Model : any1: 4, any2: 0, arg252: (3::(Nil)), arg253: (7::(Nil)), arg254: (Nil), arg255: (Nil), arg256: (Nil), arg257: (Nil), arg258: ZERO
Model : any1: 4, any2: 5, arg252: (7::(Nil)), arg253: (Nil), arg254: (Nil), arg255: (Nil), arg256: (7::(Nil)), arg257: (Nil), arg258: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (SUCC (ZERO))) (((((((((Nil) @ (4::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(6::rotate (SUCC (SUCC (ZERO))) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((3::(Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(0::rotate (ZERO) (((((((3::(Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((7::(Nil)) @ (4::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil))) = (4::(5::rotate (ZERO) (((((((7::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)))))
Simplifying took 0.003470 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 2, any2: 7, any3: 2, any4: 2, any5: 2, any6: 8, any7: 1, any_list2: (0::(0::(Nil)))
Model : any1: 8, any2: 8, any3: 6, any4: 8, any5: 8, any6: 0, any7: 1, any_list2: (Nil)
Model : any1: 6, any2: 0, any3: 0, any4: 3, any5: 3, any6: 2, any7: 6, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((0::(0::(Nil))))) ((((((((((0::(0::(Nil))) @ (Nil)) @ (2::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (1::(Nil)))) = (2::(7::rotate (len ((0::(0::(Nil))))) ((((((((0::(0::(Nil))) @ (Nil)) @ (2::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (1::(Nil)))) = (8::(8::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (6::(Nil)))) = (6::(0::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (6::(Nil))))))
Simplifying took 0.009727 seconds
Result : true
advanced_generalize done
=================================================
Progress: 226


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 227


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any4
intro any6
Lemma : forall (any1:any) (any2:any) (arg259:any list) (arg260:any list) (arg261:any list) (arg262:any list) (arg263:any list) (arg264:any list) (arg265:nat), rotate (arg265) ((((((((arg259 @ (any1::(Nil))) @ (any2::(Nil))) @ arg260) @ arg261) @ arg262) @ arg263) @ arg264)) = (any1::(any2::rotate (arg265) ((((((arg259 @ arg260) @ arg261) @ arg262) @ arg263) @ arg264))))
Model : any1: 0, any2: 8, arg259: (Nil), arg260: (5::(Nil)), arg261: (Nil), arg262: (Nil), arg263: (Nil), arg264: (Nil), arg265: ZERO
Model : any1: 6, any2: 3, arg259: (Nil), arg260: (Nil), arg261: (Nil), arg262: (2::(Nil)), arg263: (Nil), arg264: (Nil), arg265: ZERO
Model : any1: 2, any2: 6, arg259: (5::(Nil)), arg260: (Nil), arg261: (Nil), arg262: (Nil), arg263: (Nil), arg264: (Nil), arg265: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(8::rotate (ZERO) (((((((Nil) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (6::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil))) = (6::(3::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((5::(Nil)) @ (2::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(6::rotate (ZERO) (((((((5::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002824 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 7, any2: 2, any3: 3, any4: 1, any5: 2, any6: 1, any7: 5, any_list2: (Nil)
Model : any1: 2, any2: 8, any3: 8, any4: 4, any5: 7, any6: 8, any7: 4, any_list2: (Nil)
Model : any1: 8, any2: 0, any3: 5, any4: 8, any5: 6, any6: 8, any7: 2, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (5::(Nil)))) = (7::(2::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (4::(Nil)))) = (2::(8::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (2::(Nil)))) = (8::(0::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (2::(Nil))))))
Simplifying took 0.007276 seconds
Result : true
advanced_generalize done
=================================================
Progress: 228


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg266:any list) (arg267:any list) (arg268:any list) (arg269:any list) (arg270:any list) (arg271:any list) (arg272:nat), rotate (arg272) ((((((((arg266 @ (any1::(Nil))) @ (any2::(Nil))) @ arg267) @ arg268) @ arg269) @ arg270) @ arg271)) = (any1::(any2::rotate (arg272) ((((((arg266 @ arg267) @ arg268) @ arg269) @ arg270) @ arg271))))
Model : any1: 5, any2: 1, arg266: (Nil), arg267: (Nil), arg268: (Nil), arg269: (Nil), arg270: (Nil), arg271: (0::(Nil)), arg272: ZERO
Model : any1: 1, any2: 0, arg266: (Nil), arg267: (3::(Nil)), arg268: (6::(Nil)), arg269: (Nil), arg270: (Nil), arg271: (Nil), arg272: SUCC (ZERO)
Model : any1: 2, any2: 0, arg266: (Nil), arg267: (0::(Nil)), arg268: (Nil), arg269: (Nil), arg270: (Nil), arg271: (Nil), arg272: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (5::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (5::(1::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))))))
rotate (SUCC (ZERO)) (((((((((Nil) @ (1::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(0::rotate (SUCC (ZERO)) (((((((Nil) @ (3::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(0::rotate (ZERO) (((((((Nil) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002158 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 1, any2: 3, any3: 2, any4: 2, any5: 2, any6: 0, any7: 0, any_list2: (Nil)
Model : any1: 4, any2: 8, any3: 0, any4: 7, any5: 4, any6: 6, any7: 3, any_list2: (Nil)
Model : any1: 6, any2: 0, any3: 3, any4: 0, any5: 6, any6: 0, any7: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (1::(3::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (3::(Nil)))) = (4::(8::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (7::(Nil)))) = (6::(0::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (7::(Nil))))))
Simplifying took 0.005391 seconds
Result : true
advanced_generalize done
=================================================
Progress: 229


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg273:any list) (arg274:any list) (arg275:any list) (arg276:any list) (arg277:any list) (arg278:any list) (arg279:nat), rotate (arg279) ((((((((arg273 @ (any1::(Nil))) @ (any2::(Nil))) @ arg274) @ arg275) @ arg276) @ arg277) @ arg278)) = (any1::(any2::rotate (arg279) ((((((arg273 @ arg274) @ arg275) @ arg276) @ arg277) @ arg278))))
Model : any1: 7, any2: 8, arg273: (6::(Nil)), arg274: (Nil), arg275: (3::(Nil)), arg276: (Nil), arg277: (Nil), arg278: (3::(Nil)), arg279: ZERO
Model : any1: 1, any2: 6, arg273: (Nil), arg274: (Nil), arg275: (5::(Nil)), arg276: (3::(3::(Nil))), arg277: (Nil), arg278: (Nil), arg279: ZERO
Model : any1: 5, any2: 1, arg273: (Nil), arg274: (Nil), arg275: (Nil), arg276: (0::(Nil)), arg277: (Nil), arg278: (Nil), arg279: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((6::(Nil)) @ (7::(Nil))) @ (8::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (3::(Nil)))) = (7::(8::rotate (ZERO) (((((((6::(Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (3::(Nil))))))
rotate (ZERO) (((((((((Nil) @ (1::(Nil))) @ (6::(Nil))) @ (Nil)) @ (5::(Nil))) @ (3::(3::(Nil)))) @ (Nil)) @ (Nil))) = (1::(6::rotate (ZERO) (((((((Nil) @ (Nil)) @ (5::(Nil))) @ (3::(3::(Nil)))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (5::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (5::(1::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.003539 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 1, any2: 0, any3: 0, any4: 6, any5: 8, any6: 4, any7: 8, any_list2: (8::(Nil))
Model : any1: 7, any2: 0, any3: 7, any4: 0, any5: 6, any6: 4, any7: 1, any_list2: (8::(Nil))
Model : any1: 3, any2: 6, any3: 8, any4: 8, any5: 4, any6: 0, any7: 4, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((8::(Nil)))) ((((((((((8::(Nil)) @ (Nil)) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (8::(Nil)))) = (1::(0::rotate (len ((8::(Nil)))) ((((((((8::(Nil)) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (8::(Nil))))))
rotate (len ((8::(Nil)))) ((((((((((8::(Nil)) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (1::(Nil)))) = (7::(0::rotate (len ((8::(Nil)))) ((((((((8::(Nil)) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (4::(Nil)))) = (3::(6::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (4::(Nil))))))
Simplifying took 0.010611 seconds
Result : true
advanced_generalize done
=================================================
Progress: 230


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any4(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 2
intro any5(rank:15)
intro any6(rank:15)
=================================================
Progress: 231


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 232


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any6 : any
---------------------------------------
forall (any4:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any6
Lemma : forall (any1:any) (any2:any) (arg280:any list) (arg281:any list) (arg282:any list) (arg283:any list) (arg284:any list) (arg285:any list) (arg286:nat), rotate (arg286) ((((((((arg280 @ (any1::(Nil))) @ (any2::(Nil))) @ arg281) @ arg282) @ arg283) @ arg284) @ arg285)) = (any1::(any2::rotate (arg286) ((((((arg280 @ arg281) @ arg282) @ arg283) @ arg284) @ arg285))))
Model : any1: 0, any2: 3, arg280: (Nil), arg281: (Nil), arg282: (Nil), arg283: (1::(Nil)), arg284: (8::(Nil)), arg285: (Nil), arg286: SUCC (ZERO)
Model : any1: 1, any2: 3, arg280: (Nil), arg281: (Nil), arg282: (Nil), arg283: (Nil), arg284: (Nil), arg285: (4::(Nil)), arg286: ZERO
Model : any1: 4, any2: 4, arg280: (Nil), arg281: (Nil), arg282: (Nil), arg283: (0::(Nil)), arg284: (Nil), arg285: (Nil), arg286: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((Nil) @ (0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (8::(Nil))) @ (Nil))) = (0::(3::rotate (SUCC (ZERO)) (((((((Nil) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (8::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (1::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (1::(3::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))))))
rotate (ZERO) (((((((((Nil) @ (4::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (4::(4::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.002020 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 4, any2: 1, any3: 2, any4: 3, any5: 1, any6: 2, any7: 4, any_list2: (8::(Nil))
Model : any1: 0, any2: 6, any3: 4, any4: 7, any5: 3, any6: 6, any7: 3, any_list2: (Nil)
Model : any1: 7, any2: 0, any3: 7, any4: 2, any5: 2, any6: 6, any7: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((8::(Nil)))) ((((((((((8::(Nil)) @ (Nil)) @ (4::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (4::(Nil)))) = (4::(1::rotate (len ((8::(Nil)))) ((((((((8::(Nil)) @ (Nil)) @ (2::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (3::(Nil)))) = (0::(6::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (7::(Nil)))) = (7::(0::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (7::(Nil))))))
Simplifying took 0.008003 seconds
Result : true
advanced_generalize done
=================================================
Progress: 233


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any3:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 234


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any4 : any
any6 : any
---------------------------------------
forall (any3:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any4
intro any6
Lemma : forall (any1:any) (any2:any) (arg287:any list) (arg288:any list) (arg289:any list) (arg290:any list) (arg291:any list) (arg292:any list) (arg293:nat), rotate (arg293) ((((((((arg287 @ (any1::(Nil))) @ (any2::(Nil))) @ arg288) @ arg289) @ arg290) @ arg291) @ arg292)) = (any1::(any2::rotate (arg293) ((((((arg287 @ arg288) @ arg289) @ arg290) @ arg291) @ arg292))))
Model : any1: 8, any2: 0, arg287: (Nil), arg288: (Nil), arg289: (4::(Nil)), arg290: (Nil), arg291: (Nil), arg292: (Nil), arg293: ZERO
Model : any1: 3, any2: 1, arg287: (Nil), arg288: (Nil), arg289: (Nil), arg290: (Nil), arg291: (Nil), arg292: (Nil), arg293: ZERO
Model : any1: 6, any2: 3, arg287: (1::(Nil)), arg288: (Nil), arg289: (Nil), arg290: (Nil), arg291: (Nil), arg292: (Nil), arg293: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(0::rotate (ZERO) (((((((Nil) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (3::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(1::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((1::(Nil)) @ (6::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(3::rotate (ZERO) (((((((1::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001831 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 1, any2: 8, any3: 4, any4: 4, any5: 0, any6: 1, any7: 4, any_list2: (Nil)
Model : any1: 0, any2: 2, any3: 0, any4: 3, any5: 6, any6: 7, any7: 1, any_list2: (Nil)
Model : any1: 6, any2: 8, any3: 8, any4: 6, any5: 0, any6: 2, any7: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (4::(Nil)))) = (1::(8::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (1::(Nil)))) = (0::(2::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (5::(Nil)))) = (6::(8::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (5::(Nil))))))
Simplifying took 0.005805 seconds
Result : true
advanced_generalize done
=================================================
Progress: 235


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any5 : any
---------------------------------------
forall (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any5 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg294:any list) (arg295:any list) (arg296:any list) (arg297:any list) (arg298:any list) (arg299:any list) (arg300:nat), rotate (arg300) ((((((((arg294 @ (any1::(Nil))) @ (any2::(Nil))) @ arg295) @ arg296) @ arg297) @ arg298) @ arg299)) = (any1::(any2::rotate (arg300) ((((((arg294 @ arg295) @ arg296) @ arg297) @ arg298) @ arg299))))
Model : any1: 7, any2: 5, arg294: (Nil), arg295: (Nil), arg296: (Nil), arg297: (Nil), arg298: (Nil), arg299: (Nil), arg300: ZERO
Model : any1: 0, any2: 1, arg294: (Nil), arg295: (8::(Nil)), arg296: (Nil), arg297: (0::(Nil)), arg298: (Nil), arg299: (Nil), arg300: ZERO
Model : any1: 6, any2: 0, arg294: (Nil), arg295: (Nil), arg296: (Nil), arg297: (Nil), arg298: (Nil), arg299: (4::(0::(Nil))), arg300: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (7::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(5::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (0::(1::rotate (ZERO) (((((((Nil) @ (8::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (6::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(0::(Nil))))) = (6::(0::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(0::(Nil)))))))
Simplifying took 0.001933 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any5 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
=================================================
Progress: 236


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any5 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg294:any list) (arg295:any list) (arg296:any list) (arg297:any list) (arg298:any list) (arg299:any list) (arg300:nat), rotate (arg300) ((((((((arg294 @ (any1::(Nil))) @ (any2::(Nil))) @ arg295) @ arg296) @ arg297) @ arg298) @ arg299)) = (any1::(any2::rotate (arg300) ((((((arg294 @ arg295) @ arg296) @ arg297) @ arg298) @ arg299))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:18)
=================================================
Progress: 237


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 238


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any2:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any4
intro any6
Lemma : forall (any1:any) (any2:any) (arg301:any list) (arg302:any list) (arg303:any list) (arg304:any list) (arg305:any list) (arg306:any list) (arg307:nat), rotate (arg307) ((((((((arg301 @ (any1::(Nil))) @ (any2::(Nil))) @ arg302) @ arg303) @ arg304) @ arg305) @ arg306)) = (any1::(any2::rotate (arg307) ((((((arg301 @ arg302) @ arg303) @ arg304) @ arg305) @ arg306))))
Model : any1: 4, any2: 5, arg301: (Nil), arg302: (Nil), arg303: (Nil), arg304: (Nil), arg305: (Nil), arg306: (Nil), arg307: SUCC (ZERO)
Model : any1: 0, any2: 0, arg301: (Nil), arg302: (Nil), arg303: (Nil), arg304: (Nil), arg305: (8::(Nil)), arg306: (Nil), arg307: SUCC (ZERO)
Model : any1: 4, any2: 0, arg301: (Nil), arg302: (4::(Nil)), arg303: (Nil), arg304: (Nil), arg305: (Nil), arg306: (Nil), arg307: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((Nil) @ (4::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(5::rotate (SUCC (ZERO)) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) (((((((((Nil) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) = (0::(0::rotate (SUCC (ZERO)) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (4::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(0::rotate (ZERO) (((((((Nil) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001998 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 0, any2: 3, any3: 1, any4: 2, any5: 4, any6: 4, any7: 8, any_list2: (Nil)
Model : any1: 0, any2: 1, any3: 5, any4: 7, any5: 5, any6: 5, any7: 7, any_list2: (Nil)
Model : any1: 4, any2: 0, any3: 3, any4: 0, any5: 2, any6: 0, any7: 8, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (8::(Nil)))) = (0::(3::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (8::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (7::(Nil)))) = (0::(1::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (8::(Nil)))) = (4::(0::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (8::(Nil))))))
Simplifying took 0.005481 seconds
Result : true
advanced_generalize done
=================================================
Progress: 239


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any5 : any
---------------------------------------
forall (any2:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg308:any list) (arg309:any list) (arg310:any list) (arg311:any list) (arg312:any list) (arg313:any list) (arg314:nat), rotate (arg314) ((((((((arg308 @ (any1::(Nil))) @ (any2::(Nil))) @ arg309) @ arg310) @ arg311) @ arg312) @ arg313)) = (any1::(any2::rotate (arg314) ((((((arg308 @ arg309) @ arg310) @ arg311) @ arg312) @ arg313))))
Model : any1: 1, any2: 0, arg308: (Nil), arg309: (8::(Nil)), arg310: (Nil), arg311: (Nil), arg312: (Nil), arg313: (Nil), arg314: ZERO
Model : any1: 2, any2: 4, arg308: (Nil), arg309: (7::(5::(Nil))), arg310: (Nil), arg311: (Nil), arg312: (Nil), arg313: (Nil), arg314: ZERO
Model : any1: 5, any2: 1, arg308: (Nil), arg309: (Nil), arg310: (Nil), arg311: (Nil), arg312: (Nil), arg313: (Nil), arg314: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (1::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(0::rotate (ZERO) (((((((Nil) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (2::(Nil))) @ (4::(Nil))) @ (7::(5::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(4::rotate (ZERO) (((((((Nil) @ (7::(5::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (5::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(1::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002658 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
=================================================
Progress: 240


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg308:any list) (arg309:any list) (arg310:any list) (arg311:any list) (arg312:any list) (arg313:any list) (arg314:nat), rotate (arg314) ((((((((arg308 @ (any1::(Nil))) @ (any2::(Nil))) @ arg309) @ arg310) @ arg311) @ arg312) @ arg313)) = (any1::(any2::rotate (arg314) ((((((arg308 @ arg309) @ arg310) @ arg311) @ arg312) @ arg313))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:18)
=================================================
Progress: 241


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any4
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg315:any list) (arg316:any list) (arg317:any list) (arg318:any list) (arg319:any list) (arg320:any list) (arg321:nat), rotate (arg321) ((((((((arg315 @ (any1::(Nil))) @ (any2::(Nil))) @ arg316) @ arg317) @ arg318) @ arg319) @ arg320)) = (any1::(any2::rotate (arg321) ((((((arg315 @ arg316) @ arg317) @ arg318) @ arg319) @ arg320))))
Model : any1: 5, any2: 3, arg315: (7::(Nil)), arg316: (Nil), arg317: (Nil), arg318: (0::(Nil)), arg319: (Nil), arg320: (Nil), arg321: ZERO
Model : any1: 6, any2: 4, arg315: (6::(Nil)), arg316: (Nil), arg317: (Nil), arg318: (Nil), arg319: (Nil), arg320: (Nil), arg321: ZERO
Model : any1: 0, any2: 5, arg315: (Nil), arg316: (Nil), arg317: (Nil), arg318: (Nil), arg319: (Nil), arg320: (Nil), arg321: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((7::(Nil)) @ (5::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (5::(3::rotate (ZERO) (((((((7::(Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((6::(Nil)) @ (6::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(4::rotate (ZERO) (((((((6::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(5::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002542 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 6, any2: 1, any3: 7, any4: 0, any5: 4, any6: 7, any7: 5, any_list2: (Nil)
Model : any1: 8, any2: 4, any3: 0, any4: 6, any5: 8, any6: 2, any7: 0, any_list2: (Nil)
Model : any1: 0, any2: 7, any3: 6, any4: 4, any5: 0, any6: 2, any7: 3, any_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (5::(Nil)))) = (6::(1::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (2::(Nil))) @ (0::(Nil)))) = (8::(4::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (2::(Nil))) @ (0::(Nil))))))
rotate (len ((0::(Nil)))) ((((((((((0::(Nil)) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (3::(Nil)))) = (0::(7::rotate (len ((0::(Nil)))) ((((((((0::(Nil)) @ (Nil)) @ (6::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (3::(Nil))))))
Simplifying took 0.007599 seconds
Result : true
advanced_generalize done
=================================================
Progress: 242


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 243


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any4
intro any6
Lemma : forall (any1:any) (any2:any) (arg322:any list) (arg323:any list) (arg324:any list) (arg325:any list) (arg326:any list) (arg327:any list) (arg328:nat), rotate (arg328) ((((((((arg322 @ (any1::(Nil))) @ (any2::(Nil))) @ arg323) @ arg324) @ arg325) @ arg326) @ arg327)) = (any1::(any2::rotate (arg328) ((((((arg322 @ arg323) @ arg324) @ arg325) @ arg326) @ arg327))))
Model : any1: 1, any2: 0, arg322: (Nil), arg323: (3::(Nil)), arg324: (Nil), arg325: (Nil), arg326: (Nil), arg327: (Nil), arg328: SUCC (ZERO)
Model : any1: 7, any2: 4, arg322: (Nil), arg323: (0::(Nil)), arg324: (Nil), arg325: (2::(3::(3::(Nil)))), arg326: (Nil), arg327: (Nil), arg328: ZERO
Model : any1: 2, any2: 0, arg322: (6::(Nil)), arg323: (Nil), arg324: (Nil), arg325: (Nil), arg326: (Nil), arg327: (4::(Nil)), arg328: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((Nil) @ (1::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(0::rotate (SUCC (ZERO)) (((((((Nil) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (7::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (Nil)) @ (2::(3::(3::(Nil))))) @ (Nil)) @ (Nil))) = (7::(4::rotate (ZERO) (((((((Nil) @ (0::(Nil))) @ (Nil)) @ (2::(3::(3::(Nil))))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((6::(Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (2::(0::rotate (ZERO) (((((((6::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))))))
Simplifying took 0.003203 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 0, any2: 4, any3: 6, any4: 5, any5: 0, any6: 1, any7: 5, any_list2: (4::(Nil))
Model : any1: 8, any2: 6, any3: 2, any4: 0, any5: 0, any6: 7, any7: 1, any_list2: (Nil)
Model : any1: 1, any2: 1, any3: 2, any4: 7, any5: 7, any6: 8, any7: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((4::(Nil)))) ((((((((((4::(Nil)) @ (Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (5::(Nil)))) = (0::(4::rotate (len ((4::(Nil)))) ((((((((4::(Nil)) @ (Nil)) @ (6::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (1::(Nil)))) = (8::(6::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (7::(Nil)))) = (1::(1::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (7::(Nil))))))
Simplifying took 0.007676 seconds
Result : true
advanced_generalize done
=================================================
Progress: 244


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg329:any list) (arg330:any list) (arg331:any list) (arg332:any list) (arg333:any list) (arg334:any list) (arg335:nat), rotate (arg335) ((((((((arg329 @ (any1::(Nil))) @ (any2::(Nil))) @ arg330) @ arg331) @ arg332) @ arg333) @ arg334)) = (any1::(any2::rotate (arg335) ((((((arg329 @ arg330) @ arg331) @ arg332) @ arg333) @ arg334))))
Model : any1: 8, any2: 4, arg329: (Nil), arg330: (Nil), arg331: (7::(Nil)), arg332: (Nil), arg333: (Nil), arg334: (Nil), arg335: ZERO
Model : any1: 4, any2: 3, arg329: (Nil), arg330: (Nil), arg331: (Nil), arg332: (Nil), arg333: (1::(Nil)), arg334: (Nil), arg335: ZERO
Model : any1: 0, any2: 7, arg329: (Nil), arg330: (Nil), arg331: (0::(Nil)), arg332: (Nil), arg333: (Nil), arg334: (Nil), arg335: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (8::(Nil))) @ (4::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(4::rotate (ZERO) (((((((Nil) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (4::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil))) = (4::(3::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (7::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(7::rotate (ZERO) (((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002061 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
=================================================
Progress: 245


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg329:any list) (arg330:any list) (arg331:any list) (arg332:any list) (arg333:any list) (arg334:any list) (arg335:nat), rotate (arg335) ((((((((arg329 @ (any1::(Nil))) @ (any2::(Nil))) @ arg330) @ arg331) @ arg332) @ arg333) @ arg334)) = (any1::(any2::rotate (arg335) ((((((arg329 @ arg330) @ arg331) @ arg332) @ arg333) @ arg334))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:18)
=================================================
Progress: 246


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any4
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg336:any list) (arg337:any list) (arg338:any list) (arg339:any list) (arg340:any list) (arg341:any list) (arg342:nat), rotate (arg342) ((((((((arg336 @ (any1::(Nil))) @ (any2::(Nil))) @ arg337) @ arg338) @ arg339) @ arg340) @ arg341)) = (any1::(any2::rotate (arg342) ((((((arg336 @ arg337) @ arg338) @ arg339) @ arg340) @ arg341))))
Model : any1: 0, any2: 0, arg336: (Nil), arg337: (Nil), arg338: (5::(Nil)), arg339: (1::(Nil)), arg340: (Nil), arg341: (Nil), arg342: SUCC (ZERO)
Model : any1: 7, any2: 7, arg336: (Nil), arg337: (Nil), arg338: (Nil), arg339: (Nil), arg340: (Nil), arg341: (Nil), arg342: ZERO
Model : any1: 2, any2: 4, arg336: (6::(Nil)), arg337: (6::(Nil)), arg338: (0::(Nil)), arg339: (Nil), arg340: (Nil), arg341: (Nil), arg342: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((Nil) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (5::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil))) = (0::(0::rotate (SUCC (ZERO)) (((((((Nil) @ (Nil)) @ (5::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (7::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(7::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) (((((((((6::(Nil)) @ (2::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(4::rotate (SUCC (ZERO)) (((((((6::(Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003900 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 2, any2: 5, any3: 0, any4: 8, any5: 3, any6: 2, any7: 6, any_list2: (Nil)
Model : any1: 2, any2: 0, any3: 0, any4: 5, any5: 3, any6: 6, any7: 5, any_list2: (0::(Nil))
Model : any1: 1, any2: 5, any3: 1, any4: 6, any5: 0, any6: 8, any7: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (6::(Nil)))) = (2::(5::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (6::(Nil))))))
rotate (len ((0::(Nil)))) ((((((((((0::(Nil)) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (5::(Nil)))) = (2::(0::rotate (len ((0::(Nil)))) ((((((((0::(Nil)) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (5::(Nil)))) = (1::(5::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (5::(Nil))))))
Simplifying took 0.007546 seconds
Result : true
advanced_generalize done
=================================================
Progress: 247


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any4
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg343:any list) (arg344:any list) (arg345:any list) (arg346:any list) (arg347:any list) (arg348:any list) (arg349:nat), rotate (arg349) ((((((((arg343 @ (any1::(Nil))) @ (any2::(Nil))) @ arg344) @ arg345) @ arg346) @ arg347) @ arg348)) = (any1::(any2::rotate (arg349) ((((((arg343 @ arg344) @ arg345) @ arg346) @ arg347) @ arg348))))
Model : any1: 0, any2: 6, arg343: (Nil), arg344: (2::(Nil)), arg345: (Nil), arg346: (Nil), arg347: (Nil), arg348: (Nil), arg349: ZERO
Model : any1: 0, any2: 0, arg343: (Nil), arg344: (8::(Nil)), arg345: (Nil), arg346: (Nil), arg347: (Nil), arg348: (Nil), arg349: SUCC (SUCC (ZERO))
Model : any1: 2, any2: 8, arg343: (Nil), arg344: (2::(5::(Nil))), arg345: (7::(Nil)), arg346: (5::(1::(Nil))), arg347: (Nil), arg348: (0::(Nil)), arg349: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(6::rotate (ZERO) (((((((Nil) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (SUCC (ZERO))) (((((((((Nil) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(0::rotate (SUCC (SUCC (ZERO))) (((((((Nil) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (2::(Nil))) @ (8::(Nil))) @ (2::(5::(Nil)))) @ (7::(Nil))) @ (5::(1::(Nil)))) @ (Nil)) @ (0::(Nil)))) = (2::(8::rotate (ZERO) (((((((Nil) @ (2::(5::(Nil)))) @ (7::(Nil))) @ (5::(1::(Nil)))) @ (Nil)) @ (0::(Nil))))))
Simplifying took 0.004727 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 3, any2: 4, any3: 3, any4: 1, any5: 5, any6: 2, any7: 8, any_list2: (Nil)
Model : any1: 6, any2: 6, any3: 6, any4: 1, any5: 0, any6: 5, any7: 4, any_list2: (Nil)
Model : any1: 4, any2: 7, any3: 5, any4: 4, any5: 7, any6: 4, any7: 3, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (8::(Nil)))) = (3::(4::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (8::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (4::(Nil)))) = (6::(6::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (3::(Nil)))) = (4::(7::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (3::(Nil))))))
Simplifying took 0.006141 seconds
Result : true
advanced_generalize done
=================================================
Progress: 248


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any5(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro any6(rank:15)
=================================================
Progress: 249


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any5:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any5:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any4
intro any6
Lemma : forall (any1:any) (any2:any) (arg350:any list) (arg351:any list) (arg352:any list) (arg353:any list) (arg354:any list) (arg355:any list) (arg356:nat), rotate (arg356) ((((((((arg350 @ (any1::(Nil))) @ (any2::(Nil))) @ arg351) @ arg352) @ arg353) @ arg354) @ arg355)) = (any1::(any2::rotate (arg356) ((((((arg350 @ arg351) @ arg352) @ arg353) @ arg354) @ arg355))))
Model : any1: 4, any2: 2, arg350: (Nil), arg351: (4::(Nil)), arg352: (2::(Nil)), arg353: (Nil), arg354: (4::(Nil)), arg355: (8::(Nil)), arg356: ZERO
Model : any1: 6, any2: 3, arg350: (0::(6::(2::(Nil)))), arg351: (Nil), arg352: (Nil), arg353: (Nil), arg354: (Nil), arg355: (Nil), arg356: ZERO
Model : any1: 6, any2: 6, arg350: (Nil), arg351: (Nil), arg352: (Nil), arg353: (8::(Nil)), arg354: (Nil), arg355: (Nil), arg356: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (4::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (Nil)) @ (4::(Nil))) @ (8::(Nil)))) = (4::(2::rotate (ZERO) (((((((Nil) @ (4::(Nil))) @ (2::(Nil))) @ (Nil)) @ (4::(Nil))) @ (8::(Nil))))))
rotate (ZERO) (((((((((0::(6::(2::(Nil)))) @ (6::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(3::rotate (ZERO) (((((((0::(6::(2::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (6::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (6::(6::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.004827 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 1, any2: 1, any3: 2, any4: 2, any5: 0, any6: 0, any7: 7, any_list2: (Nil)
Model : any1: 5, any2: 0, any3: 1, any4: 6, any5: 0, any6: 8, any7: 0, any_list2: (Nil)
Model : any1: 3, any2: 5, any3: 0, any4: 7, any5: 4, any6: 3, any7: 4, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil)))) = (1::(1::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil)))) = (5::(0::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (4::(Nil)))) = (3::(5::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (4::(Nil))))))
Simplifying took 0.005002 seconds
Result : true
advanced_generalize done
=================================================
Progress: 250


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any4:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg357:any list) (arg358:any list) (arg359:any list) (arg360:any list) (arg361:any list) (arg362:any list) (arg363:nat), rotate (arg363) ((((((((arg357 @ (any1::(Nil))) @ (any2::(Nil))) @ arg358) @ arg359) @ arg360) @ arg361) @ arg362)) = (any1::(any2::rotate (arg363) ((((((arg357 @ arg358) @ arg359) @ arg360) @ arg361) @ arg362))))
Model : any1: 6, any2: 8, arg357: (Nil), arg358: (Nil), arg359: (Nil), arg360: (2::(Nil)), arg361: (Nil), arg362: (Nil), arg363: ZERO
Model : any1: 5, any2: 5, arg357: (Nil), arg358: (Nil), arg359: (Nil), arg360: (Nil), arg361: (Nil), arg362: (Nil), arg363: ZERO
Model : any1: 0, any2: 7, arg357: (Nil), arg358: (7::(Nil)), arg359: (Nil), arg360: (1::(Nil)), arg361: (2::(6::(3::(Nil)))), arg362: (Nil), arg363: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (6::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil))) = (6::(8::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (5::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(5::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (Nil)) @ (1::(Nil))) @ (2::(6::(3::(Nil))))) @ (Nil))) = (0::(7::rotate (ZERO) (((((((Nil) @ (7::(Nil))) @ (Nil)) @ (1::(Nil))) @ (2::(6::(3::(Nil))))) @ (Nil)))))
Simplifying took 0.003156 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
=================================================
Progress: 251


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any4:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg357:any list) (arg358:any list) (arg359:any list) (arg360:any list) (arg361:any list) (arg362:any list) (arg363:nat), rotate (arg363) ((((((((arg357 @ (any1::(Nil))) @ (any2::(Nil))) @ arg358) @ arg359) @ arg360) @ arg361) @ arg362)) = (any1::(any2::rotate (arg363) ((((((arg357 @ arg358) @ arg359) @ arg360) @ arg361) @ arg362))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:18)
=================================================
Progress: 252


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any3:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any3:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any4
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg364:any list) (arg365:any list) (arg366:any list) (arg367:any list) (arg368:any list) (arg369:any list) (arg370:nat), rotate (arg370) ((((((((arg364 @ (any1::(Nil))) @ (any2::(Nil))) @ arg365) @ arg366) @ arg367) @ arg368) @ arg369)) = (any1::(any2::rotate (arg370) ((((((arg364 @ arg365) @ arg366) @ arg367) @ arg368) @ arg369))))
Model : any1: 0, any2: 0, arg364: (5::(Nil)), arg365: (Nil), arg366: (Nil), arg367: (6::(5::(8::(Nil)))), arg368: (Nil), arg369: (Nil), arg370: SUCC (ZERO)
Model : any1: 0, any2: 4, arg364: (3::(0::(Nil))), arg365: (Nil), arg366: (Nil), arg367: (Nil), arg368: (Nil), arg369: (5::(Nil)), arg370: ZERO
Model : any1: 4, any2: 6, arg364: (Nil), arg365: (Nil), arg366: (4::(Nil)), arg367: (Nil), arg368: (Nil), arg369: (Nil), arg370: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((5::(Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (6::(5::(8::(Nil))))) @ (Nil)) @ (Nil))) = (0::(0::rotate (SUCC (ZERO)) (((((((5::(Nil)) @ (Nil)) @ (Nil)) @ (6::(5::(8::(Nil))))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((3::(0::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) = (0::(4::rotate (ZERO) (((((((3::(0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))))))
rotate (ZERO) (((((((((Nil) @ (4::(Nil))) @ (6::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(6::rotate (ZERO) (((((((Nil) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.005785 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 0, any2: 7, any3: 0, any4: 3, any5: 2, any6: 2, any7: 1, any_list2: (6::(Nil))
Model : any1: 0, any2: 2, any3: 8, any4: 0, any5: 7, any6: 8, any7: 3, any_list2: (Nil)
Model : any1: 0, any2: 1, any3: 2, any4: 7, any5: 2, any6: 7, any7: 8, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((6::(Nil)))) ((((((((((6::(Nil)) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (1::(Nil)))) = (0::(7::rotate (len ((6::(Nil)))) ((((((((6::(Nil)) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (3::(Nil)))) = (0::(2::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (8::(Nil)))) = (0::(1::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (8::(Nil))))))
Simplifying took 0.008601 seconds
Result : true
advanced_generalize done
=================================================
Progress: 253


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any4
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg371:any list) (arg372:any list) (arg373:any list) (arg374:any list) (arg375:any list) (arg376:any list) (arg377:nat), rotate (arg377) ((((((((arg371 @ (any1::(Nil))) @ (any2::(Nil))) @ arg372) @ arg373) @ arg374) @ arg375) @ arg376)) = (any1::(any2::rotate (arg377) ((((((arg371 @ arg372) @ arg373) @ arg374) @ arg375) @ arg376))))
Model : any1: 8, any2: 7, arg371: (Nil), arg372: (Nil), arg373: (Nil), arg374: (Nil), arg375: (0::(Nil)), arg376: (Nil), arg377: ZERO
Model : any1: 0, any2: 3, arg371: (5::(0::(Nil))), arg372: (4::(Nil)), arg373: (Nil), arg374: (Nil), arg375: (5::(Nil)), arg376: (Nil), arg377: ZERO
Model : any1: 2, any2: 1, arg371: (Nil), arg372: (Nil), arg373: (Nil), arg374: (Nil), arg375: (Nil), arg376: (Nil), arg377: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (8::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (8::(7::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((5::(0::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (0::(3::rotate (ZERO) (((((((5::(0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)))))
rotate (SUCC (ZERO)) (((((((((Nil) @ (2::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(1::rotate (SUCC (ZERO)) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003159 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 4, any2: 0, any3: 7, any4: 8, any5: 0, any6: 1, any7: 0, any_list2: (7::(Nil))
Model : any1: 5, any2: 2, any3: 7, any4: 4, any5: 2, any6: 8, any7: 0, any_list2: (Nil)
Model : any1: 0, any2: 5, any3: 0, any4: 7, any5: 6, any6: 0, any7: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((7::(Nil)))) ((((((((((7::(Nil)) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (0::(Nil)))) = (4::(0::rotate (len ((7::(Nil)))) ((((((((7::(Nil)) @ (Nil)) @ (7::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil)))) = (5::(2::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (7::(Nil)))) = (0::(5::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (7::(Nil))))))
Simplifying took 0.007958 seconds
Result : true
advanced_generalize done
=================================================
Progress: 254


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any4
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg378:any list) (arg379:any list) (arg380:any list) (arg381:any list) (arg382:any list) (arg383:any list) (arg384:nat), rotate (arg384) ((((((((arg378 @ (any1::(Nil))) @ (any2::(Nil))) @ arg379) @ arg380) @ arg381) @ arg382) @ arg383)) = (any1::(any2::rotate (arg384) ((((((arg378 @ arg379) @ arg380) @ arg381) @ arg382) @ arg383))))
Model : any1: 5, any2: 5, arg378: (Nil), arg379: (Nil), arg380: (Nil), arg381: (Nil), arg382: (Nil), arg383: (Nil), arg384: SUCC (ZERO)
Model : any1: 0, any2: 2, arg378: (Nil), arg379: (Nil), arg380: (Nil), arg381: (Nil), arg382: (Nil), arg383: (Nil), arg384: ZERO
Model : any1: 3, any2: 0, arg378: (Nil), arg379: (Nil), arg380: (Nil), arg381: (Nil), arg382: (Nil), arg383: (Nil), arg384: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((Nil) @ (5::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(5::rotate (SUCC (ZERO)) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(2::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(0::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001200 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
=================================================
Progress: 255


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg378:any list) (arg379:any list) (arg380:any list) (arg381:any list) (arg382:any list) (arg383:any list) (arg384:nat), rotate (arg384) ((((((((arg378 @ (any1::(Nil))) @ (any2::(Nil))) @ arg379) @ arg380) @ arg381) @ arg382) @ arg383)) = (any1::(any2::rotate (arg384) ((((((arg378 @ arg379) @ arg380) @ arg381) @ arg382) @ arg383))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:18)
=================================================
Progress: 256


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any6:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
>>> intro any6(rank : 15)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any_list1:any list), rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
any_list1 : any list
any7 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))))))
Inductive1 : any_list1 = (any7::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any4
intro any5
intro any6
Lemma : forall (any1:any) (any2:any) (arg385:any list) (arg386:any list) (arg387:any list) (arg388:any list) (arg389:any list) (arg390:any list) (arg391:nat), rotate (arg391) ((((((((arg385 @ (any1::(Nil))) @ (any2::(Nil))) @ arg386) @ arg387) @ arg388) @ arg389) @ arg390)) = (any1::(any2::rotate (arg391) ((((((arg385 @ arg386) @ arg387) @ arg388) @ arg389) @ arg390))))
Model : any1: 3, any2: 8, arg385: (Nil), arg386: (Nil), arg387: (Nil), arg388: (Nil), arg389: (Nil), arg390: (Nil), arg391: ZERO
Model : any1: 7, any2: 0, arg385: (Nil), arg386: (Nil), arg387: (Nil), arg388: (Nil), arg389: (Nil), arg390: (0::(0::(Nil))), arg391: ZERO
Model : any1: 7, any2: 5, arg385: (0::(Nil)), arg386: (Nil), arg387: (Nil), arg388: (Nil), arg389: (Nil), arg390: (Nil), arg391: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((Nil) @ (3::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(8::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((Nil) @ (7::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(0::(Nil))))) = (7::(0::rotate (ZERO) (((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(0::(Nil)))))))
rotate (ZERO) (((((((((0::(Nil)) @ (7::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(5::rotate (ZERO) (((((((0::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002243 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list2:any list), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Model : any1: 0, any2: 7, any3: 0, any4: 0, any5: 0, any6: 4, any7: 5, any_list2: (Nil)
Model : any1: 2, any2: 0, any3: 0, any4: 0, any5: 7, any6: 6, any7: 2, any_list2: (Nil)
Model : any1: 4, any2: 6, any3: 3, any4: 7, any5: 4, any6: 8, any7: 8, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (5::(Nil)))) = (0::(7::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (2::(Nil)))) = (2::(0::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (8::(Nil)))) = (4::(6::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (8::(Nil))))))
Simplifying took 0.006456 seconds
Result : true
advanced_generalize done
=================================================
Progress: 257


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

0 goal(s) more...

6 conjecture(s) more...
>>> induction any_list1(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16)
=================================================
Progress: 258


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))

0 goal(s) more...

6 conjecture(s) more...
>>> induction any_list2(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) ((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list1))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16)
=================================================
Progress: 259


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

0 goal(s) more...

6 conjecture(s) more...
>>> induction any_list1(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16)
=================================================
Progress: 260


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

0 goal(s) more...

6 conjecture(s) more...
>>> induction any_list1(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16)
=================================================
Progress: 261


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

0 goal(s) more...

6 conjecture(s) more...
>>> induction any_list1(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16)
=================================================
Progress: 262


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list3 @ any_list4)))) = (any1::(any2::rotate (nat1) ((any_list3 @ any_list4))))

2 goal(s) more...

5 conjecture(s) more...
>>> induction any_list3(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list4)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list4))))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16)
=================================================
Progress: 263


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list3 @ any_list4)))) = (any1::(any2::rotate (nat1) ((any_list3 @ any_list4))))

2 goal(s) more...

5 conjecture(s) more...
>>> induction any_list3(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list4)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list4))))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16)
=================================================
Progress: 264


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list3 @ any_list4)))) = (any1::(any2::rotate (nat1) ((any_list3 @ any_list4))))

2 goal(s) more...

5 conjecture(s) more...
>>> induction any_list3(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list4)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list4))))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16)
=================================================
Progress: 265


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list2 @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((any_list2 @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:17)
=================================================
Progress: 266


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list2 @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((any_list2 @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:17)
=================================================
Progress: 267


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) ((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list1))))

1 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list1)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list1))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:17)
=================================================
Progress: 268


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list2 @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((any_list2 @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:17)
=================================================
Progress: 269


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list2 @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((any_list2 @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:17)
=================================================
Progress: 270


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list2 @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((any_list2 @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:17)
=================================================
Progress: 271


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list4)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list4))))

3 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list4))) = (any1::(any2::rotate (nat1) (any_list4)))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list4(rank:17)
=================================================
Progress: 272


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list4)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list4))))

3 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list4))) = (any1::(any2::rotate (nat1) (any_list4)))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list4(rank:17)
=================================================
Progress: 273


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list4)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list4))))

3 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 16)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list4))) = (any1::(any2::rotate (nat1) (any_list4)))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction any_list4(rank:17)
=================================================
Progress: 274


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list2 @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((any_list2 @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
>>> induction any_list2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((Nil) @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list3) @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:17)
=================================================
Progress: 275


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list2 @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((any_list2 @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
>>> induction any_list2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((Nil) @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list3) @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:17)
=================================================
Progress: 276


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list1)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list1))))

1 goal(s) more...

6 conjecture(s) more...
>>> induction any_list3(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list3 : any list
Base2 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list4:any list) (any_list5:any list), rotate (nat1) ((any1::(any2::((((Nil) @ any_list4) @ any_list5) @ any_list1)))) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list4) @ any_list5) @ any_list1))))

2 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:17)
=================================================
Progress: 277


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list2 @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((any_list2 @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
>>> induction any_list2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((Nil) @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list3) @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:17)
=================================================
Progress: 278


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list2 @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((any_list2 @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
>>> induction any_list2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((Nil) @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list3) @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:17)
=================================================
Progress: 279


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list2 @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((any_list2 @ any_list3) @ any_list4) @ any_list5))))

1 goal(s) more...

6 conjecture(s) more...
>>> induction any_list2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((Nil) @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list3) @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:17)
=================================================
Progress: 280


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list4))) = (any1::(any2::rotate (nat1) (any_list4)))

3 goal(s) more...

5 conjecture(s) more...
>>> induction any_list4(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), rotate (nat1) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat1) ((Nil))))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat1(rank:18)
=================================================
Progress: 281


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list4))) = (any1::(any2::rotate (nat1) (any_list4)))

3 goal(s) more...

5 conjecture(s) more...
>>> induction any_list4(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), rotate (nat1) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat1) ((Nil))))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat1(rank:18)
=================================================
Progress: 282


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list4))) = (any1::(any2::rotate (nat1) (any_list4)))

3 goal(s) more...

5 conjecture(s) more...
>>> induction any_list4(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), rotate (nat1) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat1) ((Nil))))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat1(rank:18)
=================================================
Progress: 283


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((Nil) @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list3) @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list3 @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((any_list3 @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:18)
=================================================
Progress: 284


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((Nil) @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list3) @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list3 @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((any_list3 @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:18)
=================================================
Progress: 285


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list3 : any list
Base2 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list4:any list) (any_list5:any list), rotate (nat1) ((any1::(any2::((((Nil) @ any_list4) @ any_list5) @ any_list1)))) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list4) @ any_list5) @ any_list1))))

2 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list3 : any list
Base2 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list4:any list) (any_list5:any list), rotate (nat1) ((any1::(any2::((any_list4 @ any_list5) @ any_list1)))) = (any1::(any2::rotate (nat1) (((any_list4 @ any_list5) @ any_list1))))

2 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list4(rank:18)
=================================================
Progress: 286


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((Nil) @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list3) @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list3 @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((any_list3 @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:18)
=================================================
Progress: 287


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((Nil) @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list3) @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list3 @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((any_list3 @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:18)
=================================================
Progress: 288


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((Nil) @ any_list3) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((((Nil) @ any_list3) @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list3 @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((any_list3 @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:18)
=================================================
Progress: 289


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
>>> induction any_list1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 290


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
>>> induction any_list1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 291


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> induction any_list1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
reflexivity(rank:17)
=================================================
Progress: 292


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len ((Nil))) ((((((((Nil) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

1 goal(s) more...

7 conjecture(s) more...
>>> reflexivity(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len ((any8::any_list2))) ((((((((((any8::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len ((any8::any_list2))) ((((((((any8::any_list2) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:17)
=================================================
Progress: 293


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len ((any8::any_list2))) ((((((((((any8::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len ((any8::any_list2))) ((((((((any8::any_list2) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 7
intro any1(rank:17)
intro any3(rank:17)
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
intro any4(rank:17)
intro any2(rank:17)
=================================================
Progress: 294


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any1(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 6
intro any2(rank:17)
intro any4(rank:17)
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
intro any3(rank:17)
=================================================
Progress: 295


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 5
intro any3(rank:17)
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
intro any4(rank:17)
=================================================
Progress: 296


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any3(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 4
intro any4(rank:17)
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 297


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any4(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 3
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 298


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 299


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 300


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any7
Lemma : forall (any1:any) (any2:any) (arg392:any list) (arg393:any list) (arg394:any list) (arg395:any list) (arg396:any list) (arg397:any list) (arg398:any list) (arg399:nat), rotate (arg399) (((((((((arg392 @ (any1::(Nil))) @ (any2::(Nil))) @ arg393) @ arg394) @ arg395) @ arg396) @ arg397) @ arg398)) = (any1::(any2::rotate (arg399) (((((((arg392 @ arg393) @ arg394) @ arg395) @ arg396) @ arg397) @ arg398))))
Model : any1: 6, any2: 0, arg392: (Nil), arg393: (Nil), arg394: (Nil), arg395: (Nil), arg396: (Nil), arg397: (Nil), arg398: (Nil), arg399: ZERO
Model : any1: 1, any2: 0, arg392: (Nil), arg393: (Nil), arg394: (Nil), arg395: (Nil), arg396: (3::(Nil)), arg397: (Nil), arg398: (Nil), arg399: ZERO
Model : any1: 2, any2: 1, arg392: (Nil), arg393: (Nil), arg394: (5::(Nil)), arg395: (Nil), arg396: (1::(Nil)), arg397: (Nil), arg398: (Nil), arg399: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (6::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (1::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (1::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (2::(Nil))) @ (1::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil))) = (2::(1::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.001886 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 301


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg392:any list) (arg393:any list) (arg394:any list) (arg395:any list) (arg396:any list) (arg397:any list) (arg398:any list) (arg399:nat), rotate (arg399) (((((((((arg392 @ (any1::(Nil))) @ (any2::(Nil))) @ arg393) @ arg394) @ arg395) @ arg396) @ arg397) @ arg398)) = (any1::(any2::rotate (arg399) (((((((arg392 @ arg393) @ arg394) @ arg395) @ arg396) @ arg397) @ arg398))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 302


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 5
intro any3(rank:17)
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
intro any4(rank:17)
=================================================
Progress: 303


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any3(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 4
intro any4(rank:17)
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 304


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any4(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 3
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 305


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 306


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 307


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any7
Lemma : forall (any1:any) (any2:any) (arg400:any list) (arg401:any list) (arg402:any list) (arg403:any list) (arg404:any list) (arg405:any list) (arg406:any list) (arg407:nat), rotate (arg407) (((((((((arg400 @ (any1::(Nil))) @ (any2::(Nil))) @ arg401) @ arg402) @ arg403) @ arg404) @ arg405) @ arg406)) = (any1::(any2::rotate (arg407) (((((((arg400 @ arg401) @ arg402) @ arg403) @ arg404) @ arg405) @ arg406))))
Model : any1: 5, any2: 4, arg400: (Nil), arg401: (Nil), arg402: (Nil), arg403: (Nil), arg404: (2::(Nil)), arg405: (6::(Nil)), arg406: (Nil), arg407: ZERO
Model : any1: 5, any2: 8, arg400: (1::(Nil)), arg401: (Nil), arg402: (Nil), arg403: (0::(Nil)), arg404: (Nil), arg405: (Nil), arg406: (Nil), arg407: ZERO
Model : any1: 0, any2: 7, arg400: (Nil), arg401: (Nil), arg402: (Nil), arg403: (Nil), arg404: (Nil), arg405: (Nil), arg406: (Nil), arg407: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (5::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (6::(Nil))) @ (Nil))) = (5::(4::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (6::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((((1::(Nil)) @ (5::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(8::rotate (ZERO) ((((((((1::(Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002886 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 6, any2: 6, any3: 5, any4: 1, any5: 0, any6: 0, any7: 6, any8: 2, any_list2: (Nil)
Model : any1: 0, any2: 8, any3: 6, any4: 0, any5: 6, any6: 0, any7: 5, any8: 7, any_list2: (Nil)
Model : any1: 2, any2: 8, any3: 0, any4: 6, any5: 3, any6: 2, any7: 1, any8: 0, any_list2: (6::(4::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil)))) = (6::(6::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (7::(Nil)))) = (0::(8::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (7::(Nil))))))
rotate (len ((6::(4::(Nil))))) (((((((((((6::(4::(Nil))) @ (Nil)) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (0::(Nil)))) = (2::(8::rotate (len ((6::(4::(Nil))))) (((((((((6::(4::(Nil))) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (0::(Nil))))))
Simplifying took 0.013007 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 308


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 309


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any3(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 4
intro any4(rank:17)
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 310


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any4(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 3
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 311


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 312


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 313


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any7
Lemma : forall (any1:any) (any2:any) (arg408:any list) (arg409:any list) (arg410:any list) (arg411:any list) (arg412:any list) (arg413:any list) (arg414:any list) (arg415:nat), rotate (arg415) (((((((((arg408 @ (any1::(Nil))) @ (any2::(Nil))) @ arg409) @ arg410) @ arg411) @ arg412) @ arg413) @ arg414)) = (any1::(any2::rotate (arg415) (((((((arg408 @ arg409) @ arg410) @ arg411) @ arg412) @ arg413) @ arg414))))
Model : any1: 7, any2: 4, arg408: (Nil), arg409: (Nil), arg410: (Nil), arg411: (Nil), arg412: (Nil), arg413: (Nil), arg414: (6::(Nil)), arg415: ZERO
Model : any1: 0, any2: 4, arg408: (Nil), arg409: (5::(Nil)), arg410: (Nil), arg411: (3::(Nil)), arg412: (1::(Nil)), arg413: (8::(Nil)), arg414: (Nil), arg415: ZERO
Model : any1: 0, any2: 0, arg408: (Nil), arg409: (Nil), arg410: (Nil), arg411: (Nil), arg412: (Nil), arg413: (Nil), arg414: (Nil), arg415: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (7::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (7::(4::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (Nil))) = (0::(4::rotate (ZERO) ((((((((Nil) @ (5::(Nil))) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002854 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 314


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg408:any list) (arg409:any list) (arg410:any list) (arg411:any list) (arg412:any list) (arg413:any list) (arg414:any list) (arg415:nat), rotate (arg415) (((((((((arg408 @ (any1::(Nil))) @ (any2::(Nil))) @ arg409) @ arg410) @ arg411) @ arg412) @ arg413) @ arg414)) = (any1::(any2::rotate (arg415) (((((((arg408 @ arg409) @ arg410) @ arg411) @ arg412) @ arg413) @ arg414))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 315


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any4(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 3
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 316


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 317


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 318


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any7
Lemma : forall (any1:any) (any2:any) (arg416:any list) (arg417:any list) (arg418:any list) (arg419:any list) (arg420:any list) (arg421:any list) (arg422:any list) (arg423:nat), rotate (arg423) (((((((((arg416 @ (any1::(Nil))) @ (any2::(Nil))) @ arg417) @ arg418) @ arg419) @ arg420) @ arg421) @ arg422)) = (any1::(any2::rotate (arg423) (((((((arg416 @ arg417) @ arg418) @ arg419) @ arg420) @ arg421) @ arg422))))
Model : any1: 1, any2: 6, arg416: (Nil), arg417: (Nil), arg418: (Nil), arg419: (Nil), arg420: (Nil), arg421: (8::(7::(Nil))), arg422: (Nil), arg423: ZERO
Model : any1: 1, any2: 0, arg416: (Nil), arg417: (Nil), arg418: (Nil), arg419: (Nil), arg420: (5::(2::(2::(Nil)))), arg421: (Nil), arg422: (Nil), arg423: ZERO
Model : any1: 6, any2: 1, arg416: (0::(Nil)), arg417: (Nil), arg418: (4::(Nil)), arg419: (Nil), arg420: (Nil), arg421: (Nil), arg422: (Nil), arg423: SUCC (SUCC (SUCC (SUCC (ZERO))))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (1::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(7::(Nil)))) @ (Nil))) = (1::(6::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(7::(Nil)))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (1::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(2::(2::(Nil))))) @ (Nil)) @ (Nil))) = (1::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(2::(2::(Nil))))) @ (Nil)) @ (Nil)))))
rotate (SUCC (SUCC (SUCC (SUCC (ZERO))))) ((((((((((0::(Nil)) @ (6::(Nil))) @ (1::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(1::rotate (SUCC (SUCC (SUCC (SUCC (ZERO))))) ((((((((0::(Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.004322 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 0, any2: 3, any3: 2, any4: 6, any5: 4, any6: 4, any7: 6, any8: 3, any_list2: (7::(Nil))
Model : any1: 1, any2: 3, any3: 2, any4: 2, any5: 8, any6: 0, any7: 3, any8: 8, any_list2: (Nil)
Model : any1: 0, any2: 0, any3: 3, any4: 5, any5: 0, any6: 0, any7: 0, any8: 3, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((7::(Nil)))) (((((((((((7::(Nil)) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (3::(Nil)))) = (0::(3::rotate (len ((7::(Nil)))) (((((((((7::(Nil)) @ (Nil)) @ (2::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (8::(Nil)))) = (1::(3::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (8::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (3::(Nil)))) = (0::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (3::(Nil))))))
Simplifying took 0.009939 seconds
Result : true
advanced_generalize done
=================================================
Progress: 319


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 320


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 321


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
intro any7
Lemma : forall (any1:any) (any2:any) (arg424:any list) (arg425:any list) (arg426:any list) (arg427:any list) (arg428:any list) (arg429:any list) (arg430:any list) (arg431:nat), rotate (arg431) (((((((((arg424 @ (any1::(Nil))) @ (any2::(Nil))) @ arg425) @ arg426) @ arg427) @ arg428) @ arg429) @ arg430)) = (any1::(any2::rotate (arg431) (((((((arg424 @ arg425) @ arg426) @ arg427) @ arg428) @ arg429) @ arg430))))
Model : any1: 6, any2: 5, arg424: (Nil), arg425: (Nil), arg426: (Nil), arg427: (Nil), arg428: (Nil), arg429: (Nil), arg430: (Nil), arg431: ZERO
Model : any1: 3, any2: 0, arg424: (Nil), arg425: (Nil), arg426: (Nil), arg427: (Nil), arg428: (Nil), arg429: (4::(Nil)), arg430: (Nil), arg431: ZERO
Model : any1: 3, any2: 0, arg424: (Nil), arg425: (Nil), arg426: (Nil), arg427: (Nil), arg428: (Nil), arg429: (Nil), arg430: (Nil), arg431: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (6::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(5::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) = (3::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001449 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 322


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg424:any list) (arg425:any list) (arg426:any list) (arg427:any list) (arg428:any list) (arg429:any list) (arg430:any list) (arg431:nat), rotate (arg431) (((((((((arg424 @ (any1::(Nil))) @ (any2::(Nil))) @ arg425) @ arg426) @ arg427) @ arg428) @ arg429) @ arg430)) = (any1::(any2::rotate (arg431) (((((((arg424 @ arg425) @ arg426) @ arg427) @ arg428) @ arg429) @ arg430))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 323


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 324


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg432:any list) (arg433:any list) (arg434:any list) (arg435:any list) (arg436:any list) (arg437:any list) (arg438:any list) (arg439:nat), rotate (arg439) (((((((((arg432 @ (any1::(Nil))) @ (any2::(Nil))) @ arg433) @ arg434) @ arg435) @ arg436) @ arg437) @ arg438)) = (any1::(any2::rotate (arg439) (((((((arg432 @ arg433) @ arg434) @ arg435) @ arg436) @ arg437) @ arg438))))
Model : any1: 0, any2: 2, arg432: (Nil), arg433: (Nil), arg434: (4::(Nil)), arg435: (Nil), arg436: (Nil), arg437: (1::(3::(Nil))), arg438: (Nil), arg439: ZERO
Model : any1: 8, any2: 2, arg432: (Nil), arg433: (Nil), arg434: (Nil), arg435: (Nil), arg436: (Nil), arg437: (Nil), arg438: (Nil), arg439: ZERO
Model : any1: 7, any2: 3, arg432: (Nil), arg433: (Nil), arg434: (Nil), arg435: (Nil), arg436: (Nil), arg437: (Nil), arg438: (Nil), arg439: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (2::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (1::(3::(Nil)))) @ (Nil))) = (0::(2::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (1::(3::(Nil)))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(2::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (7::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(3::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002055 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 325


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg432:any list) (arg433:any list) (arg434:any list) (arg435:any list) (arg436:any list) (arg437:any list) (arg438:any list) (arg439:nat), rotate (arg439) (((((((((arg432 @ (any1::(Nil))) @ (any2::(Nil))) @ arg433) @ arg434) @ arg435) @ arg436) @ arg437) @ arg438)) = (any1::(any2::rotate (arg439) (((((((arg432 @ arg433) @ arg434) @ arg435) @ arg436) @ arg437) @ arg438))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 326


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg440:any list) (arg441:any list) (arg442:any list) (arg443:any list) (arg444:any list) (arg445:any list) (arg446:any list) (arg447:nat), rotate (arg447) (((((((((arg440 @ (any1::(Nil))) @ (any2::(Nil))) @ arg441) @ arg442) @ arg443) @ arg444) @ arg445) @ arg446)) = (any1::(any2::rotate (arg447) (((((((arg440 @ arg441) @ arg442) @ arg443) @ arg444) @ arg445) @ arg446))))
Model : any1: 5, any2: 4, arg440: (Nil), arg441: (2::(Nil)), arg442: (Nil), arg443: (Nil), arg444: (Nil), arg445: (Nil), arg446: (7::(4::(Nil))), arg447: SUCC (SUCC (ZERO))
Model : any1: 8, any2: 0, arg440: (6::(Nil)), arg441: (8::(Nil)), arg442: (Nil), arg443: (Nil), arg444: (Nil), arg445: (Nil), arg446: (Nil), arg447: ZERO
Model : any1: 3, any2: 8, arg440: (Nil), arg441: (Nil), arg442: (Nil), arg443: (Nil), arg444: (Nil), arg445: (Nil), arg446: (Nil), arg447: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (SUCC (ZERO))) ((((((((((Nil) @ (5::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(4::(Nil))))) = (5::(4::rotate (SUCC (SUCC (ZERO))) ((((((((Nil) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(4::(Nil)))))))
rotate (ZERO) ((((((((((6::(Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(0::rotate (ZERO) ((((((((6::(Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(8::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.004588 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 1, any2: 0, any3: 7, any4: 7, any5: 0, any6: 7, any7: 0, any8: 3, any_list2: (Nil)
Model : any1: 0, any2: 5, any3: 1, any4: 6, any5: 1, any6: 0, any7: 6, any8: 1, any_list2: (Nil)
Model : any1: 0, any2: 0, any3: 2, any4: 5, any5: 6, any6: 0, any7: 6, any8: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (3::(Nil)))) = (1::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (1::(Nil)))) = (0::(5::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (5::(Nil)))) = (0::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (5::(Nil))))))
Simplifying took 0.007749 seconds
Result : true
advanced_generalize done
=================================================
Progress: 327


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any3(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 4
intro any4(rank:17)
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 328


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any4(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 3
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 329


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any5 : any
---------------------------------------
forall (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 330


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 331


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any7 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any7
Lemma : forall (any1:any) (any2:any) (arg448:any list) (arg449:any list) (arg450:any list) (arg451:any list) (arg452:any list) (arg453:any list) (arg454:any list) (arg455:nat), rotate (arg455) (((((((((arg448 @ (any1::(Nil))) @ (any2::(Nil))) @ arg449) @ arg450) @ arg451) @ arg452) @ arg453) @ arg454)) = (any1::(any2::rotate (arg455) (((((((arg448 @ arg449) @ arg450) @ arg451) @ arg452) @ arg453) @ arg454))))
Model : any1: 8, any2: 4, arg448: (8::(4::(Nil))), arg449: (6::(Nil)), arg450: (Nil), arg451: (Nil), arg452: (Nil), arg453: (Nil), arg454: (Nil), arg455: ZERO
Model : any1: 0, any2: 4, arg448: (Nil), arg449: (Nil), arg450: (Nil), arg451: (Nil), arg452: (0::(Nil)), arg453: (Nil), arg454: (Nil), arg455: SUCC (ZERO)
Model : any1: 8, any2: 1, arg448: (Nil), arg449: (4::(Nil)), arg450: (Nil), arg451: (Nil), arg452: (0::(Nil)), arg453: (6::(Nil)), arg454: (Nil), arg455: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((8::(4::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(4::rotate (ZERO) ((((((((8::(4::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (0::(4::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (Nil))) = (8::(1::rotate (ZERO) ((((((((Nil) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (Nil)))))
Simplifying took 0.005079 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 5, any2: 5, any3: 0, any4: 3, any5: 0, any6: 0, any7: 8, any8: 2, any_list2: (Nil)
Model : any1: 2, any2: 3, any3: 2, any4: 8, any5: 8, any6: 5, any7: 6, any8: 3, any_list2: (Nil)
Model : any1: 3, any2: 6, any3: 3, any4: 2, any5: 3, any6: 6, any7: 0, any8: 6, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (2::(Nil)))) = (5::(5::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (3::(Nil)))) = (2::(3::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil)))) = (3::(6::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))))))
Simplifying took 0.008146 seconds
Result : true
advanced_generalize done
=================================================
Progress: 332


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any4(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 3
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 333


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any5 : any
---------------------------------------
forall (any2:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 334


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any6 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 335


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any7 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any7
Lemma : forall (any1:any) (any2:any) (arg456:any list) (arg457:any list) (arg458:any list) (arg459:any list) (arg460:any list) (arg461:any list) (arg462:any list) (arg463:nat), rotate (arg463) (((((((((arg456 @ (any1::(Nil))) @ (any2::(Nil))) @ arg457) @ arg458) @ arg459) @ arg460) @ arg461) @ arg462)) = (any1::(any2::rotate (arg463) (((((((arg456 @ arg457) @ arg458) @ arg459) @ arg460) @ arg461) @ arg462))))
Model : any1: 4, any2: 6, arg456: (0::(Nil)), arg457: (Nil), arg458: (Nil), arg459: (Nil), arg460: (0::(Nil)), arg461: (Nil), arg462: (1::(Nil)), arg463: SUCC (ZERO)
Model : any1: 5, any2: 2, arg456: (Nil), arg457: (Nil), arg458: (Nil), arg459: (Nil), arg460: (Nil), arg461: (Nil), arg462: (Nil), arg463: ZERO
Model : any1: 8, any2: 2, arg456: (Nil), arg457: (0::(Nil)), arg458: (1::(Nil)), arg459: (4::(2::(Nil))), arg460: (3::(Nil)), arg461: (Nil), arg462: (Nil), arg463: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((0::(Nil)) @ (4::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (1::(Nil)))) = (4::(6::rotate (SUCC (ZERO)) ((((((((0::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (1::(Nil))))))
rotate (ZERO) ((((((((((Nil) @ (5::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(2::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (8::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (4::(2::(Nil)))) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (8::(2::rotate (SUCC (ZERO)) ((((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (4::(2::(Nil)))) @ (3::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.005166 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 0, any2: 2, any3: 0, any4: 2, any5: 3, any6: 2, any7: 6, any8: 3, any_list2: (Nil)
Model : any1: 7, any2: 0, any3: 8, any4: 1, any5: 8, any6: 8, any7: 3, any8: 7, any_list2: (Nil)
Model : any1: 0, any2: 7, any3: 4, any4: 6, any5: 7, any6: 8, any7: 5, any8: 2, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (3::(Nil)))) = (0::(2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (7::(Nil)))) = (7::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (2::(Nil)))) = (0::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (2::(Nil))))))
Simplifying took 0.009263 seconds
Result : true
advanced_generalize done
=================================================
Progress: 336


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 337


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 338


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any4
intro any7
Lemma : forall (any1:any) (any2:any) (arg464:any list) (arg465:any list) (arg466:any list) (arg467:any list) (arg468:any list) (arg469:any list) (arg470:any list) (arg471:nat), rotate (arg471) (((((((((arg464 @ (any1::(Nil))) @ (any2::(Nil))) @ arg465) @ arg466) @ arg467) @ arg468) @ arg469) @ arg470)) = (any1::(any2::rotate (arg471) (((((((arg464 @ arg465) @ arg466) @ arg467) @ arg468) @ arg469) @ arg470))))
Model : any1: 0, any2: 3, arg464: (Nil), arg465: (Nil), arg466: (Nil), arg467: (Nil), arg468: (Nil), arg469: (Nil), arg470: (8::(Nil)), arg471: ZERO
Model : any1: 0, any2: 6, arg464: (Nil), arg465: (Nil), arg466: (Nil), arg467: (Nil), arg468: (Nil), arg469: (Nil), arg470: (Nil), arg471: ZERO
Model : any1: 3, any2: 3, arg464: (Nil), arg465: (Nil), arg466: (0::(0::(7::(Nil)))), arg467: (Nil), arg468: (Nil), arg469: (5::(Nil)), arg470: (1::(Nil)), arg471: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil)))) = (0::(3::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(6::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (3::(Nil))) @ (Nil)) @ (0::(0::(7::(Nil))))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (1::(Nil)))) = (3::(3::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (0::(0::(7::(Nil))))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (1::(Nil))))))
Simplifying took 0.003073 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 339


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg464:any list) (arg465:any list) (arg466:any list) (arg467:any list) (arg468:any list) (arg469:any list) (arg470:any list) (arg471:nat), rotate (arg471) (((((((((arg464 @ (any1::(Nil))) @ (any2::(Nil))) @ arg465) @ arg466) @ arg467) @ arg468) @ arg469) @ arg470)) = (any1::(any2::rotate (arg471) (((((((arg464 @ arg465) @ arg466) @ arg467) @ arg468) @ arg469) @ arg470))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 340


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 341


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any5 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg472:any list) (arg473:any list) (arg474:any list) (arg475:any list) (arg476:any list) (arg477:any list) (arg478:any list) (arg479:nat), rotate (arg479) (((((((((arg472 @ (any1::(Nil))) @ (any2::(Nil))) @ arg473) @ arg474) @ arg475) @ arg476) @ arg477) @ arg478)) = (any1::(any2::rotate (arg479) (((((((arg472 @ arg473) @ arg474) @ arg475) @ arg476) @ arg477) @ arg478))))
Model : any1: 0, any2: 1, arg472: (Nil), arg473: (Nil), arg474: (0::(Nil)), arg475: (Nil), arg476: (Nil), arg477: (3::(Nil)), arg478: (Nil), arg479: ZERO
Model : any1: 6, any2: 5, arg472: (Nil), arg473: (Nil), arg474: (Nil), arg475: (Nil), arg476: (Nil), arg477: (0::(Nil)), arg478: (Nil), arg479: ZERO
Model : any1: 0, any2: 1, arg472: (Nil), arg473: (Nil), arg474: (Nil), arg475: (Nil), arg476: (Nil), arg477: (3::(Nil)), arg478: (3::(Nil)), arg479: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (0::(1::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (6::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (6::(5::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (3::(Nil)))) = (0::(1::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (3::(Nil))))))
Simplifying took 0.001889 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any5 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 342


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any5 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg472:any list) (arg473:any list) (arg474:any list) (arg475:any list) (arg476:any list) (arg477:any list) (arg478:any list) (arg479:nat), rotate (arg479) (((((((((arg472 @ (any1::(Nil))) @ (any2::(Nil))) @ arg473) @ arg474) @ arg475) @ arg476) @ arg477) @ arg478)) = (any1::(any2::rotate (arg479) (((((((arg472 @ arg473) @ arg474) @ arg475) @ arg476) @ arg477) @ arg478))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 343


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg480:any list) (arg481:any list) (arg482:any list) (arg483:any list) (arg484:any list) (arg485:any list) (arg486:any list) (arg487:nat), rotate (arg487) (((((((((arg480 @ (any1::(Nil))) @ (any2::(Nil))) @ arg481) @ arg482) @ arg483) @ arg484) @ arg485) @ arg486)) = (any1::(any2::rotate (arg487) (((((((arg480 @ arg481) @ arg482) @ arg483) @ arg484) @ arg485) @ arg486))))
Model : any1: 5, any2: 0, arg480: (Nil), arg481: (Nil), arg482: (Nil), arg483: (Nil), arg484: (5::(Nil)), arg485: (Nil), arg486: (7::(Nil)), arg487: ZERO
Model : any1: 0, any2: 7, arg480: (Nil), arg481: (8::(Nil)), arg482: (Nil), arg483: (Nil), arg484: (3::(Nil)), arg485: (Nil), arg486: (Nil), arg487: ZERO
Model : any1: 0, any2: 5, arg480: (Nil), arg481: (Nil), arg482: (Nil), arg483: (Nil), arg484: (Nil), arg485: (Nil), arg486: (Nil), arg487: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (5::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (7::(Nil)))) = (5::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (7::(Nil))))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (0::(7::rotate (ZERO) ((((((((Nil) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(5::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002662 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 344


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg480:any list) (arg481:any list) (arg482:any list) (arg483:any list) (arg484:any list) (arg485:any list) (arg486:any list) (arg487:nat), rotate (arg487) (((((((((arg480 @ (any1::(Nil))) @ (any2::(Nil))) @ arg481) @ arg482) @ arg483) @ arg484) @ arg485) @ arg486)) = (any1::(any2::rotate (arg487) (((((((arg480 @ arg481) @ arg482) @ arg483) @ arg484) @ arg485) @ arg486))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 345


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any4(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 3
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 346


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 347


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any6 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 348


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any7 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any7
Lemma : forall (any1:any) (any2:any) (arg488:any list) (arg489:any list) (arg490:any list) (arg491:any list) (arg492:any list) (arg493:any list) (arg494:any list) (arg495:nat), rotate (arg495) (((((((((arg488 @ (any1::(Nil))) @ (any2::(Nil))) @ arg489) @ arg490) @ arg491) @ arg492) @ arg493) @ arg494)) = (any1::(any2::rotate (arg495) (((((((arg488 @ arg489) @ arg490) @ arg491) @ arg492) @ arg493) @ arg494))))
Model : any1: 3, any2: 2, arg488: (Nil), arg489: (Nil), arg490: (2::(Nil)), arg491: (0::(7::(7::(0::(Nil))))), arg492: (6::(Nil)), arg493: (Nil), arg494: (Nil), arg495: ZERO
Model : any1: 0, any2: 2, arg488: (Nil), arg489: (Nil), arg490: (8::(Nil)), arg491: (Nil), arg492: (Nil), arg493: (Nil), arg494: (Nil), arg495: ZERO
Model : any1: 0, any2: 1, arg488: (Nil), arg489: (7::(Nil)), arg490: (Nil), arg491: (6::(Nil)), arg492: (Nil), arg493: (1::(Nil)), arg494: (Nil), arg495: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (2::(Nil))) @ (Nil)) @ (2::(Nil))) @ (0::(7::(7::(0::(Nil)))))) @ (6::(Nil))) @ (Nil)) @ (Nil))) = (3::(2::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(7::(7::(0::(Nil)))))) @ (6::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (2::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(2::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil))) = (0::(1::rotate (ZERO) ((((((((Nil) @ (7::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)))))
Simplifying took 0.006114 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any7 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 349


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any7 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg488:any list) (arg489:any list) (arg490:any list) (arg491:any list) (arg492:any list) (arg493:any list) (arg494:any list) (arg495:nat), rotate (arg495) (((((((((arg488 @ (any1::(Nil))) @ (any2::(Nil))) @ arg489) @ arg490) @ arg491) @ arg492) @ arg493) @ arg494)) = (any1::(any2::rotate (arg495) (((((((arg488 @ arg489) @ arg490) @ arg491) @ arg492) @ arg493) @ arg494))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 350


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 351


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 352


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any4
intro any7
Lemma : forall (any1:any) (any2:any) (arg496:any list) (arg497:any list) (arg498:any list) (arg499:any list) (arg500:any list) (arg501:any list) (arg502:any list) (arg503:nat), rotate (arg503) (((((((((arg496 @ (any1::(Nil))) @ (any2::(Nil))) @ arg497) @ arg498) @ arg499) @ arg500) @ arg501) @ arg502)) = (any1::(any2::rotate (arg503) (((((((arg496 @ arg497) @ arg498) @ arg499) @ arg500) @ arg501) @ arg502))))
Model : any1: 6, any2: 6, arg496: (4::(Nil)), arg497: (Nil), arg498: (7::(4::(Nil))), arg499: (Nil), arg500: (Nil), arg501: (Nil), arg502: (Nil), arg503: ZERO
Model : any1: 2, any2: 0, arg496: (Nil), arg497: (Nil), arg498: (Nil), arg499: (Nil), arg500: (Nil), arg501: (Nil), arg502: (Nil), arg503: ZERO
Model : any1: 3, any2: 3, arg496: (Nil), arg497: (Nil), arg498: (Nil), arg499: (Nil), arg500: (Nil), arg501: (Nil), arg502: (Nil), arg503: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((4::(Nil)) @ (6::(Nil))) @ (6::(Nil))) @ (Nil)) @ (7::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(6::rotate (ZERO) ((((((((4::(Nil)) @ (Nil)) @ (7::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (2::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(3::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003356 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 7, any2: 8, any3: 6, any4: 0, any5: 4, any6: 2, any7: 2, any8: 6, any_list2: (Nil)
Model : any1: 4, any2: 8, any3: 8, any4: 3, any5: 3, any6: 7, any7: 0, any8: 0, any_list2: (Nil)
Model : any1: 4, any2: 5, any3: 7, any4: 3, any5: 1, any6: 3, any7: 0, any8: 4, any_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (6::(Nil)))) = (7::(8::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (4::(8::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((0::(Nil)))) (((((((((((0::(Nil)) @ (Nil)) @ (4::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (4::(Nil)))) = (4::(5::rotate (len ((0::(Nil)))) (((((((((0::(Nil)) @ (Nil)) @ (7::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (4::(Nil))))))
Simplifying took 0.010395 seconds
Result : true
advanced_generalize done
=================================================
Progress: 353


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 354


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg504:any list) (arg505:any list) (arg506:any list) (arg507:any list) (arg508:any list) (arg509:any list) (arg510:any list) (arg511:nat), rotate (arg511) (((((((((arg504 @ (any1::(Nil))) @ (any2::(Nil))) @ arg505) @ arg506) @ arg507) @ arg508) @ arg509) @ arg510)) = (any1::(any2::rotate (arg511) (((((((arg504 @ arg505) @ arg506) @ arg507) @ arg508) @ arg509) @ arg510))))
Model : any1: 5, any2: 6, arg504: (Nil), arg505: (0::(Nil)), arg506: (Nil), arg507: (Nil), arg508: (Nil), arg509: (Nil), arg510: (Nil), arg511: ZERO
Model : any1: 0, any2: 0, arg504: (8::(Nil)), arg505: (Nil), arg506: (Nil), arg507: (Nil), arg508: (Nil), arg509: (Nil), arg510: (Nil), arg511: ZERO
Model : any1: 4, any2: 0, arg504: (Nil), arg505: (Nil), arg506: (Nil), arg507: (Nil), arg508: (Nil), arg509: (Nil), arg510: (Nil), arg511: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (5::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(6::rotate (ZERO) ((((((((Nil) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((8::(Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(0::rotate (ZERO) ((((((((8::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (4::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001900 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 4, any2: 7, any3: 6, any4: 0, any5: 2, any6: 7, any7: 0, any8: 0, any_list2: (Nil)
Model : any1: 2, any2: 6, any3: 1, any4: 5, any5: 0, any6: 6, any7: 7, any8: 2, any_list2: (Nil)
Model : any1: 0, any2: 1, any3: 3, any4: 8, any5: 0, any6: 6, any7: 3, any8: 2, any_list2: (8::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (4::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (2::(Nil)))) = (2::(6::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (2::(Nil))))))
rotate (len ((8::(Nil)))) (((((((((((8::(Nil)) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (2::(Nil)))) = (0::(1::rotate (len ((8::(Nil)))) (((((((((8::(Nil)) @ (Nil)) @ (3::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (2::(Nil))))))
Simplifying took 0.010330 seconds
Result : true
advanced_generalize done
=================================================
Progress: 355


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg512:any list) (arg513:any list) (arg514:any list) (arg515:any list) (arg516:any list) (arg517:any list) (arg518:any list) (arg519:nat), rotate (arg519) (((((((((arg512 @ (any1::(Nil))) @ (any2::(Nil))) @ arg513) @ arg514) @ arg515) @ arg516) @ arg517) @ arg518)) = (any1::(any2::rotate (arg519) (((((((arg512 @ arg513) @ arg514) @ arg515) @ arg516) @ arg517) @ arg518))))
Model : any1: 1, any2: 8, arg512: (Nil), arg513: (Nil), arg514: (Nil), arg515: (Nil), arg516: (Nil), arg517: (Nil), arg518: (Nil), arg519: SUCC (ZERO)
Model : any1: 0, any2: 8, arg512: (Nil), arg513: (Nil), arg514: (Nil), arg515: (Nil), arg516: (Nil), arg517: (5::(Nil)), arg518: (Nil), arg519: ZERO
Model : any1: 8, any2: 3, arg512: (Nil), arg513: (Nil), arg514: (Nil), arg515: (Nil), arg516: (Nil), arg517: (Nil), arg518: (Nil), arg519: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((Nil) @ (1::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(8::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (0::(8::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(3::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001935 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 4, any2: 5, any3: 2, any4: 2, any5: 4, any6: 7, any7: 2, any8: 0, any_list2: (Nil)
Model : any1: 7, any2: 1, any3: 6, any4: 0, any5: 0, any6: 0, any7: 4, any8: 2, any_list2: (0::(0::(Nil)))
Model : any1: 7, any2: 0, any3: 6, any4: 4, any5: 5, any6: 7, any7: 8, any8: 6, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (0::(Nil)))) = (4::(5::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (0::(Nil))))))
rotate (len ((0::(0::(Nil))))) (((((((((((0::(0::(Nil))) @ (Nil)) @ (7::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (2::(Nil)))) = (7::(1::rotate (len ((0::(0::(Nil))))) (((((((((0::(0::(Nil))) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (6::(Nil)))) = (7::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (6::(Nil))))))
Simplifying took 0.011909 seconds
Result : true
advanced_generalize done
=================================================
Progress: 356


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 357


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 358


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any4
intro any7
Lemma : forall (any1:any) (any2:any) (arg520:any list) (arg521:any list) (arg522:any list) (arg523:any list) (arg524:any list) (arg525:any list) (arg526:any list) (arg527:nat), rotate (arg527) (((((((((arg520 @ (any1::(Nil))) @ (any2::(Nil))) @ arg521) @ arg522) @ arg523) @ arg524) @ arg525) @ arg526)) = (any1::(any2::rotate (arg527) (((((((arg520 @ arg521) @ arg522) @ arg523) @ arg524) @ arg525) @ arg526))))
Model : any1: 1, any2: 8, arg520: (Nil), arg521: (Nil), arg522: (Nil), arg523: (Nil), arg524: (Nil), arg525: (Nil), arg526: (Nil), arg527: SUCC (ZERO)
Model : any1: 4, any2: 7, arg520: (Nil), arg521: (Nil), arg522: (Nil), arg523: (Nil), arg524: (Nil), arg525: (0::(Nil)), arg526: (Nil), arg527: ZERO
Model : any1: 0, any2: 0, arg520: (Nil), arg521: (4::(Nil)), arg522: (Nil), arg523: (Nil), arg524: (Nil), arg525: (Nil), arg526: (Nil), arg527: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((Nil) @ (1::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(8::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (4::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (4::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(0::rotate (ZERO) ((((((((Nil) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002025 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 6, any2: 8, any3: 8, any4: 1, any5: 3, any6: 3, any7: 3, any8: 1, any_list2: (5::(Nil))
Model : any1: 2, any2: 0, any3: 0, any4: 5, any5: 1, any6: 0, any7: 6, any8: 6, any_list2: (Nil)
Model : any1: 4, any2: 4, any3: 6, any4: 5, any5: 5, any6: 4, any7: 1, any8: 8, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((5::(Nil)))) (((((((((((5::(Nil)) @ (Nil)) @ (6::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (1::(Nil)))) = (6::(8::rotate (len ((5::(Nil)))) (((((((((5::(Nil)) @ (Nil)) @ (8::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (6::(Nil)))) = (2::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (8::(Nil)))) = (4::(4::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (8::(Nil))))))
Simplifying took 0.010866 seconds
Result : true
advanced_generalize done
=================================================
Progress: 359


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 360


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg528:any list) (arg529:any list) (arg530:any list) (arg531:any list) (arg532:any list) (arg533:any list) (arg534:any list) (arg535:nat), rotate (arg535) (((((((((arg528 @ (any1::(Nil))) @ (any2::(Nil))) @ arg529) @ arg530) @ arg531) @ arg532) @ arg533) @ arg534)) = (any1::(any2::rotate (arg535) (((((((arg528 @ arg529) @ arg530) @ arg531) @ arg532) @ arg533) @ arg534))))
Model : any1: 0, any2: 8, arg528: (Nil), arg529: (Nil), arg530: (7::(Nil)), arg531: (Nil), arg532: (Nil), arg533: (Nil), arg534: (2::(Nil)), arg535: SUCC (ZERO)
Model : any1: 0, any2: 1, arg528: (Nil), arg529: (Nil), arg530: (8::(Nil)), arg531: (Nil), arg532: (Nil), arg533: (Nil), arg534: (Nil), arg535: SUCC (ZERO)
Model : any1: 0, any2: 7, arg528: (Nil), arg529: (Nil), arg530: (Nil), arg531: (Nil), arg532: (Nil), arg533: (Nil), arg534: (Nil), arg535: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((Nil) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil)))) = (0::(8::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(1::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002936 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 1, any2: 7, any3: 7, any4: 0, any5: 3, any6: 7, any7: 7, any8: 4, any_list2: (Nil)
Model : any1: 0, any2: 7, any3: 6, any4: 8, any5: 5, any6: 3, any7: 0, any8: 5, any_list2: (Nil)
Model : any1: 1, any2: 5, any3: 3, any4: 1, any5: 1, any6: 2, any7: 1, any8: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (4::(Nil)))) = (1::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (5::(Nil)))) = (0::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (7::(Nil)))) = (1::(5::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (7::(Nil))))))
Simplifying took 0.008880 seconds
Result : true
advanced_generalize done
=================================================
Progress: 361


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg536:any list) (arg537:any list) (arg538:any list) (arg539:any list) (arg540:any list) (arg541:any list) (arg542:any list) (arg543:nat), rotate (arg543) (((((((((arg536 @ (any1::(Nil))) @ (any2::(Nil))) @ arg537) @ arg538) @ arg539) @ arg540) @ arg541) @ arg542)) = (any1::(any2::rotate (arg543) (((((((arg536 @ arg537) @ arg538) @ arg539) @ arg540) @ arg541) @ arg542))))
Model : any1: 5, any2: 1, arg536: (Nil), arg537: (Nil), arg538: (4::(Nil)), arg539: (0::(Nil)), arg540: (Nil), arg541: (Nil), arg542: (Nil), arg543: SUCC (SUCC (ZERO))
Model : any1: 4, any2: 1, arg536: (1::(6::(Nil))), arg537: (Nil), arg538: (7::(Nil)), arg539: (Nil), arg540: (Nil), arg541: (Nil), arg542: (Nil), arg543: ZERO
Model : any1: 1, any2: 4, arg536: (1::(Nil)), arg537: (Nil), arg538: (Nil), arg539: (1::(Nil)), arg540: (Nil), arg541: (Nil), arg542: (Nil), arg543: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (SUCC (ZERO))) ((((((((((Nil) @ (5::(Nil))) @ (1::(Nil))) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(1::rotate (SUCC (SUCC (ZERO))) ((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((1::(6::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(1::rotate (ZERO) ((((((((1::(6::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((1::(Nil)) @ (1::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(4::rotate (SUCC (ZERO)) ((((((((1::(Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.005401 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 3, any2: 0, any3: 8, any4: 0, any5: 3, any6: 0, any7: 0, any8: 8, any_list2: (Nil)
Model : any1: 3, any2: 8, any3: 4, any4: 5, any5: 2, any6: 4, any7: 8, any8: 0, any_list2: (Nil)
Model : any1: 0, any2: 1, any3: 7, any4: 1, any5: 3, any6: 7, any7: 3, any8: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil)))) = (3::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (0::(Nil)))) = (3::(8::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (0::(Nil)))) = (0::(1::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (0::(Nil))))))
Simplifying took 0.007977 seconds
Result : true
advanced_generalize done
=================================================
Progress: 362


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 363


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg544:any list) (arg545:any list) (arg546:any list) (arg547:any list) (arg548:any list) (arg549:any list) (arg550:any list) (arg551:nat), rotate (arg551) (((((((((arg544 @ (any1::(Nil))) @ (any2::(Nil))) @ arg545) @ arg546) @ arg547) @ arg548) @ arg549) @ arg550)) = (any1::(any2::rotate (arg551) (((((((arg544 @ arg545) @ arg546) @ arg547) @ arg548) @ arg549) @ arg550))))
Model : any1: 4, any2: 0, arg544: (8::(Nil)), arg545: (2::(Nil)), arg546: (Nil), arg547: (Nil), arg548: (Nil), arg549: (Nil), arg550: (1::(Nil)), arg551: SUCC (ZERO)
Model : any1: 6, any2: 0, arg544: (Nil), arg545: (5::(Nil)), arg546: (8::(Nil)), arg547: (Nil), arg548: (Nil), arg549: (Nil), arg550: (Nil), arg551: ZERO
Model : any1: 3, any2: 0, arg544: (Nil), arg545: (Nil), arg546: (Nil), arg547: (5::(Nil)), arg548: (Nil), arg549: (Nil), arg550: (Nil), arg551: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((8::(Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (4::(0::rotate (SUCC (ZERO)) ((((((((8::(Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))))))
rotate (ZERO) ((((((((((Nil) @ (6::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(0::rotate (ZERO) ((((((((Nil) @ (5::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.004232 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 364


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg544:any list) (arg545:any list) (arg546:any list) (arg547:any list) (arg548:any list) (arg549:any list) (arg550:any list) (arg551:nat), rotate (arg551) (((((((((arg544 @ (any1::(Nil))) @ (any2::(Nil))) @ arg545) @ arg546) @ arg547) @ arg548) @ arg549) @ arg550)) = (any1::(any2::rotate (arg551) (((((((arg544 @ arg545) @ arg546) @ arg547) @ arg548) @ arg549) @ arg550))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 365


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg552:any list) (arg553:any list) (arg554:any list) (arg555:any list) (arg556:any list) (arg557:any list) (arg558:any list) (arg559:nat), rotate (arg559) (((((((((arg552 @ (any1::(Nil))) @ (any2::(Nil))) @ arg553) @ arg554) @ arg555) @ arg556) @ arg557) @ arg558)) = (any1::(any2::rotate (arg559) (((((((arg552 @ arg553) @ arg554) @ arg555) @ arg556) @ arg557) @ arg558))))
Model : any1: 7, any2: 6, arg552: (4::(Nil)), arg553: (Nil), arg554: (Nil), arg555: (Nil), arg556: (Nil), arg557: (Nil), arg558: (Nil), arg559: SUCC (ZERO)
Model : any1: 3, any2: 7, arg552: (Nil), arg553: (Nil), arg554: (Nil), arg555: (Nil), arg556: (Nil), arg557: (Nil), arg558: (Nil), arg559: SUCC (ZERO)
Model : any1: 7, any2: 6, arg552: (Nil), arg553: (2::(Nil)), arg554: (Nil), arg555: (Nil), arg556: (4::(1::(0::(Nil)))), arg557: (Nil), arg558: (Nil), arg559: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((4::(Nil)) @ (7::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(6::rotate (SUCC (ZERO)) ((((((((4::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (3::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(7::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (7::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (4::(1::(0::(Nil))))) @ (Nil)) @ (Nil))) = (7::(6::rotate (ZERO) ((((((((Nil) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (4::(1::(0::(Nil))))) @ (Nil)) @ (Nil)))))
Simplifying took 0.003839 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 1, any2: 3, any3: 3, any4: 5, any5: 0, any6: 2, any7: 5, any8: 4, any_list2: (Nil)
Model : any1: 3, any2: 0, any3: 4, any4: 6, any5: 1, any6: 7, any7: 5, any8: 8, any_list2: (Nil)
Model : any1: 1, any2: 2, any3: 1, any4: 8, any5: 7, any6: 7, any7: 5, any8: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (4::(Nil)))) = (1::(3::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (8::(Nil)))) = (3::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (8::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (0::(Nil)))) = (1::(2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (0::(Nil))))))
Simplifying took 0.008684 seconds
Result : true
advanced_generalize done
=================================================
Progress: 366


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg560:any list) (arg561:any list) (arg562:any list) (arg563:any list) (arg564:any list) (arg565:any list) (arg566:any list) (arg567:nat), rotate (arg567) (((((((((arg560 @ (any1::(Nil))) @ (any2::(Nil))) @ arg561) @ arg562) @ arg563) @ arg564) @ arg565) @ arg566)) = (any1::(any2::rotate (arg567) (((((((arg560 @ arg561) @ arg562) @ arg563) @ arg564) @ arg565) @ arg566))))
Model : any1: 0, any2: 3, arg560: (Nil), arg561: (Nil), arg562: (Nil), arg563: (Nil), arg564: (Nil), arg565: (Nil), arg566: (Nil), arg567: ZERO
Model : any1: 3, any2: 0, arg560: (Nil), arg561: (Nil), arg562: (Nil), arg563: (1::(Nil)), arg564: (6::(Nil)), arg565: (Nil), arg566: (Nil), arg567: ZERO
Model : any1: 3, any2: 0, arg560: (Nil), arg561: (Nil), arg562: (Nil), arg563: (4::(Nil)), arg564: (Nil), arg565: (5::(Nil)), arg566: (Nil), arg567: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(3::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil))) = (3::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (3::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)))))
Simplifying took 0.002281 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 367


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg560:any list) (arg561:any list) (arg562:any list) (arg563:any list) (arg564:any list) (arg565:any list) (arg566:any list) (arg567:nat), rotate (arg567) (((((((((arg560 @ (any1::(Nil))) @ (any2::(Nil))) @ arg561) @ arg562) @ arg563) @ arg564) @ arg565) @ arg566)) = (any1::(any2::rotate (arg567) (((((((arg560 @ arg561) @ arg562) @ arg563) @ arg564) @ arg565) @ arg566))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 368


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any4(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 3
intro any5(rank:17)
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 369


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 370


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any6 : any
---------------------------------------
forall (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 371


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any7 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any7
Lemma : forall (any1:any) (any2:any) (arg568:any list) (arg569:any list) (arg570:any list) (arg571:any list) (arg572:any list) (arg573:any list) (arg574:any list) (arg575:nat), rotate (arg575) (((((((((arg568 @ (any1::(Nil))) @ (any2::(Nil))) @ arg569) @ arg570) @ arg571) @ arg572) @ arg573) @ arg574)) = (any1::(any2::rotate (arg575) (((((((arg568 @ arg569) @ arg570) @ arg571) @ arg572) @ arg573) @ arg574))))
Model : any1: 2, any2: 5, arg568: (Nil), arg569: (Nil), arg570: (5::(Nil)), arg571: (Nil), arg572: (0::(Nil)), arg573: (Nil), arg574: (Nil), arg575: ZERO
Model : any1: 3, any2: 4, arg568: (Nil), arg569: (0::(Nil)), arg570: (Nil), arg571: (Nil), arg572: (Nil), arg573: (Nil), arg574: (Nil), arg575: ZERO
Model : any1: 4, any2: 6, arg568: (Nil), arg569: (Nil), arg570: (0::(Nil)), arg571: (Nil), arg572: (Nil), arg573: (Nil), arg574: (Nil), arg575: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (2::(Nil))) @ (5::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (2::(5::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(4::rotate (ZERO) ((((((((Nil) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (4::(Nil))) @ (6::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(6::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002394 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any7 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 372


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any7 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg568:any list) (arg569:any list) (arg570:any list) (arg571:any list) (arg572:any list) (arg573:any list) (arg574:any list) (arg575:nat), rotate (arg575) (((((((((arg568 @ (any1::(Nil))) @ (any2::(Nil))) @ arg569) @ arg570) @ arg571) @ arg572) @ arg573) @ arg574)) = (any1::(any2::rotate (arg575) (((((((arg568 @ arg569) @ arg570) @ arg571) @ arg572) @ arg573) @ arg574))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 373


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 374


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any6 : any
---------------------------------------
forall (any3:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 375


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any7 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any4
intro any7
Lemma : forall (any1:any) (any2:any) (arg576:any list) (arg577:any list) (arg578:any list) (arg579:any list) (arg580:any list) (arg581:any list) (arg582:any list) (arg583:nat), rotate (arg583) (((((((((arg576 @ (any1::(Nil))) @ (any2::(Nil))) @ arg577) @ arg578) @ arg579) @ arg580) @ arg581) @ arg582)) = (any1::(any2::rotate (arg583) (((((((arg576 @ arg577) @ arg578) @ arg579) @ arg580) @ arg581) @ arg582))))
Model : any1: 5, any2: 7, arg576: (Nil), arg577: (Nil), arg578: (1::(Nil)), arg579: (Nil), arg580: (Nil), arg581: (Nil), arg582: (Nil), arg583: SUCC (ZERO)
Model : any1: 8, any2: 8, arg576: (Nil), arg577: (Nil), arg578: (Nil), arg579: (Nil), arg580: (Nil), arg581: (Nil), arg582: (Nil), arg583: ZERO
Model : any1: 8, any2: 7, arg576: (Nil), arg577: (Nil), arg578: (Nil), arg579: (7::(Nil)), arg580: (2::(Nil)), arg581: (Nil), arg582: (Nil), arg583: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((Nil) @ (5::(Nil))) @ (7::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(7::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(8::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil))) = (8::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.003122 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 1, any2: 1, any3: 5, any4: 0, any5: 0, any6: 2, any7: 0, any8: 4, any_list2: (Nil)
Model : any1: 0, any2: 0, any3: 2, any4: 0, any5: 1, any6: 1, any7: 4, any8: 5, any_list2: (Nil)
Model : any1: 0, any2: 4, any3: 1, any4: 5, any5: 1, any6: 0, any7: 5, any8: 0, any_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (4::(Nil)))) = (1::(1::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (5::(Nil)))) = (0::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (5::(Nil))))))
rotate (len ((0::(Nil)))) (((((((((((0::(Nil)) @ (Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil)))) = (0::(4::rotate (len ((0::(Nil)))) (((((((((0::(Nil)) @ (Nil)) @ (1::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil))))))
Simplifying took 0.008058 seconds
Result : true
advanced_generalize done
=================================================
Progress: 376


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any5 : any
---------------------------------------
forall (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any5 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 377


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any5 : any
---------------------------------------
forall (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any5 : any
any7 : any
---------------------------------------
forall (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg584:any list) (arg585:any list) (arg586:any list) (arg587:any list) (arg588:any list) (arg589:any list) (arg590:any list) (arg591:nat), rotate (arg591) (((((((((arg584 @ (any1::(Nil))) @ (any2::(Nil))) @ arg585) @ arg586) @ arg587) @ arg588) @ arg589) @ arg590)) = (any1::(any2::rotate (arg591) (((((((arg584 @ arg585) @ arg586) @ arg587) @ arg588) @ arg589) @ arg590))))
Model : any1: 1, any2: 1, arg584: (Nil), arg585: (Nil), arg586: (0::(Nil)), arg587: (Nil), arg588: (Nil), arg589: (Nil), arg590: (Nil), arg591: SUCC (ZERO)
Model : any1: 7, any2: 8, arg584: (Nil), arg585: (Nil), arg586: (Nil), arg587: (Nil), arg588: (3::(Nil)), arg589: (Nil), arg590: (Nil), arg591: ZERO
Model : any1: 7, any2: 3, arg584: (Nil), arg585: (Nil), arg586: (Nil), arg587: (4::(Nil)), arg588: (Nil), arg589: (Nil), arg590: (0::(Nil)), arg591: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((Nil) @ (1::(Nil))) @ (1::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(1::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (7::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (7::(8::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (7::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (7::(3::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))))))
Simplifying took 0.002646 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 0, any2: 6, any3: 0, any4: 0, any5: 6, any6: 0, any7: 5, any8: 4, any_list2: (Nil)
Model : any1: 7, any2: 0, any3: 5, any4: 4, any5: 7, any6: 1, any7: 5, any8: 5, any_list2: (Nil)
Model : any1: 5, any2: 8, any3: 1, any4: 1, any5: 5, any6: 7, any7: 1, any8: 8, any_list2: (0::(8::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (4::(Nil)))) = (0::(6::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (5::(Nil)))) = (7::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (5::(Nil))))))
rotate (len ((0::(8::(Nil))))) (((((((((((0::(8::(Nil))) @ (Nil)) @ (5::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (8::(Nil)))) = (5::(8::rotate (len ((0::(8::(Nil))))) (((((((((0::(8::(Nil))) @ (Nil)) @ (1::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (8::(Nil))))))
Simplifying took 0.014774 seconds
Result : true
advanced_generalize done
=================================================
Progress: 378


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any6 : any
any7 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg592:any list) (arg593:any list) (arg594:any list) (arg595:any list) (arg596:any list) (arg597:any list) (arg598:any list) (arg599:nat), rotate (arg599) (((((((((arg592 @ (any1::(Nil))) @ (any2::(Nil))) @ arg593) @ arg594) @ arg595) @ arg596) @ arg597) @ arg598)) = (any1::(any2::rotate (arg599) (((((((arg592 @ arg593) @ arg594) @ arg595) @ arg596) @ arg597) @ arg598))))
Model : any1: 0, any2: 4, arg592: (4::(Nil)), arg593: (Nil), arg594: (8::(Nil)), arg595: (Nil), arg596: (Nil), arg597: (Nil), arg598: (0::(Nil)), arg599: ZERO
Model : any1: 0, any2: 1, arg592: (Nil), arg593: (Nil), arg594: (8::(Nil)), arg595: (Nil), arg596: (Nil), arg597: (Nil), arg598: (Nil), arg599: ZERO
Model : any1: 2, any2: 0, arg592: (Nil), arg593: (Nil), arg594: (Nil), arg595: (5::(Nil)), arg596: (Nil), arg597: (0::(Nil)), arg598: (Nil), arg599: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((4::(Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (0::(4::rotate (ZERO) ((((((((4::(Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(1::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (2::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (2::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)))))
Simplifying took 0.003207 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 0, any2: 0, any3: 3, any4: 7, any5: 6, any6: 5, any7: 2, any8: 6, any_list2: (Nil)
Model : any1: 6, any2: 7, any3: 6, any4: 8, any5: 5, any6: 8, any7: 7, any8: 7, any_list2: (Nil)
Model : any1: 5, any2: 3, any3: 2, any4: 4, any5: 2, any6: 2, any7: 6, any8: 4, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (6::(Nil)))) = (0::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (7::(Nil)))) = (6::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (4::(Nil)))) = (5::(3::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (4::(Nil))))))
Simplifying took 0.009623 seconds
Result : true
advanced_generalize done
=================================================
Progress: 379


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 380


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any2:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 381


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any7 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any4
intro any7
Lemma : forall (any1:any) (any2:any) (arg600:any list) (arg601:any list) (arg602:any list) (arg603:any list) (arg604:any list) (arg605:any list) (arg606:any list) (arg607:nat), rotate (arg607) (((((((((arg600 @ (any1::(Nil))) @ (any2::(Nil))) @ arg601) @ arg602) @ arg603) @ arg604) @ arg605) @ arg606)) = (any1::(any2::rotate (arg607) (((((((arg600 @ arg601) @ arg602) @ arg603) @ arg604) @ arg605) @ arg606))))
Model : any1: 5, any2: 4, arg600: (7::(Nil)), arg601: (1::(Nil)), arg602: (Nil), arg603: (Nil), arg604: (Nil), arg605: (Nil), arg606: (Nil), arg607: SUCC (ZERO)
Model : any1: 7, any2: 0, arg600: (1::(Nil)), arg601: (5::(4::(Nil))), arg602: (Nil), arg603: (Nil), arg604: (0::(Nil)), arg605: (7::(Nil)), arg606: (1::(8::(5::(Nil)))), arg607: ZERO
Model : any1: 8, any2: 0, arg600: (Nil), arg601: (Nil), arg602: (Nil), arg603: (Nil), arg604: (Nil), arg605: (Nil), arg606: (Nil), arg607: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((7::(Nil)) @ (5::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(4::rotate (SUCC (ZERO)) ((((((((7::(Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((1::(Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (5::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (1::(8::(5::(Nil)))))) = (7::(0::rotate (ZERO) ((((((((1::(Nil)) @ (5::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (1::(8::(5::(Nil))))))))
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.005873 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 0, any2: 4, any3: 5, any4: 0, any5: 0, any6: 5, any7: 0, any8: 5, any_list2: (Nil)
Model : any1: 7, any2: 2, any3: 0, any4: 1, any5: 3, any6: 1, any7: 6, any8: 1, any_list2: (Nil)
Model : any1: 2, any2: 2, any3: 0, any4: 5, any5: 6, any6: 4, any7: 0, any8: 8, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (5::(Nil)))) = (0::(4::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (1::(Nil)))) = (7::(2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (8::(Nil)))) = (2::(2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (8::(Nil))))))
Simplifying took 0.007626 seconds
Result : true
advanced_generalize done
=================================================
Progress: 382


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any5 : any
---------------------------------------
forall (any2:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 383


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any5 : any
---------------------------------------
forall (any2:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any5 : any
any7 : any
---------------------------------------
forall (any2:any) (any4:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg608:any list) (arg609:any list) (arg610:any list) (arg611:any list) (arg612:any list) (arg613:any list) (arg614:any list) (arg615:nat), rotate (arg615) (((((((((arg608 @ (any1::(Nil))) @ (any2::(Nil))) @ arg609) @ arg610) @ arg611) @ arg612) @ arg613) @ arg614)) = (any1::(any2::rotate (arg615) (((((((arg608 @ arg609) @ arg610) @ arg611) @ arg612) @ arg613) @ arg614))))
Model : any1: 7, any2: 7, arg608: (2::(Nil)), arg609: (Nil), arg610: (Nil), arg611: (Nil), arg612: (Nil), arg613: (Nil), arg614: (1::(Nil)), arg615: ZERO
Model : any1: 7, any2: 7, arg608: (Nil), arg609: (Nil), arg610: (Nil), arg611: (Nil), arg612: (1::(Nil)), arg613: (Nil), arg614: (Nil), arg615: ZERO
Model : any1: 5, any2: 0, arg608: (Nil), arg609: (6::(Nil)), arg610: (Nil), arg611: (Nil), arg612: (Nil), arg613: (Nil), arg614: (Nil), arg615: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((2::(Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (7::(7::rotate (ZERO) ((((((((2::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))))))
rotate (ZERO) ((((((((((Nil) @ (7::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil))) = (7::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (5::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(0::rotate (SUCC (ZERO)) ((((((((Nil) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003225 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 7, any2: 0, any3: 4, any4: 2, any5: 0, any6: 1, any7: 6, any8: 3, any_list2: (Nil)
Model : any1: 1, any2: 6, any3: 0, any4: 5, any5: 8, any6: 3, any7: 0, any8: 6, any_list2: (8::(5::(Nil)))
Model : any1: 2, any2: 0, any3: 6, any4: 2, any5: 8, any6: 0, any7: 6, any8: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (3::(Nil)))) = (7::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (3::(Nil))))))
rotate (len ((8::(5::(Nil))))) (((((((((((8::(5::(Nil))) @ (Nil)) @ (1::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (6::(Nil)))) = (1::(6::rotate (len ((8::(5::(Nil))))) (((((((((8::(5::(Nil))) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil)))) = (2::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))))))
Simplifying took 0.014568 seconds
Result : true
advanced_generalize done
=================================================
Progress: 384


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any6 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg616:any list) (arg617:any list) (arg618:any list) (arg619:any list) (arg620:any list) (arg621:any list) (arg622:any list) (arg623:nat), rotate (arg623) (((((((((arg616 @ (any1::(Nil))) @ (any2::(Nil))) @ arg617) @ arg618) @ arg619) @ arg620) @ arg621) @ arg622)) = (any1::(any2::rotate (arg623) (((((((arg616 @ arg617) @ arg618) @ arg619) @ arg620) @ arg621) @ arg622))))
Model : any1: 0, any2: 6, arg616: (Nil), arg617: (Nil), arg618: (Nil), arg619: (Nil), arg620: (5::(Nil)), arg621: (Nil), arg622: (Nil), arg623: SUCC (SUCC (ZERO))
Model : any1: 5, any2: 1, arg616: (Nil), arg617: (Nil), arg618: (Nil), arg619: (Nil), arg620: (Nil), arg621: (Nil), arg622: (Nil), arg623: ZERO
Model : any1: 7, any2: 4, arg616: (Nil), arg617: (Nil), arg618: (Nil), arg619: (Nil), arg620: (5::(0::(Nil))), arg621: (Nil), arg622: (Nil), arg623: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (SUCC (ZERO))) ((((((((((Nil) @ (0::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil))) = (0::(6::rotate (SUCC (SUCC (ZERO))) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (5::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(1::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (7::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(0::(Nil)))) @ (Nil)) @ (Nil))) = (7::(4::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(0::(Nil)))) @ (Nil)) @ (Nil)))))
Simplifying took 0.002759 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 7, any2: 2, any3: 1, any4: 4, any5: 0, any6: 3, any7: 0, any8: 0, any_list2: (Nil)
Model : any1: 1, any2: 7, any3: 7, any4: 7, any5: 1, any6: 0, any7: 5, any8: 7, any_list2: (Nil)
Model : any1: 2, any2: 0, any3: 7, any4: 0, any5: 0, any6: 3, any7: 0, any8: 1, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (7::(2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (7::(Nil)))) = (1::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (1::(Nil)))) = (2::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (1::(Nil))))))
Simplifying took 0.007643 seconds
Result : true
advanced_generalize done
=================================================
Progress: 385


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 386


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any4
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg624:any list) (arg625:any list) (arg626:any list) (arg627:any list) (arg628:any list) (arg629:any list) (arg630:any list) (arg631:nat), rotate (arg631) (((((((((arg624 @ (any1::(Nil))) @ (any2::(Nil))) @ arg625) @ arg626) @ arg627) @ arg628) @ arg629) @ arg630)) = (any1::(any2::rotate (arg631) (((((((arg624 @ arg625) @ arg626) @ arg627) @ arg628) @ arg629) @ arg630))))
Model : any1: 1, any2: 2, arg624: (Nil), arg625: (Nil), arg626: (Nil), arg627: (0::(Nil)), arg628: (Nil), arg629: (Nil), arg630: (Nil), arg631: SUCC (ZERO)
Model : any1: 7, any2: 6, arg624: (2::(Nil)), arg625: (Nil), arg626: (Nil), arg627: (2::(Nil)), arg628: (Nil), arg629: (Nil), arg630: (Nil), arg631: ZERO
Model : any1: 6, any2: 0, arg624: (Nil), arg625: (1::(Nil)), arg626: (Nil), arg627: (Nil), arg628: (Nil), arg629: (Nil), arg630: (Nil), arg631: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((Nil) @ (1::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(2::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((2::(Nil)) @ (7::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(6::rotate (ZERO) ((((((((2::(Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (6::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(0::rotate (ZERO) ((((((((Nil) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002822 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 2, any2: 5, any3: 0, any4: 5, any5: 2, any6: 5, any7: 7, any8: 0, any_list2: (0::(Nil))
Model : any1: 0, any2: 0, any3: 2, any4: 8, any5: 7, any6: 0, any7: 8, any8: 8, any_list2: (Nil)
Model : any1: 8, any2: 0, any3: 5, any4: 6, any5: 0, any6: 4, any7: 0, any8: 4, any_list2: (2::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((0::(Nil)))) (((((((((((0::(Nil)) @ (Nil)) @ (2::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (0::(Nil)))) = (2::(5::rotate (len ((0::(Nil)))) (((((((((0::(Nil)) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (8::(Nil)))) = (0::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (8::(Nil))))))
rotate (len ((2::(Nil)))) (((((((((((2::(Nil)) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (4::(Nil)))) = (8::(0::rotate (len ((2::(Nil)))) (((((((((2::(Nil)) @ (Nil)) @ (5::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (4::(Nil))))))
Simplifying took 0.012259 seconds
Result : true
advanced_generalize done
=================================================
Progress: 387


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any4
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg632:any list) (arg633:any list) (arg634:any list) (arg635:any list) (arg636:any list) (arg637:any list) (arg638:any list) (arg639:nat), rotate (arg639) (((((((((arg632 @ (any1::(Nil))) @ (any2::(Nil))) @ arg633) @ arg634) @ arg635) @ arg636) @ arg637) @ arg638)) = (any1::(any2::rotate (arg639) (((((((arg632 @ arg633) @ arg634) @ arg635) @ arg636) @ arg637) @ arg638))))
Model : any1: 3, any2: 3, arg632: (Nil), arg633: (4::(Nil)), arg634: (0::(5::(Nil))), arg635: (Nil), arg636: (Nil), arg637: (Nil), arg638: (8::(6::(Nil))), arg639: ZERO
Model : any1: 8, any2: 1, arg632: (Nil), arg633: (Nil), arg634: (Nil), arg635: (Nil), arg636: (Nil), arg637: (6::(Nil)), arg638: (Nil), arg639: ZERO
Model : any1: 0, any2: 0, arg632: (Nil), arg633: (3::(Nil)), arg634: (2::(Nil)), arg635: (Nil), arg636: (Nil), arg637: (1::(Nil)), arg638: (0::(Nil)), arg639: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (0::(5::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(6::(Nil))))) = (3::(3::rotate (ZERO) ((((((((Nil) @ (4::(Nil))) @ (0::(5::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(6::(Nil)))))))
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil))) = (8::(1::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (0::(Nil)))) = (0::(0::rotate (ZERO) ((((((((Nil) @ (3::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (0::(Nil))))))
Simplifying took 0.004147 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 388


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg632:any list) (arg633:any list) (arg634:any list) (arg635:any list) (arg636:any list) (arg637:any list) (arg638:any list) (arg639:nat), rotate (arg639) (((((((((arg632 @ (any1::(Nil))) @ (any2::(Nil))) @ arg633) @ arg634) @ arg635) @ arg636) @ arg637) @ arg638)) = (any1::(any2::rotate (arg639) (((((((arg632 @ arg633) @ arg634) @ arg635) @ arg636) @ arg637) @ arg638))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 389


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg640:any list) (arg641:any list) (arg642:any list) (arg643:any list) (arg644:any list) (arg645:any list) (arg646:any list) (arg647:nat), rotate (arg647) (((((((((arg640 @ (any1::(Nil))) @ (any2::(Nil))) @ arg641) @ arg642) @ arg643) @ arg644) @ arg645) @ arg646)) = (any1::(any2::rotate (arg647) (((((((arg640 @ arg641) @ arg642) @ arg643) @ arg644) @ arg645) @ arg646))))
Model : any1: 7, any2: 1, arg640: (Nil), arg641: (Nil), arg642: (Nil), arg643: (Nil), arg644: (Nil), arg645: (Nil), arg646: (Nil), arg647: ZERO
Model : any1: 7, any2: 3, arg640: (Nil), arg641: (Nil), arg642: (0::(Nil)), arg643: (6::(7::(Nil))), arg644: (Nil), arg645: (Nil), arg646: (Nil), arg647: SUCC (ZERO)
Model : any1: 3, any2: 7, arg640: (Nil), arg641: (Nil), arg642: (0::(Nil)), arg643: (Nil), arg644: (7::(Nil)), arg645: (Nil), arg646: (Nil), arg647: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (7::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(1::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (7::(Nil))) @ (3::(Nil))) @ (Nil)) @ (0::(Nil))) @ (6::(7::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(3::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (6::(7::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (7::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil))) = (3::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.004055 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 2, any2: 0, any3: 5, any4: 3, any5: 2, any6: 5, any7: 7, any8: 0, any_list2: (0::(Nil))
Model : any1: 0, any2: 6, any3: 2, any4: 6, any5: 1, any6: 8, any7: 0, any8: 3, any_list2: (7::(Nil))
Model : any1: 3, any2: 2, any3: 3, any4: 0, any5: 1, any6: 3, any7: 3, any8: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((0::(Nil)))) (((((((((((0::(Nil)) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (0::(Nil)))) = (2::(0::rotate (len ((0::(Nil)))) (((((((((0::(Nil)) @ (Nil)) @ (5::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (0::(Nil))))))
rotate (len ((7::(Nil)))) (((((((((((7::(Nil)) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (3::(Nil)))) = (0::(6::rotate (len ((7::(Nil)))) (((((((((7::(Nil)) @ (Nil)) @ (2::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (0::(Nil)))) = (3::(2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (0::(Nil))))))
Simplifying took 0.012038 seconds
Result : true
advanced_generalize done
=================================================
Progress: 390


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 391


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 392


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any7 : any
---------------------------------------
forall (any1:any) (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any4
intro any7
Lemma : forall (any1:any) (any2:any) (arg648:any list) (arg649:any list) (arg650:any list) (arg651:any list) (arg652:any list) (arg653:any list) (arg654:any list) (arg655:nat), rotate (arg655) (((((((((arg648 @ (any1::(Nil))) @ (any2::(Nil))) @ arg649) @ arg650) @ arg651) @ arg652) @ arg653) @ arg654)) = (any1::(any2::rotate (arg655) (((((((arg648 @ arg649) @ arg650) @ arg651) @ arg652) @ arg653) @ arg654))))
Model : any1: 0, any2: 0, arg648: (Nil), arg649: (Nil), arg650: (1::(Nil)), arg651: (Nil), arg652: (Nil), arg653: (Nil), arg654: (Nil), arg655: ZERO
Model : any1: 8, any2: 7, arg648: (Nil), arg649: (Nil), arg650: (Nil), arg651: (Nil), arg652: (Nil), arg653: (Nil), arg654: (Nil), arg655: SUCC (ZERO)
Model : any1: 3, any2: 7, arg648: (Nil), arg649: (Nil), arg650: (Nil), arg651: (2::(Nil)), arg652: (Nil), arg653: (Nil), arg654: (Nil), arg655: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (8::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(7::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002097 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 6, any2: 6, any3: 5, any4: 2, any5: 3, any6: 8, any7: 4, any8: 0, any_list2: (Nil)
Model : any1: 8, any2: 3, any3: 6, any4: 4, any5: 1, any6: 1, any7: 0, any8: 0, any_list2: (5::(Nil))
Model : any1: 4, any2: 5, any3: 6, any4: 2, any5: 4, any6: 2, any7: 4, any8: 6, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (0::(Nil)))) = (6::(6::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (0::(Nil))))))
rotate (len ((5::(Nil)))) (((((((((((5::(Nil)) @ (Nil)) @ (8::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (8::(3::rotate (len ((5::(Nil)))) (((((((((5::(Nil)) @ (Nil)) @ (6::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (6::(Nil)))) = (4::(5::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (6::(Nil))))))
Simplifying took 0.010501 seconds
Result : true
advanced_generalize done
=================================================
Progress: 393


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 394


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any4:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg656:any list) (arg657:any list) (arg658:any list) (arg659:any list) (arg660:any list) (arg661:any list) (arg662:any list) (arg663:nat), rotate (arg663) (((((((((arg656 @ (any1::(Nil))) @ (any2::(Nil))) @ arg657) @ arg658) @ arg659) @ arg660) @ arg661) @ arg662)) = (any1::(any2::rotate (arg663) (((((((arg656 @ arg657) @ arg658) @ arg659) @ arg660) @ arg661) @ arg662))))
Model : any1: 3, any2: 2, arg656: (Nil), arg657: (Nil), arg658: (Nil), arg659: (Nil), arg660: (Nil), arg661: (5::(Nil)), arg662: (Nil), arg663: ZERO
Model : any1: 6, any2: 5, arg656: (Nil), arg657: (Nil), arg658: (Nil), arg659: (Nil), arg660: (Nil), arg661: (Nil), arg662: (Nil), arg663: ZERO
Model : any1: 5, any2: 3, arg656: (Nil), arg657: (Nil), arg658: (0::(Nil)), arg659: (Nil), arg660: (Nil), arg661: (Nil), arg662: (Nil), arg663: SUCC (SUCC (ZERO))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (3::(2::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (6::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(5::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (SUCC (ZERO))) ((((((((((Nil) @ (5::(Nil))) @ (3::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(3::rotate (SUCC (SUCC (ZERO))) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002171 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 1, any2: 2, any3: 6, any4: 3, any5: 2, any6: 0, any7: 6, any8: 1, any_list2: (Nil)
Model : any1: 0, any2: 0, any3: 7, any4: 7, any5: 0, any6: 0, any7: 0, any8: 8, any_list2: (Nil)
Model : any1: 8, any2: 6, any3: 0, any4: 7, any5: 7, any6: 5, any7: 7, any8: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (1::(Nil)))) = (1::(2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil)))) = (0::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (5::(Nil)))) = (8::(6::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (5::(Nil))))))
Simplifying took 0.008095 seconds
Result : true
advanced_generalize done
=================================================
Progress: 395


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any6 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg664:any list) (arg665:any list) (arg666:any list) (arg667:any list) (arg668:any list) (arg669:any list) (arg670:any list) (arg671:nat), rotate (arg671) (((((((((arg664 @ (any1::(Nil))) @ (any2::(Nil))) @ arg665) @ arg666) @ arg667) @ arg668) @ arg669) @ arg670)) = (any1::(any2::rotate (arg671) (((((((arg664 @ arg665) @ arg666) @ arg667) @ arg668) @ arg669) @ arg670))))
Model : any1: 3, any2: 2, arg664: (Nil), arg665: (Nil), arg666: (5::(Nil)), arg667: (Nil), arg668: (5::(Nil)), arg669: (Nil), arg670: (Nil), arg671: ZERO
Model : any1: 5, any2: 4, arg664: (2::(Nil)), arg665: (Nil), arg666: (Nil), arg667: (Nil), arg668: (Nil), arg669: (Nil), arg670: (Nil), arg671: ZERO
Model : any1: 5, any2: 8, arg664: (Nil), arg665: (Nil), arg666: (5::(Nil)), arg667: (Nil), arg668: (8::(Nil)), arg669: (Nil), arg670: (1::(Nil)), arg671: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (2::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil))) = (3::(2::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((2::(Nil)) @ (5::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(4::rotate (ZERO) ((((((((2::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (5::(Nil))) @ (8::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (1::(Nil)))) = (5::(8::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (1::(Nil))))))
Simplifying took 0.003763 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 0, any2: 4, any3: 8, any4: 2, any5: 4, any6: 0, any7: 0, any8: 6, any_list2: (Nil)
Model : any1: 5, any2: 6, any3: 8, any4: 6, any5: 5, any6: 7, any7: 0, any8: 1, any_list2: (Nil)
Model : any1: 6, any2: 0, any3: 1, any4: 8, any5: 0, any6: 0, any7: 6, any8: 6, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil)))) = (0::(4::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (1::(Nil)))) = (5::(6::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (6::(Nil)))) = (6::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (6::(Nil))))))
Simplifying took 0.008173 seconds
Result : true
advanced_generalize done
=================================================
Progress: 396


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 397


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any4
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg672:any list) (arg673:any list) (arg674:any list) (arg675:any list) (arg676:any list) (arg677:any list) (arg678:any list) (arg679:nat), rotate (arg679) (((((((((arg672 @ (any1::(Nil))) @ (any2::(Nil))) @ arg673) @ arg674) @ arg675) @ arg676) @ arg677) @ arg678)) = (any1::(any2::rotate (arg679) (((((((arg672 @ arg673) @ arg674) @ arg675) @ arg676) @ arg677) @ arg678))))
Model : any1: 3, any2: 5, arg672: (Nil), arg673: (Nil), arg674: (Nil), arg675: (Nil), arg676: (Nil), arg677: (Nil), arg678: (Nil), arg679: ZERO
Model : any1: 0, any2: 2, arg672: (Nil), arg673: (Nil), arg674: (Nil), arg675: (Nil), arg676: (Nil), arg677: (Nil), arg678: (Nil), arg679: ZERO
Model : any1: 5, any2: 0, arg672: (Nil), arg673: (Nil), arg674: (Nil), arg675: (Nil), arg676: (Nil), arg677: (Nil), arg678: (Nil), arg679: SUCC (SUCC (ZERO))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(5::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(2::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (SUCC (ZERO))) ((((((((((Nil) @ (5::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(0::rotate (SUCC (SUCC (ZERO))) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001493 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 398


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg672:any list) (arg673:any list) (arg674:any list) (arg675:any list) (arg676:any list) (arg677:any list) (arg678:any list) (arg679:nat), rotate (arg679) (((((((((arg672 @ (any1::(Nil))) @ (any2::(Nil))) @ arg673) @ arg674) @ arg675) @ arg676) @ arg677) @ arg678)) = (any1::(any2::rotate (arg679) (((((((arg672 @ arg673) @ arg674) @ arg675) @ arg676) @ arg677) @ arg678))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 399


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any4
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg680:any list) (arg681:any list) (arg682:any list) (arg683:any list) (arg684:any list) (arg685:any list) (arg686:any list) (arg687:nat), rotate (arg687) (((((((((arg680 @ (any1::(Nil))) @ (any2::(Nil))) @ arg681) @ arg682) @ arg683) @ arg684) @ arg685) @ arg686)) = (any1::(any2::rotate (arg687) (((((((arg680 @ arg681) @ arg682) @ arg683) @ arg684) @ arg685) @ arg686))))
Model : any1: 8, any2: 0, arg680: (Nil), arg681: (Nil), arg682: (Nil), arg683: (3::(Nil)), arg684: (Nil), arg685: (Nil), arg686: (Nil), arg687: ZERO
Model : any1: 7, any2: 0, arg680: (Nil), arg681: (Nil), arg682: (Nil), arg683: (Nil), arg684: (5::(Nil)), arg685: (Nil), arg686: (Nil), arg687: SUCC (ZERO)
Model : any1: 6, any2: 0, arg680: (Nil), arg681: (Nil), arg682: (Nil), arg683: (Nil), arg684: (Nil), arg685: (Nil), arg686: (1::(Nil)), arg687: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (7::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil))) = (7::(0::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (6::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (6::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))))))
Simplifying took 0.002109 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 7, any2: 7, any3: 1, any4: 8, any5: 0, any6: 1, any7: 5, any8: 3, any_list2: (Nil)
Model : any1: 7, any2: 1, any3: 7, any4: 0, any5: 7, any6: 0, any7: 3, any8: 4, any_list2: (Nil)
Model : any1: 0, any2: 3, any3: 2, any4: 5, any5: 2, any6: 7, any7: 2, any8: 6, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (3::(Nil)))) = (7::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (4::(Nil)))) = (7::(1::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (6::(Nil)))) = (0::(3::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (6::(Nil))))))
Simplifying took 0.008275 seconds
Result : true
advanced_generalize done
=================================================
Progress: 400


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg688:any list) (arg689:any list) (arg690:any list) (arg691:any list) (arg692:any list) (arg693:any list) (arg694:any list) (arg695:nat), rotate (arg695) (((((((((arg688 @ (any1::(Nil))) @ (any2::(Nil))) @ arg689) @ arg690) @ arg691) @ arg692) @ arg693) @ arg694)) = (any1::(any2::rotate (arg695) (((((((arg688 @ arg689) @ arg690) @ arg691) @ arg692) @ arg693) @ arg694))))
Model : any1: 2, any2: 5, arg688: (Nil), arg689: (Nil), arg690: (Nil), arg691: (Nil), arg692: (0::(3::(Nil))), arg693: (7::(Nil)), arg694: (Nil), arg695: ZERO
Model : any1: 0, any2: 5, arg688: (Nil), arg689: (Nil), arg690: (0::(Nil)), arg691: (Nil), arg692: (Nil), arg693: (Nil), arg694: (2::(Nil)), arg695: SUCC (ZERO)
Model : any1: 2, any2: 7, arg688: (Nil), arg689: (Nil), arg690: (Nil), arg691: (Nil), arg692: (Nil), arg693: (Nil), arg694: (Nil), arg695: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (2::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(3::(Nil)))) @ (7::(Nil))) @ (Nil))) = (2::(5::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(3::(Nil)))) @ (7::(Nil))) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (0::(Nil))) @ (5::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil)))) = (0::(5::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))))))
rotate (ZERO) ((((((((((Nil) @ (2::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002636 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 7, any2: 7, any3: 1, any4: 7, any5: 7, any6: 7, any7: 1, any8: 0, any_list2: (Nil)
Model : any1: 8, any2: 0, any3: 3, any4: 3, any5: 2, any6: 2, any7: 0, any8: 1, any_list2: (Nil)
Model : any1: 6, any2: 1, any3: 2, any4: 0, any5: 0, any6: 2, any7: 6, any8: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (0::(Nil)))) = (7::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (1::(Nil)))) = (8::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (5::(Nil)))) = (6::(1::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (5::(Nil))))))
Simplifying took 0.007621 seconds
Result : true
advanced_generalize done
=================================================
Progress: 401


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 402


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any4
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg696:any list) (arg697:any list) (arg698:any list) (arg699:any list) (arg700:any list) (arg701:any list) (arg702:any list) (arg703:nat), rotate (arg703) (((((((((arg696 @ (any1::(Nil))) @ (any2::(Nil))) @ arg697) @ arg698) @ arg699) @ arg700) @ arg701) @ arg702)) = (any1::(any2::rotate (arg703) (((((((arg696 @ arg697) @ arg698) @ arg699) @ arg700) @ arg701) @ arg702))))
Model : any1: 7, any2: 7, arg696: (Nil), arg697: (Nil), arg698: (2::(Nil)), arg699: (7::(Nil)), arg700: (Nil), arg701: (Nil), arg702: (Nil), arg703: ZERO
Model : any1: 5, any2: 0, arg696: (Nil), arg697: (Nil), arg698: (1::(Nil)), arg699: (Nil), arg700: (8::(Nil)), arg701: (Nil), arg702: (Nil), arg703: ZERO
Model : any1: 0, any2: 6, arg696: (5::(Nil)), arg697: (Nil), arg698: (Nil), arg699: (Nil), arg700: (3::(1::(Nil))), arg701: (Nil), arg702: (0::(Nil)), arg703: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (7::(Nil))) @ (7::(Nil))) @ (Nil)) @ (2::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (5::(Nil))) @ (0::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (5::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((5::(Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(1::(Nil)))) @ (Nil)) @ (0::(Nil)))) = (0::(6::rotate (ZERO) ((((((((5::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(1::(Nil)))) @ (Nil)) @ (0::(Nil))))))
Simplifying took 0.004236 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 7, any2: 5, any3: 1, any4: 6, any5: 0, any6: 5, any7: 6, any8: 4, any_list2: (7::(Nil))
Model : any1: 6, any2: 3, any3: 8, any4: 0, any5: 0, any6: 6, any7: 5, any8: 3, any_list2: (Nil)
Model : any1: 7, any2: 6, any3: 0, any4: 2, any5: 6, any6: 8, any7: 8, any8: 4, any_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((7::(Nil)))) (((((((((((7::(Nil)) @ (Nil)) @ (7::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (4::(Nil)))) = (7::(5::rotate (len ((7::(Nil)))) (((((((((7::(Nil)) @ (Nil)) @ (1::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (3::(Nil)))) = (6::(3::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (3::(Nil))))))
rotate (len ((0::(Nil)))) (((((((((((0::(Nil)) @ (Nil)) @ (7::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (4::(Nil)))) = (7::(6::rotate (len ((0::(Nil)))) (((((((((0::(Nil)) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (4::(Nil))))))
Simplifying took 0.013915 seconds
Result : true
advanced_generalize done
=================================================
Progress: 403


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any4
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg704:any list) (arg705:any list) (arg706:any list) (arg707:any list) (arg708:any list) (arg709:any list) (arg710:any list) (arg711:nat), rotate (arg711) (((((((((arg704 @ (any1::(Nil))) @ (any2::(Nil))) @ arg705) @ arg706) @ arg707) @ arg708) @ arg709) @ arg710)) = (any1::(any2::rotate (arg711) (((((((arg704 @ arg705) @ arg706) @ arg707) @ arg708) @ arg709) @ arg710))))
Model : any1: 6, any2: 1, arg704: (Nil), arg705: (Nil), arg706: (Nil), arg707: (Nil), arg708: (7::(Nil)), arg709: (Nil), arg710: (8::(8::(Nil))), arg711: ZERO
Model : any1: 0, any2: 1, arg704: (Nil), arg705: (1::(Nil)), arg706: (Nil), arg707: (Nil), arg708: (Nil), arg709: (Nil), arg710: (Nil), arg711: ZERO
Model : any1: 7, any2: 7, arg704: (2::(Nil)), arg705: (Nil), arg706: (Nil), arg707: (Nil), arg708: (Nil), arg709: (7::(3::(Nil))), arg710: (Nil), arg711: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (6::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (8::(8::(Nil))))) = (6::(1::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (8::(8::(Nil)))))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(1::rotate (ZERO) ((((((((Nil) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((2::(Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(3::(Nil)))) @ (Nil))) = (7::(7::rotate (ZERO) ((((((((2::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(3::(Nil)))) @ (Nil)))))
Simplifying took 0.003309 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 0, any2: 3, any3: 4, any4: 7, any5: 3, any6: 0, any7: 2, any8: 7, any_list2: (Nil)
Model : any1: 2, any2: 0, any3: 4, any4: 0, any5: 8, any6: 0, any7: 0, any8: 0, any_list2: (Nil)
Model : any1: 0, any2: 8, any3: 0, any4: 5, any5: 1, any6: 0, any7: 8, any8: 7, any_list2: (4::(0::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (7::(Nil)))) = (0::(3::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (2::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((4::(0::(Nil))))) (((((((((((4::(0::(Nil))) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (7::(Nil)))) = (0::(8::rotate (len ((4::(0::(Nil))))) (((((((((4::(0::(Nil))) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (7::(Nil))))))
Simplifying took 0.012475 seconds
Result : true
advanced_generalize done
=================================================
Progress: 404


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg712:any list) (arg713:any list) (arg714:any list) (arg715:any list) (arg716:any list) (arg717:any list) (arg718:any list) (arg719:nat), rotate (arg719) (((((((((arg712 @ (any1::(Nil))) @ (any2::(Nil))) @ arg713) @ arg714) @ arg715) @ arg716) @ arg717) @ arg718)) = (any1::(any2::rotate (arg719) (((((((arg712 @ arg713) @ arg714) @ arg715) @ arg716) @ arg717) @ arg718))))
Model : any1: 0, any2: 3, arg712: (Nil), arg713: (Nil), arg714: (Nil), arg715: (8::(2::(2::(Nil)))), arg716: (Nil), arg717: (5::(7::(0::(Nil)))), arg718: (Nil), arg719: SUCC (ZERO)
Model : any1: 5, any2: 3, arg712: (Nil), arg713: (8::(Nil)), arg714: (Nil), arg715: (7::(2::(Nil))), arg716: (Nil), arg717: (Nil), arg718: (Nil), arg719: ZERO
Model : any1: 4, any2: 1, arg712: (8::(Nil)), arg713: (Nil), arg714: (6::(Nil)), arg715: (Nil), arg716: (1::(Nil)), arg717: (Nil), arg718: (0::(0::(Nil))), arg719: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((Nil) @ (0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (8::(2::(2::(Nil))))) @ (Nil)) @ (5::(7::(0::(Nil))))) @ (Nil))) = (0::(3::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (8::(2::(2::(Nil))))) @ (Nil)) @ (5::(7::(0::(Nil))))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (5::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (Nil)) @ (7::(2::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(3::rotate (ZERO) ((((((((Nil) @ (8::(Nil))) @ (Nil)) @ (7::(2::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((8::(Nil)) @ (4::(Nil))) @ (1::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (0::(0::(Nil))))) = (4::(1::rotate (SUCC (ZERO)) ((((((((8::(Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (0::(0::(Nil)))))))
Simplifying took 0.008082 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 2, any2: 0, any3: 0, any4: 0, any5: 8, any6: 2, any7: 3, any8: 1, any_list2: (Nil)
Model : any1: 1, any2: 4, any3: 4, any4: 2, any5: 0, any6: 4, any7: 0, any8: 3, any_list2: (Nil)
Model : any1: 2, any2: 4, any3: 2, any4: 3, any5: 3, any6: 0, any7: 2, any8: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (1::(Nil)))) = (2::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (3::(Nil)))) = (1::(4::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (7::(Nil)))) = (2::(4::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (7::(Nil))))))
Simplifying took 0.006866 seconds
Result : true
advanced_generalize done
=================================================
Progress: 405


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg720:any list) (arg721:any list) (arg722:any list) (arg723:any list) (arg724:any list) (arg725:any list) (arg726:any list) (arg727:nat), rotate (arg727) (((((((((arg720 @ (any1::(Nil))) @ (any2::(Nil))) @ arg721) @ arg722) @ arg723) @ arg724) @ arg725) @ arg726)) = (any1::(any2::rotate (arg727) (((((((arg720 @ arg721) @ arg722) @ arg723) @ arg724) @ arg725) @ arg726))))
Model : any1: 0, any2: 0, arg720: (5::(Nil)), arg721: (Nil), arg722: (Nil), arg723: (Nil), arg724: (Nil), arg725: (8::(Nil)), arg726: (Nil), arg727: ZERO
Model : any1: 7, any2: 5, arg720: (Nil), arg721: (Nil), arg722: (Nil), arg723: (0::(Nil)), arg724: (Nil), arg725: (Nil), arg726: (Nil), arg727: ZERO
Model : any1: 8, any2: 6, arg720: (Nil), arg721: (Nil), arg722: (2::(Nil)), arg723: (Nil), arg724: (5::(Nil)), arg725: (4::(3::(Nil))), arg726: (Nil), arg727: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((5::(Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) = (0::(0::rotate (ZERO) ((((((((5::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (7::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(5::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (6::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (5::(Nil))) @ (4::(3::(Nil)))) @ (Nil))) = (8::(6::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (5::(Nil))) @ (4::(3::(Nil)))) @ (Nil)))))
Simplifying took 0.003601 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 7, any2: 1, any3: 2, any4: 4, any5: 0, any6: 5, any7: 6, any8: 0, any_list2: (Nil)
Model : any1: 0, any2: 7, any3: 3, any4: 3, any5: 0, any6: 1, any7: 0, any8: 0, any_list2: (Nil)
Model : any1: 6, any2: 6, any3: 1, any4: 8, any5: 6, any6: 1, any7: 8, any8: 6, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (0::(Nil)))) = (7::(1::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (0::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (6::(Nil)))) = (6::(6::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (6::(Nil))))))
Simplifying took 0.008292 seconds
Result : true
advanced_generalize done
=================================================
Progress: 406


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any5(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 2
intro any6(rank:17)
intro any7(rank:17)
=================================================
Progress: 407


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 408


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any7 : any
---------------------------------------
forall (any5:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any4
intro any7
Lemma : forall (any1:any) (any2:any) (arg728:any list) (arg729:any list) (arg730:any list) (arg731:any list) (arg732:any list) (arg733:any list) (arg734:any list) (arg735:nat), rotate (arg735) (((((((((arg728 @ (any1::(Nil))) @ (any2::(Nil))) @ arg729) @ arg730) @ arg731) @ arg732) @ arg733) @ arg734)) = (any1::(any2::rotate (arg735) (((((((arg728 @ arg729) @ arg730) @ arg731) @ arg732) @ arg733) @ arg734))))
Model : any1: 6, any2: 5, arg728: (Nil), arg729: (6::(Nil)), arg730: (Nil), arg731: (Nil), arg732: (Nil), arg733: (Nil), arg734: (Nil), arg735: SUCC (ZERO)
Model : any1: 0, any2: 4, arg728: (Nil), arg729: (1::(Nil)), arg730: (Nil), arg731: (Nil), arg732: (4::(Nil)), arg733: (Nil), arg734: (Nil), arg735: SUCC (ZERO)
Model : any1: 0, any2: 1, arg728: (0::(Nil)), arg729: (Nil), arg730: (Nil), arg731: (8::(Nil)), arg732: (Nil), arg733: (Nil), arg734: (Nil), arg735: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((Nil) @ (6::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(5::rotate (SUCC (ZERO)) ((((((((Nil) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (0::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil))) = (0::(4::rotate (SUCC (ZERO)) ((((((((Nil) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((0::(Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(1::rotate (SUCC (ZERO)) ((((((((0::(Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.004079 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 5, any2: 4, any3: 0, any4: 4, any5: 0, any6: 6, any7: 8, any8: 6, any_list2: (Nil)
Model : any1: 4, any2: 3, any3: 5, any4: 4, any5: 4, any6: 7, any7: 5, any8: 1, any_list2: (1::(Nil))
Model : any1: 0, any2: 4, any3: 8, any4: 3, any5: 2, any6: 0, any7: 4, any8: 1, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (6::(Nil)))) = (5::(4::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (6::(Nil))))))
rotate (len ((1::(Nil)))) (((((((((((1::(Nil)) @ (Nil)) @ (4::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (1::(Nil)))) = (4::(3::rotate (len ((1::(Nil)))) (((((((((1::(Nil)) @ (Nil)) @ (5::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (1::(Nil)))) = (0::(4::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (1::(Nil))))))
Simplifying took 0.010805 seconds
Result : true
advanced_generalize done
=================================================
Progress: 409


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 410


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
any7 : any
---------------------------------------
forall (any4:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg736:any list) (arg737:any list) (arg738:any list) (arg739:any list) (arg740:any list) (arg741:any list) (arg742:any list) (arg743:nat), rotate (arg743) (((((((((arg736 @ (any1::(Nil))) @ (any2::(Nil))) @ arg737) @ arg738) @ arg739) @ arg740) @ arg741) @ arg742)) = (any1::(any2::rotate (arg743) (((((((arg736 @ arg737) @ arg738) @ arg739) @ arg740) @ arg741) @ arg742))))
Model : any1: 1, any2: 7, arg736: (Nil), arg737: (2::(4::(Nil))), arg738: (0::(1::(Nil))), arg739: (Nil), arg740: (Nil), arg741: (0::(3::(Nil))), arg742: (Nil), arg743: ZERO
Model : any1: 4, any2: 6, arg736: (Nil), arg737: (Nil), arg738: (Nil), arg739: (7::(Nil)), arg740: (Nil), arg741: (Nil), arg742: (1::(Nil)), arg743: ZERO
Model : any1: 6, any2: 8, arg736: (5::(Nil)), arg737: (Nil), arg738: (Nil), arg739: (Nil), arg740: (6::(Nil)), arg741: (Nil), arg742: (Nil), arg743: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (1::(Nil))) @ (7::(Nil))) @ (2::(4::(Nil)))) @ (0::(1::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(3::(Nil)))) @ (Nil))) = (1::(7::rotate (ZERO) ((((((((Nil) @ (2::(4::(Nil)))) @ (0::(1::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(3::(Nil)))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (4::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (4::(6::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))))))
rotate (ZERO) ((((((((((5::(Nil)) @ (6::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil))) = (6::(8::rotate (ZERO) ((((((((5::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.005349 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 3, any2: 8, any3: 2, any4: 6, any5: 2, any6: 4, any7: 0, any8: 2, any_list2: (5::(6::(Nil)))
Model : any1: 1, any2: 0, any3: 5, any4: 1, any5: 5, any6: 0, any7: 5, any8: 4, any_list2: (Nil)
Model : any1: 5, any2: 6, any3: 7, any4: 4, any5: 0, any6: 7, any7: 8, any8: 6, any_list2: (3::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((5::(6::(Nil))))) (((((((((((5::(6::(Nil))) @ (Nil)) @ (3::(Nil))) @ (8::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (2::(Nil)))) = (3::(8::rotate (len ((5::(6::(Nil))))) (((((((((5::(6::(Nil))) @ (Nil)) @ (2::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (4::(Nil)))) = (1::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (4::(Nil))))))
rotate (len ((3::(Nil)))) (((((((((((3::(Nil)) @ (Nil)) @ (5::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (6::(Nil)))) = (5::(6::rotate (len ((3::(Nil)))) (((((((((3::(Nil)) @ (Nil)) @ (7::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (6::(Nil))))))
Simplifying took 0.017180 seconds
Result : true
advanced_generalize done
=================================================
Progress: 411


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any6 : any
---------------------------------------
forall (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any6 : any
any7 : any
---------------------------------------
forall (any4:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg744:any list) (arg745:any list) (arg746:any list) (arg747:any list) (arg748:any list) (arg749:any list) (arg750:any list) (arg751:nat), rotate (arg751) (((((((((arg744 @ (any1::(Nil))) @ (any2::(Nil))) @ arg745) @ arg746) @ arg747) @ arg748) @ arg749) @ arg750)) = (any1::(any2::rotate (arg751) (((((((arg744 @ arg745) @ arg746) @ arg747) @ arg748) @ arg749) @ arg750))))
Model : any1: 4, any2: 7, arg744: (Nil), arg745: (Nil), arg746: (Nil), arg747: (Nil), arg748: (Nil), arg749: (Nil), arg750: (Nil), arg751: ZERO
Model : any1: 2, any2: 2, arg744: (Nil), arg745: (Nil), arg746: (3::(Nil)), arg747: (Nil), arg748: (Nil), arg749: (Nil), arg750: (Nil), arg751: ZERO
Model : any1: 2, any2: 3, arg744: (Nil), arg745: (7::(4::(Nil))), arg746: (Nil), arg747: (Nil), arg748: (Nil), arg749: (2::(6::(8::(Nil)))), arg750: (Nil), arg751: SUCC (SUCC (ZERO))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (4::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (2::(Nil))) @ (2::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(2::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (SUCC (ZERO))) ((((((((((Nil) @ (2::(Nil))) @ (3::(Nil))) @ (7::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(6::(8::(Nil))))) @ (Nil))) = (2::(3::rotate (SUCC (SUCC (ZERO))) ((((((((Nil) @ (7::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(6::(8::(Nil))))) @ (Nil)))))
Simplifying took 0.005991 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 0, any2: 2, any3: 1, any4: 6, any5: 4, any6: 7, any7: 0, any8: 0, any_list2: (Nil)
Model : any1: 4, any2: 7, any3: 7, any4: 2, any5: 1, any6: 3, any7: 0, any8: 0, any_list2: (Nil)
Model : any1: 0, any2: 3, any3: 0, any4: 7, any5: 5, any6: 3, any7: 3, any8: 5, any_list2: (6::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (0::(2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (4::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((6::(Nil)))) (((((((((((6::(Nil)) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (5::(Nil)))) = (0::(3::rotate (len ((6::(Nil)))) (((((((((6::(Nil)) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (5::(Nil))))))
Simplifying took 0.010799 seconds
Result : true
advanced_generalize done
=================================================
Progress: 412


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any3:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 413


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any3:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any4
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg752:any list) (arg753:any list) (arg754:any list) (arg755:any list) (arg756:any list) (arg757:any list) (arg758:any list) (arg759:nat), rotate (arg759) (((((((((arg752 @ (any1::(Nil))) @ (any2::(Nil))) @ arg753) @ arg754) @ arg755) @ arg756) @ arg757) @ arg758)) = (any1::(any2::rotate (arg759) (((((((arg752 @ arg753) @ arg754) @ arg755) @ arg756) @ arg757) @ arg758))))
Model : any1: 1, any2: 6, arg752: (Nil), arg753: (3::(Nil)), arg754: (Nil), arg755: (Nil), arg756: (Nil), arg757: (1::(Nil)), arg758: (Nil), arg759: SUCC (SUCC (ZERO))
Model : any1: 1, any2: 5, arg752: (Nil), arg753: (Nil), arg754: (1::(Nil)), arg755: (Nil), arg756: (1::(Nil)), arg757: (Nil), arg758: (3::(Nil)), arg759: SUCC (SUCC (ZERO))
Model : any1: 3, any2: 0, arg752: (Nil), arg753: (Nil), arg754: (Nil), arg755: (Nil), arg756: (Nil), arg757: (3::(Nil)), arg758: (Nil), arg759: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (SUCC (ZERO))) ((((((((((Nil) @ (1::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil))) = (1::(6::rotate (SUCC (SUCC (ZERO))) ((((((((Nil) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)))))
rotate (SUCC (SUCC (ZERO))) ((((((((((Nil) @ (1::(Nil))) @ (5::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (3::(Nil)))) = (1::(5::rotate (SUCC (SUCC (ZERO))) ((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (3::(Nil))))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (3::(0::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)))))
Simplifying took 0.003832 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 3, any2: 8, any3: 0, any4: 2, any5: 4, any6: 4, any7: 2, any8: 0, any_list2: (0::(2::(Nil)))
Model : any1: 6, any2: 4, any3: 0, any4: 3, any5: 6, any6: 8, any7: 0, any8: 6, any_list2: (Nil)
Model : any1: 1, any2: 0, any3: 2, any4: 0, any5: 0, any6: 1, any7: 3, any8: 3, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((0::(2::(Nil))))) (((((((((((0::(2::(Nil))) @ (Nil)) @ (3::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil)))) = (3::(8::rotate (len ((0::(2::(Nil))))) (((((((((0::(2::(Nil))) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (6::(Nil)))) = (6::(4::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (3::(Nil)))) = (1::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (3::(Nil))))))
Simplifying took 0.012080 seconds
Result : true
advanced_generalize done
=================================================
Progress: 414


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any6 : any
---------------------------------------
forall (any3:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any3:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any4
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg760:any list) (arg761:any list) (arg762:any list) (arg763:any list) (arg764:any list) (arg765:any list) (arg766:any list) (arg767:nat), rotate (arg767) (((((((((arg760 @ (any1::(Nil))) @ (any2::(Nil))) @ arg761) @ arg762) @ arg763) @ arg764) @ arg765) @ arg766)) = (any1::(any2::rotate (arg767) (((((((arg760 @ arg761) @ arg762) @ arg763) @ arg764) @ arg765) @ arg766))))
Model : any1: 2, any2: 3, arg760: (2::(Nil)), arg761: (Nil), arg762: (Nil), arg763: (4::(Nil)), arg764: (Nil), arg765: (Nil), arg766: (4::(Nil)), arg767: ZERO
Model : any1: 6, any2: 5, arg760: (Nil), arg761: (Nil), arg762: (Nil), arg763: (Nil), arg764: (Nil), arg765: (Nil), arg766: (2::(2::(7::(Nil)))), arg767: ZERO
Model : any1: 2, any2: 0, arg760: (Nil), arg761: (Nil), arg762: (Nil), arg763: (Nil), arg764: (7::(Nil)), arg765: (3::(Nil)), arg766: (Nil), arg767: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((2::(Nil)) @ (2::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (2::(3::rotate (ZERO) ((((((((2::(Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil))))))
rotate (ZERO) ((((((((((Nil) @ (6::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(2::(7::(Nil)))))) = (6::(5::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(2::(7::(Nil))))))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (2::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (3::(Nil))) @ (Nil))) = (2::(0::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (3::(Nil))) @ (Nil)))))
Simplifying took 0.003231 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 8, any2: 0, any3: 0, any4: 5, any5: 3, any6: 2, any7: 0, any8: 2, any_list2: (Nil)
Model : any1: 7, any2: 0, any3: 2, any4: 0, any5: 6, any6: 4, any7: 1, any8: 0, any_list2: (Nil)
Model : any1: 0, any2: 0, any3: 1, any4: 1, any5: 0, any6: 0, any7: 7, any8: 6, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (2::(Nil)))) = (8::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (0::(Nil)))) = (7::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (6::(Nil)))) = (0::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (6::(Nil))))))
Simplifying took 0.006717 seconds
Result : true
advanced_generalize done
=================================================
Progress: 415


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any5 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any3:any) (any4:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg768:any list) (arg769:any list) (arg770:any list) (arg771:any list) (arg772:any list) (arg773:any list) (arg774:any list) (arg775:nat), rotate (arg775) (((((((((arg768 @ (any1::(Nil))) @ (any2::(Nil))) @ arg769) @ arg770) @ arg771) @ arg772) @ arg773) @ arg774)) = (any1::(any2::rotate (arg775) (((((((arg768 @ arg769) @ arg770) @ arg771) @ arg772) @ arg773) @ arg774))))
Model : any1: 0, any2: 7, arg768: (3::(Nil)), arg769: (Nil), arg770: (Nil), arg771: (Nil), arg772: (4::(Nil)), arg773: (Nil), arg774: (Nil), arg775: ZERO
Model : any1: 5, any2: 1, arg768: (Nil), arg769: (3::(Nil)), arg770: (Nil), arg771: (Nil), arg772: (Nil), arg773: (Nil), arg774: (Nil), arg775: SUCC (ZERO)
Model : any1: 1, any2: 2, arg768: (Nil), arg769: (Nil), arg770: (Nil), arg771: (Nil), arg772: (1::(Nil)), arg773: (8::(Nil)), arg774: (Nil), arg775: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((3::(Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil))) = (0::(7::rotate (ZERO) ((((((((3::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (5::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(1::rotate (SUCC (ZERO)) ((((((((Nil) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (1::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (8::(Nil))) @ (Nil))) = (1::(2::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (8::(Nil))) @ (Nil)))))
Simplifying took 0.003167 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 7, any2: 1, any3: 1, any4: 2, any5: 0, any6: 6, any7: 8, any8: 3, any_list2: (Nil)
Model : any1: 4, any2: 8, any3: 5, any4: 0, any5: 2, any6: 6, any7: 1, any8: 5, any_list2: (Nil)
Model : any1: 5, any2: 1, any3: 5, any4: 6, any5: 6, any6: 6, any7: 6, any8: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (3::(Nil)))) = (7::(1::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (5::(Nil)))) = (4::(8::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (5::(Nil)))) = (5::(1::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (5::(Nil))))))
Simplifying took 0.008804 seconds
Result : true
advanced_generalize done
=================================================
Progress: 416


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 417


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any2:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any4
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg776:any list) (arg777:any list) (arg778:any list) (arg779:any list) (arg780:any list) (arg781:any list) (arg782:any list) (arg783:nat), rotate (arg783) (((((((((arg776 @ (any1::(Nil))) @ (any2::(Nil))) @ arg777) @ arg778) @ arg779) @ arg780) @ arg781) @ arg782)) = (any1::(any2::rotate (arg783) (((((((arg776 @ arg777) @ arg778) @ arg779) @ arg780) @ arg781) @ arg782))))
Model : any1: 0, any2: 2, arg776: (0::(Nil)), arg777: (Nil), arg778: (Nil), arg779: (Nil), arg780: (Nil), arg781: (2::(1::(Nil))), arg782: (Nil), arg783: ZERO
Model : any1: 3, any2: 2, arg776: (Nil), arg777: (Nil), arg778: (Nil), arg779: (5::(Nil)), arg780: (Nil), arg781: (Nil), arg782: (Nil), arg783: SUCC (SUCC (ZERO))
Model : any1: 7, any2: 6, arg776: (Nil), arg777: (6::(Nil)), arg778: (Nil), arg779: (Nil), arg780: (Nil), arg781: (Nil), arg782: (Nil), arg783: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((0::(Nil)) @ (0::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(1::(Nil)))) @ (Nil))) = (0::(2::rotate (ZERO) ((((((((0::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(1::(Nil)))) @ (Nil)))))
rotate (SUCC (SUCC (ZERO))) ((((((((((Nil) @ (3::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(2::rotate (SUCC (SUCC (ZERO))) ((((((((Nil) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (7::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(6::rotate (ZERO) ((((((((Nil) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003302 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 8, any2: 1, any3: 6, any4: 7, any5: 8, any6: 5, any7: 6, any8: 1, any_list2: (Nil)
Model : any1: 0, any2: 1, any3: 5, any4: 4, any5: 5, any6: 7, any7: 1, any8: 1, any_list2: (Nil)
Model : any1: 8, any2: 5, any3: 4, any4: 4, any5: 7, any6: 5, any7: 0, any8: 0, any_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (1::(Nil)))) = (8::(1::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (1::(Nil)))) = (0::(1::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (1::(Nil))))))
rotate (len ((0::(Nil)))) (((((((((((0::(Nil)) @ (Nil)) @ (8::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (8::(5::rotate (len ((0::(Nil)))) (((((((((0::(Nil)) @ (Nil)) @ (4::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
Simplifying took 0.011893 seconds
Result : true
advanced_generalize done
=================================================
Progress: 418


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any2:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any4
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg784:any list) (arg785:any list) (arg786:any list) (arg787:any list) (arg788:any list) (arg789:any list) (arg790:any list) (arg791:nat), rotate (arg791) (((((((((arg784 @ (any1::(Nil))) @ (any2::(Nil))) @ arg785) @ arg786) @ arg787) @ arg788) @ arg789) @ arg790)) = (any1::(any2::rotate (arg791) (((((((arg784 @ arg785) @ arg786) @ arg787) @ arg788) @ arg789) @ arg790))))
Model : any1: 0, any2: 1, arg784: (Nil), arg785: (Nil), arg786: (Nil), arg787: (3::(Nil)), arg788: (Nil), arg789: (Nil), arg790: (Nil), arg791: ZERO
Model : any1: 3, any2: 4, arg784: (Nil), arg785: (Nil), arg786: (Nil), arg787: (Nil), arg788: (Nil), arg789: (Nil), arg790: (Nil), arg791: ZERO
Model : any1: 4, any2: 7, arg784: (Nil), arg785: (Nil), arg786: (Nil), arg787: (Nil), arg788: (Nil), arg789: (Nil), arg790: (Nil), arg791: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(1::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(4::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (4::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.001647 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 419


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg784:any list) (arg785:any list) (arg786:any list) (arg787:any list) (arg788:any list) (arg789:any list) (arg790:any list) (arg791:nat), rotate (arg791) (((((((((arg784 @ (any1::(Nil))) @ (any2::(Nil))) @ arg785) @ arg786) @ arg787) @ arg788) @ arg789) @ arg790)) = (any1::(any2::rotate (arg791) (((((((arg784 @ arg785) @ arg786) @ arg787) @ arg788) @ arg789) @ arg790))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 420


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any4:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg792:any list) (arg793:any list) (arg794:any list) (arg795:any list) (arg796:any list) (arg797:any list) (arg798:any list) (arg799:nat), rotate (arg799) (((((((((arg792 @ (any1::(Nil))) @ (any2::(Nil))) @ arg793) @ arg794) @ arg795) @ arg796) @ arg797) @ arg798)) = (any1::(any2::rotate (arg799) (((((((arg792 @ arg793) @ arg794) @ arg795) @ arg796) @ arg797) @ arg798))))
Model : any1: 1, any2: 0, arg792: (Nil), arg793: (6::(Nil)), arg794: (Nil), arg795: (Nil), arg796: (8::(Nil)), arg797: (Nil), arg798: (Nil), arg799: SUCC (ZERO)
Model : any1: 1, any2: 4, arg792: (0::(Nil)), arg793: (Nil), arg794: (Nil), arg795: (Nil), arg796: (Nil), arg797: (Nil), arg798: (Nil), arg799: ZERO
Model : any1: 0, any2: 2, arg792: (Nil), arg793: (Nil), arg794: (Nil), arg795: (Nil), arg796: (Nil), arg797: (5::(0::(Nil))), arg798: (Nil), arg799: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((((((((((Nil) @ (1::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (1::(0::rotate (SUCC (ZERO)) ((((((((Nil) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((0::(Nil)) @ (1::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(4::rotate (ZERO) ((((((((0::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(0::(Nil)))) @ (Nil))) = (0::(2::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(0::(Nil)))) @ (Nil)))))
Simplifying took 0.003009 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 1, any2: 7, any3: 6, any4: 0, any5: 2, any6: 0, any7: 2, any8: 4, any_list2: (Nil)
Model : any1: 5, any2: 2, any3: 8, any4: 1, any5: 8, any6: 0, any7: 0, any8: 5, any_list2: (Nil)
Model : any1: 6, any2: 8, any3: 4, any4: 6, any5: 2, any6: 0, any7: 3, any8: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (4::(Nil)))) = (1::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (5::(Nil)))) = (5::(2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil)))) = (6::(8::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))))))
Simplifying took 0.007749 seconds
Result : true
advanced_generalize done
=================================================
Progress: 421


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any4
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg800:any list) (arg801:any list) (arg802:any list) (arg803:any list) (arg804:any list) (arg805:any list) (arg806:any list) (arg807:nat), rotate (arg807) (((((((((arg800 @ (any1::(Nil))) @ (any2::(Nil))) @ arg801) @ arg802) @ arg803) @ arg804) @ arg805) @ arg806)) = (any1::(any2::rotate (arg807) (((((((arg800 @ arg801) @ arg802) @ arg803) @ arg804) @ arg805) @ arg806))))
Model : any1: 6, any2: 6, arg800: (Nil), arg801: (Nil), arg802: (Nil), arg803: (Nil), arg804: (0::(5::(Nil))), arg805: (4::(Nil)), arg806: (Nil), arg807: ZERO
Model : any1: 0, any2: 8, arg800: (Nil), arg801: (Nil), arg802: (Nil), arg803: (Nil), arg804: (Nil), arg805: (0::(Nil)), arg806: (2::(Nil)), arg807: ZERO
Model : any1: 8, any2: 4, arg800: (Nil), arg801: (Nil), arg802: (Nil), arg803: (Nil), arg804: (Nil), arg805: (Nil), arg806: (Nil), arg807: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (6::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(5::(Nil)))) @ (4::(Nil))) @ (Nil))) = (6::(6::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(5::(Nil)))) @ (4::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (2::(Nil)))) = (0::(8::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))))))
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(4::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002534 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 422


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg800:any list) (arg801:any list) (arg802:any list) (arg803:any list) (arg804:any list) (arg805:any list) (arg806:any list) (arg807:nat), rotate (arg807) (((((((((arg800 @ (any1::(Nil))) @ (any2::(Nil))) @ arg801) @ arg802) @ arg803) @ arg804) @ arg805) @ arg806)) = (any1::(any2::rotate (arg807) (((((((arg800 @ arg801) @ arg802) @ arg803) @ arg804) @ arg805) @ arg806))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 423


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 424


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any4
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg808:any list) (arg809:any list) (arg810:any list) (arg811:any list) (arg812:any list) (arg813:any list) (arg814:any list) (arg815:nat), rotate (arg815) (((((((((arg808 @ (any1::(Nil))) @ (any2::(Nil))) @ arg809) @ arg810) @ arg811) @ arg812) @ arg813) @ arg814)) = (any1::(any2::rotate (arg815) (((((((arg808 @ arg809) @ arg810) @ arg811) @ arg812) @ arg813) @ arg814))))
Model : any1: 0, any2: 3, arg808: (0::(Nil)), arg809: (Nil), arg810: (Nil), arg811: (Nil), arg812: (Nil), arg813: (Nil), arg814: (1::(Nil)), arg815: ZERO
Model : any1: 1, any2: 0, arg808: (Nil), arg809: (1::(Nil)), arg810: (Nil), arg811: (Nil), arg812: (0::(Nil)), arg813: (Nil), arg814: (Nil), arg815: ZERO
Model : any1: 5, any2: 6, arg808: (Nil), arg809: (Nil), arg810: (Nil), arg811: (Nil), arg812: (Nil), arg813: (Nil), arg814: (Nil), arg815: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((0::(Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (0::(3::rotate (ZERO) ((((((((0::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))))))
rotate (ZERO) ((((((((((Nil) @ (1::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (1::(0::rotate (ZERO) ((((((((Nil) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (5::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(6::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002034 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 3, any2: 2, any3: 5, any4: 0, any5: 6, any6: 2, any7: 6, any8: 0, any_list2: (Nil)
Model : any1: 3, any2: 0, any3: 2, any4: 1, any5: 2, any6: 1, any7: 8, any8: 7, any_list2: (Nil)
Model : any1: 3, any2: 7, any3: 0, any4: 2, any5: 7, any6: 2, any7: 0, any8: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (0::(Nil)))) = (3::(2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (7::(Nil)))) = (3::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (7::(Nil)))) = (3::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (7::(Nil))))))
Simplifying took 0.007745 seconds
Result : true
advanced_generalize done
=================================================
Progress: 425


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any4
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg816:any list) (arg817:any list) (arg818:any list) (arg819:any list) (arg820:any list) (arg821:any list) (arg822:any list) (arg823:nat), rotate (arg823) (((((((((arg816 @ (any1::(Nil))) @ (any2::(Nil))) @ arg817) @ arg818) @ arg819) @ arg820) @ arg821) @ arg822)) = (any1::(any2::rotate (arg823) (((((((arg816 @ arg817) @ arg818) @ arg819) @ arg820) @ arg821) @ arg822))))
Model : any1: 4, any2: 2, arg816: (Nil), arg817: (3::(Nil)), arg818: (Nil), arg819: (Nil), arg820: (6::(Nil)), arg821: (6::(Nil)), arg822: (Nil), arg823: ZERO
Model : any1: 0, any2: 1, arg816: (Nil), arg817: (Nil), arg818: (7::(Nil)), arg819: (8::(Nil)), arg820: (7::(Nil)), arg821: (Nil), arg822: (Nil), arg823: SUCC (ZERO)
Model : any1: 2, any2: 6, arg816: (Nil), arg817: (Nil), arg818: (Nil), arg819: (Nil), arg820: (Nil), arg821: (1::(Nil)), arg822: (Nil), arg823: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (4::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (6::(Nil))) @ (Nil))) = (4::(2::rotate (ZERO) ((((((((Nil) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (6::(Nil))) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (7::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil))) = (0::(1::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (2::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil))) = (2::(6::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)))))
Simplifying took 0.004618 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 3, any2: 3, any3: 6, any4: 0, any5: 1, any6: 6, any7: 7, any8: 3, any_list2: (Nil)
Model : any1: 7, any2: 7, any3: 6, any4: 5, any5: 3, any6: 2, any7: 6, any8: 0, any_list2: (Nil)
Model : any1: 1, any2: 6, any3: 1, any4: 0, any5: 6, any6: 7, any7: 7, any8: 0, any_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (3::(Nil)))) = (3::(3::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (0::(Nil)))) = (7::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (0::(Nil))))))
rotate (len ((0::(Nil)))) (((((((((((0::(Nil)) @ (Nil)) @ (1::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (0::(Nil)))) = (1::(6::rotate (len ((0::(Nil)))) (((((((((0::(Nil)) @ (Nil)) @ (1::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (0::(Nil))))))
Simplifying took 0.010447 seconds
Result : true
advanced_generalize done
=================================================
Progress: 426


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any4:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg824:any list) (arg825:any list) (arg826:any list) (arg827:any list) (arg828:any list) (arg829:any list) (arg830:any list) (arg831:nat), rotate (arg831) (((((((((arg824 @ (any1::(Nil))) @ (any2::(Nil))) @ arg825) @ arg826) @ arg827) @ arg828) @ arg829) @ arg830)) = (any1::(any2::rotate (arg831) (((((((arg824 @ arg825) @ arg826) @ arg827) @ arg828) @ arg829) @ arg830))))
Model : any1: 8, any2: 1, arg824: (Nil), arg825: (Nil), arg826: (Nil), arg827: (Nil), arg828: (Nil), arg829: (2::(Nil)), arg830: (3::(0::(Nil))), arg831: ZERO
Model : any1: 8, any2: 1, arg824: (Nil), arg825: (2::(Nil)), arg826: (Nil), arg827: (0::(0::(Nil))), arg828: (Nil), arg829: (Nil), arg830: (Nil), arg831: ZERO
Model : any1: 0, any2: 7, arg824: (Nil), arg825: (7::(Nil)), arg826: (Nil), arg827: (Nil), arg828: (5::(0::(Nil))), arg829: (Nil), arg830: (Nil), arg831: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (3::(0::(Nil))))) = (8::(1::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (3::(0::(Nil)))))))
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (Nil)) @ (0::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(1::rotate (ZERO) ((((((((Nil) @ (2::(Nil))) @ (Nil)) @ (0::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (0::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (5::(0::(Nil)))) @ (Nil)) @ (Nil))) = (0::(7::rotate (SUCC (ZERO)) ((((((((Nil) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (5::(0::(Nil)))) @ (Nil)) @ (Nil)))))
Simplifying took 0.003795 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 4, any2: 7, any3: 5, any4: 2, any5: 1, any6: 2, any7: 7, any8: 1, any_list2: (6::(Nil))
Model : any1: 5, any2: 1, any3: 7, any4: 5, any5: 5, any6: 3, any7: 1, any8: 4, any_list2: (5::(2::(Nil)))
Model : any1: 7, any2: 7, any3: 2, any4: 6, any5: 3, any6: 1, any7: 0, any8: 5, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((6::(Nil)))) (((((((((((6::(Nil)) @ (Nil)) @ (4::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (1::(Nil)))) = (4::(7::rotate (len ((6::(Nil)))) (((((((((6::(Nil)) @ (Nil)) @ (5::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (1::(Nil))))))
rotate (len ((5::(2::(Nil))))) (((((((((((5::(2::(Nil))) @ (Nil)) @ (5::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (4::(Nil)))) = (5::(1::rotate (len ((5::(2::(Nil))))) (((((((((5::(2::(Nil))) @ (Nil)) @ (7::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil)))) = (7::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))))))
Simplifying took 0.016759 seconds
Result : true
advanced_generalize done
=================================================
Progress: 427


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any4
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg832:any list) (arg833:any list) (arg834:any list) (arg835:any list) (arg836:any list) (arg837:any list) (arg838:any list) (arg839:nat), rotate (arg839) (((((((((arg832 @ (any1::(Nil))) @ (any2::(Nil))) @ arg833) @ arg834) @ arg835) @ arg836) @ arg837) @ arg838)) = (any1::(any2::rotate (arg839) (((((((arg832 @ arg833) @ arg834) @ arg835) @ arg836) @ arg837) @ arg838))))
Model : any1: 0, any2: 8, arg832: (Nil), arg833: (Nil), arg834: (5::(Nil)), arg835: (Nil), arg836: (6::(Nil)), arg837: (Nil), arg838: (Nil), arg839: ZERO
Model : any1: 1, any2: 8, arg832: (Nil), arg833: (Nil), arg834: (Nil), arg835: (Nil), arg836: (3::(Nil)), arg837: (Nil), arg838: (Nil), arg839: ZERO
Model : any1: 4, any2: 5, arg832: (7::(3::(Nil))), arg833: (Nil), arg834: (Nil), arg835: (Nil), arg836: (Nil), arg837: (Nil), arg838: (Nil), arg839: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil))) = (0::(8::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (1::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (1::(8::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((7::(3::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(5::rotate (ZERO) ((((((((7::(3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003984 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 3, any2: 1, any3: 3, any4: 4, any5: 7, any6: 2, any7: 7, any8: 6, any_list2: (Nil)
Model : any1: 5, any2: 7, any3: 4, any4: 3, any5: 7, any6: 5, any7: 2, any8: 2, any_list2: (Nil)
Model : any1: 0, any2: 1, any3: 6, any4: 0, any5: 2, any6: 0, any7: 5, any8: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (6::(Nil)))) = (3::(1::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (2::(Nil)))) = (5::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil)))) = (0::(1::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil))))))
Simplifying took 0.008212 seconds
Result : true
advanced_generalize done
=================================================
Progress: 428


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any4
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg840:any list) (arg841:any list) (arg842:any list) (arg843:any list) (arg844:any list) (arg845:any list) (arg846:any list) (arg847:nat), rotate (arg847) (((((((((arg840 @ (any1::(Nil))) @ (any2::(Nil))) @ arg841) @ arg842) @ arg843) @ arg844) @ arg845) @ arg846)) = (any1::(any2::rotate (arg847) (((((((arg840 @ arg841) @ arg842) @ arg843) @ arg844) @ arg845) @ arg846))))
Model : any1: 3, any2: 3, arg840: (Nil), arg841: (Nil), arg842: (0::(Nil)), arg843: (Nil), arg844: (Nil), arg845: (Nil), arg846: (Nil), arg847: ZERO
Model : any1: 1, any2: 4, arg840: (Nil), arg841: (Nil), arg842: (Nil), arg843: (7::(Nil)), arg844: (Nil), arg845: (Nil), arg846: (4::(Nil)), arg847: ZERO
Model : any1: 3, any2: 5, arg840: (Nil), arg841: (Nil), arg842: (Nil), arg843: (Nil), arg844: (Nil), arg845: (Nil), arg846: (Nil), arg847: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (3::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(3::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (1::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (1::(4::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil))))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(5::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002103 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 429


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any3 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg840:any list) (arg841:any list) (arg842:any list) (arg843:any list) (arg844:any list) (arg845:any list) (arg846:any list) (arg847:nat), rotate (arg847) (((((((((arg840 @ (any1::(Nil))) @ (any2::(Nil))) @ arg841) @ arg842) @ arg843) @ arg844) @ arg845) @ arg846)) = (any1::(any2::rotate (arg847) (((((((arg840 @ arg841) @ arg842) @ arg843) @ arg844) @ arg845) @ arg846))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 430


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any6(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
intro any7(rank:17)
=================================================
Progress: 431


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any6:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any4
intro any5
intro any7
Lemma : forall (any1:any) (any2:any) (arg848:any list) (arg849:any list) (arg850:any list) (arg851:any list) (arg852:any list) (arg853:any list) (arg854:any list) (arg855:nat), rotate (arg855) (((((((((arg848 @ (any1::(Nil))) @ (any2::(Nil))) @ arg849) @ arg850) @ arg851) @ arg852) @ arg853) @ arg854)) = (any1::(any2::rotate (arg855) (((((((arg848 @ arg849) @ arg850) @ arg851) @ arg852) @ arg853) @ arg854))))
Model : any1: 8, any2: 4, arg848: (Nil), arg849: (Nil), arg850: (Nil), arg851: (Nil), arg852: (Nil), arg853: (Nil), arg854: (Nil), arg855: ZERO
Model : any1: 3, any2: 0, arg848: (Nil), arg849: (3::(Nil)), arg850: (Nil), arg851: (Nil), arg852: (Nil), arg853: (3::(Nil)), arg854: (Nil), arg855: ZERO
Model : any1: 2, any2: 3, arg848: (Nil), arg849: (8::(Nil)), arg850: (Nil), arg851: (7::(Nil)), arg852: (Nil), arg853: (8::(Nil)), arg854: (Nil), arg855: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (8::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(4::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (3::(0::rotate (ZERO) ((((((((Nil) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (2::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil))) = (2::(3::rotate (ZERO) ((((((((Nil) @ (8::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil)))))
Simplifying took 0.003433 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 432


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any6:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg848:any list) (arg849:any list) (arg850:any list) (arg851:any list) (arg852:any list) (arg853:any list) (arg854:any list) (arg855:nat), rotate (arg855) (((((((((arg848 @ (any1::(Nil))) @ (any2::(Nil))) @ arg849) @ arg850) @ arg851) @ arg852) @ arg853) @ arg854)) = (any1::(any2::rotate (arg855) (((((((arg848 @ arg849) @ arg850) @ arg851) @ arg852) @ arg853) @ arg854))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 433


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any5:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any5:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any4
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg856:any list) (arg857:any list) (arg858:any list) (arg859:any list) (arg860:any list) (arg861:any list) (arg862:any list) (arg863:nat), rotate (arg863) (((((((((arg856 @ (any1::(Nil))) @ (any2::(Nil))) @ arg857) @ arg858) @ arg859) @ arg860) @ arg861) @ arg862)) = (any1::(any2::rotate (arg863) (((((((arg856 @ arg857) @ arg858) @ arg859) @ arg860) @ arg861) @ arg862))))
Model : any1: 2, any2: 7, arg856: (Nil), arg857: (Nil), arg858: (Nil), arg859: (Nil), arg860: (Nil), arg861: (Nil), arg862: (Nil), arg863: ZERO
Model : any1: 0, any2: 4, arg856: (0::(Nil)), arg857: (Nil), arg858: (Nil), arg859: (Nil), arg860: (3::(Nil)), arg861: (Nil), arg862: (Nil), arg863: ZERO
Model : any1: 6, any2: 6, arg856: (Nil), arg857: (Nil), arg858: (Nil), arg859: (Nil), arg860: (Nil), arg861: (0::(Nil)), arg862: (Nil), arg863: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (2::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((0::(Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (0::(4::rotate (ZERO) ((((((((0::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (6::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (6::(6::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)))))
Simplifying took 0.002476 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 3, any2: 3, any3: 1, any4: 0, any5: 0, any6: 7, any7: 5, any8: 2, any_list2: (Nil)
Model : any1: 8, any2: 6, any3: 1, any4: 5, any5: 2, any6: 5, any7: 7, any8: 4, any_list2: (Nil)
Model : any1: 0, any2: 3, any3: 8, any4: 4, any5: 2, any6: 0, any7: 6, any8: 4, any_list2: (4::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (2::(Nil)))) = (3::(3::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (4::(Nil)))) = (8::(6::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (4::(Nil))))))
rotate (len ((4::(Nil)))) (((((((((((4::(Nil)) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil)))) = (0::(3::rotate (len ((4::(Nil)))) (((((((((4::(Nil)) @ (Nil)) @ (8::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))))))
Simplifying took 0.010471 seconds
Result : true
advanced_generalize done
=================================================
Progress: 434


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any4:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any4:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg864:any list) (arg865:any list) (arg866:any list) (arg867:any list) (arg868:any list) (arg869:any list) (arg870:any list) (arg871:nat), rotate (arg871) (((((((((arg864 @ (any1::(Nil))) @ (any2::(Nil))) @ arg865) @ arg866) @ arg867) @ arg868) @ arg869) @ arg870)) = (any1::(any2::rotate (arg871) (((((((arg864 @ arg865) @ arg866) @ arg867) @ arg868) @ arg869) @ arg870))))
Model : any1: 2, any2: 5, arg864: (Nil), arg865: (Nil), arg866: (Nil), arg867: (Nil), arg868: (Nil), arg869: (Nil), arg870: (Nil), arg871: ZERO
Model : any1: 1, any2: 0, arg864: (Nil), arg865: (Nil), arg866: (5::(Nil)), arg867: (Nil), arg868: (0::(7::(Nil))), arg869: (Nil), arg870: (Nil), arg871: ZERO
Model : any1: 8, any2: 6, arg864: (Nil), arg865: (Nil), arg866: (Nil), arg867: (Nil), arg868: (Nil), arg869: (Nil), arg870: (Nil), arg871: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (2::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(5::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (1::(Nil))) @ (0::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (0::(7::(Nil)))) @ (Nil)) @ (Nil))) = (1::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (0::(7::(Nil)))) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (8::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(6::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002839 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 3, any2: 7, any3: 1, any4: 1, any5: 7, any6: 4, any7: 8, any8: 0, any_list2: (Nil)
Model : any1: 2, any2: 6, any3: 4, any4: 3, any5: 4, any6: 4, any7: 4, any8: 3, any_list2: (Nil)
Model : any1: 6, any2: 5, any3: 0, any4: 6, any5: 0, any6: 6, any7: 1, any8: 4, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (0::(Nil)))) = (3::(7::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (3::(Nil)))) = (2::(6::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (4::(Nil)))) = (6::(5::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (4::(Nil))))))
Simplifying took 0.008728 seconds
Result : true
advanced_generalize done
=================================================
Progress: 435


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any3:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any3:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any4
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg872:any list) (arg873:any list) (arg874:any list) (arg875:any list) (arg876:any list) (arg877:any list) (arg878:any list) (arg879:nat), rotate (arg879) (((((((((arg872 @ (any1::(Nil))) @ (any2::(Nil))) @ arg873) @ arg874) @ arg875) @ arg876) @ arg877) @ arg878)) = (any1::(any2::rotate (arg879) (((((((arg872 @ arg873) @ arg874) @ arg875) @ arg876) @ arg877) @ arg878))))
Model : any1: 6, any2: 5, arg872: (Nil), arg873: (Nil), arg874: (Nil), arg875: (7::(Nil)), arg876: (Nil), arg877: (Nil), arg878: (2::(0::(8::(Nil)))), arg879: ZERO
Model : any1: 1, any2: 6, arg872: (Nil), arg873: (Nil), arg874: (Nil), arg875: (Nil), arg876: (0::(Nil)), arg877: (Nil), arg878: (Nil), arg879: ZERO
Model : any1: 5, any2: 4, arg872: (Nil), arg873: (Nil), arg874: (Nil), arg875: (Nil), arg876: (Nil), arg877: (Nil), arg878: (Nil), arg879: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (6::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (2::(0::(8::(Nil)))))) = (6::(5::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (2::(0::(8::(Nil))))))))
rotate (ZERO) ((((((((((Nil) @ (1::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (1::(6::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (5::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(4::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002376 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any3:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 436


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any3:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg872:any list) (arg873:any list) (arg874:any list) (arg875:any list) (arg876:any list) (arg877:any list) (arg878:any list) (arg879:nat), rotate (arg879) (((((((((arg872 @ (any1::(Nil))) @ (any2::(Nil))) @ arg873) @ arg874) @ arg875) @ arg876) @ arg877) @ arg878)) = (any1::(any2::rotate (arg879) (((((((arg872 @ arg873) @ arg874) @ arg875) @ arg876) @ arg877) @ arg878))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 437


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any4
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg880:any list) (arg881:any list) (arg882:any list) (arg883:any list) (arg884:any list) (arg885:any list) (arg886:any list) (arg887:nat), rotate (arg887) (((((((((arg880 @ (any1::(Nil))) @ (any2::(Nil))) @ arg881) @ arg882) @ arg883) @ arg884) @ arg885) @ arg886)) = (any1::(any2::rotate (arg887) (((((((arg880 @ arg881) @ arg882) @ arg883) @ arg884) @ arg885) @ arg886))))
Model : any1: 0, any2: 4, arg880: (Nil), arg881: (Nil), arg882: (Nil), arg883: (1::(Nil)), arg884: (Nil), arg885: (Nil), arg886: (Nil), arg887: ZERO
Model : any1: 7, any2: 2, arg880: (Nil), arg881: (Nil), arg882: (7::(Nil)), arg883: (8::(Nil)), arg884: (0::(Nil)), arg885: (Nil), arg886: (5::(Nil)), arg887: SUCC (SUCC (ZERO))
Model : any1: 7, any2: 0, arg880: (Nil), arg881: (Nil), arg882: (Nil), arg883: (Nil), arg884: (Nil), arg885: (Nil), arg886: (Nil), arg887: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(4::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (SUCC (ZERO))) ((((((((((Nil) @ (7::(Nil))) @ (2::(Nil))) @ (Nil)) @ (7::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (5::(Nil)))) = (7::(2::rotate (SUCC (SUCC (ZERO))) ((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (5::(Nil))))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (7::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(0::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.004360 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 0, any2: 5, any3: 0, any4: 5, any5: 6, any6: 5, any7: 4, any8: 5, any_list2: (Nil)
Model : any1: 0, any2: 0, any3: 0, any4: 0, any5: 3, any6: 4, any7: 0, any8: 7, any_list2: (Nil)
Model : any1: 0, any2: 8, any3: 8, any4: 5, any5: 3, any6: 4, any7: 1, any8: 1, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (5::(Nil)))) = (0::(5::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (7::(Nil)))) = (0::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (1::(Nil)))) = (0::(8::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (1::(Nil))))))
Simplifying took 0.007724 seconds
Result : true
advanced_generalize done
=================================================
Progress: 438


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any4
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg888:any list) (arg889:any list) (arg890:any list) (arg891:any list) (arg892:any list) (arg893:any list) (arg894:any list) (arg895:nat), rotate (arg895) (((((((((arg888 @ (any1::(Nil))) @ (any2::(Nil))) @ arg889) @ arg890) @ arg891) @ arg892) @ arg893) @ arg894)) = (any1::(any2::rotate (arg895) (((((((arg888 @ arg889) @ arg890) @ arg891) @ arg892) @ arg893) @ arg894))))
Model : any1: 2, any2: 0, arg888: (Nil), arg889: (1::(Nil)), arg890: (Nil), arg891: (Nil), arg892: (Nil), arg893: (Nil), arg894: (Nil), arg895: ZERO
Model : any1: 3, any2: 0, arg888: (Nil), arg889: (Nil), arg890: (Nil), arg891: (Nil), arg892: (Nil), arg893: (Nil), arg894: (Nil), arg895: ZERO
Model : any1: 0, any2: 7, arg888: (Nil), arg889: (Nil), arg890: (Nil), arg891: (Nil), arg892: (Nil), arg893: (Nil), arg894: (4::(1::(Nil))), arg895: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (2::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(0::rotate (ZERO) ((((((((Nil) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(0::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (0::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(1::(Nil))))) = (0::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(1::(Nil)))))))
Simplifying took 0.001596 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
=================================================
Progress: 439


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any2 : any
any3 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg888:any list) (arg889:any list) (arg890:any list) (arg891:any list) (arg892:any list) (arg893:any list) (arg894:any list) (arg895:nat), rotate (arg895) (((((((((arg888 @ (any1::(Nil))) @ (any2::(Nil))) @ arg889) @ arg890) @ arg891) @ arg892) @ arg893) @ arg894)) = (any1::(any2::rotate (arg895) (((((((arg888 @ arg889) @ arg890) @ arg891) @ arg892) @ arg893) @ arg894))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 440


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any7:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
>>> intro any7(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any_list1:any list), rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
any_list1 : any list
any8 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))))))
Inductive1 : any_list1 = (any8::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
any5 : any
any6 : any
any7 : any
---------------------------------------
rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

7 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any4
intro any5
intro any6
intro any7
Lemma : forall (any1:any) (any2:any) (arg896:any list) (arg897:any list) (arg898:any list) (arg899:any list) (arg900:any list) (arg901:any list) (arg902:any list) (arg903:nat), rotate (arg903) (((((((((arg896 @ (any1::(Nil))) @ (any2::(Nil))) @ arg897) @ arg898) @ arg899) @ arg900) @ arg901) @ arg902)) = (any1::(any2::rotate (arg903) (((((((arg896 @ arg897) @ arg898) @ arg899) @ arg900) @ arg901) @ arg902))))
Model : any1: 6, any2: 7, arg896: (Nil), arg897: (Nil), arg898: (6::(8::(Nil))), arg899: (Nil), arg900: (Nil), arg901: (3::(5::(Nil))), arg902: (Nil), arg903: ZERO
Model : any1: 5, any2: 2, arg896: (Nil), arg897: (Nil), arg898: (Nil), arg899: (7::(Nil)), arg900: (Nil), arg901: (Nil), arg902: (Nil), arg903: SUCC (ZERO)
Model : any1: 7, any2: 2, arg896: (Nil), arg897: (Nil), arg898: (Nil), arg899: (Nil), arg900: (Nil), arg901: (Nil), arg902: (Nil), arg903: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((((((((((Nil) @ (6::(Nil))) @ (7::(Nil))) @ (Nil)) @ (6::(8::(Nil)))) @ (Nil)) @ (Nil)) @ (3::(5::(Nil)))) @ (Nil))) = (6::(7::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (6::(8::(Nil)))) @ (Nil)) @ (Nil)) @ (3::(5::(Nil)))) @ (Nil)))))
rotate (SUCC (ZERO)) ((((((((((Nil) @ (5::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(2::rotate (SUCC (ZERO)) ((((((((Nil) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) ((((((((((Nil) @ (7::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(2::rotate (ZERO) ((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003933 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list2:any list), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Model : any1: 4, any2: 6, any3: 0, any4: 8, any5: 6, any6: 3, any7: 0, any8: 2, any_list2: (Nil)
Model : any1: 4, any2: 2, any3: 4, any4: 6, any5: 6, any6: 4, any7: 1, any8: 3, any_list2: (Nil)
Model : any1: 4, any2: 0, any3: 6, any4: 2, any5: 7, any6: 2, any7: 3, any8: 4, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (2::(Nil)))) = (4::(6::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (3::(Nil)))) = (4::(2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (4::(Nil)))) = (4::(0::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (4::(Nil))))))
Simplifying took 0.008622 seconds
Result : true
advanced_generalize done
=================================================
Progress: 441


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
>>> induction any_list1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 442


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
>>> induction any_list1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 443


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
>>> induction any_list1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 444


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
>>> induction any_list1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 445


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
>>> induction any_list1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 446


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
>>> induction any_list1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 447


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
>>> induction any_list1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 448


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
>>> induction any_list1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 449


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

0 goal(s) more...

7 conjecture(s) more...
>>> induction any_list1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 450


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), rotate (nat1) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat1) ((Nil))))

4 goal(s) more...

5 conjecture(s) more...
>>> induction nat1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
Base5 : nat1 = ZERO
---------------------------------------
forall (any1:any) (any2:any), rotate (ZERO) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (ZERO) ((Nil))))

5 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
reflexivity(rank:17)
=================================================
Progress: 451


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
Base5 : nat1 = ZERO
---------------------------------------
forall (any1:any) (any2:any), rotate (ZERO) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (ZERO) ((Nil))))

5 goal(s) more...

5 conjecture(s) more...
>>> reflexivity(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (SUCC (nat2)) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (SUCC (nat2)) ((Nil))))

4 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:17)
=================================================
Progress: 452


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (SUCC (nat2)) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (SUCC (nat2)) ((Nil))))

4 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
intro any1(rank:17)
intro any2(rank:17)
rewrite IH1 in goal at 0(rank:33)
=================================================
Progress: 453


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> intro any1(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
forall (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
intro any2(rank:17)
rewrite IH1 in goal at 0(rank:33)
=================================================
Progress: 454


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> intro any2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:17)
=================================================
Progress: 455


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
forall (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> intro any2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:17)
=================================================
Progress: 456


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 1, any2: 5, nat2: ZERO
Model : any1: 7, any2: 8, nat2: ZERO
Model : any1: 1, any2: 5, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(5::(1::rotate (ZERO) ((Nil)))) = (1::(5::(Nil)))
(8::(7::rotate (ZERO) ((Nil)))) = (7::(8::(Nil)))
(5::(1::rotate (ZERO) ((Nil)))) = (1::(5::(Nil)))
Simplifying took 0.000133 seconds
Result : false
Lemma : forall (nat2:nat), rotate (nat2) ((Nil)) = (Nil)
Model : nat2: SUCC (ZERO)
Model : nat2: ZERO
Model : nat2: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
rotate (SUCC (ZERO)) ((Nil)) = (Nil)
Simplifying took 0.000037 seconds
Result : true
Lemma : forall (any1:any) (any2:any), any1 = any2
Model : any1: 4, any2: 0
Model : any1: 5, any2: 1
Model : any1: 2, any2: 5
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
4 = 0
5 = 1
2 = 5
Simplifying took 0.000037 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 7, any2: 3, nat2: SUCC (ZERO)
Model : any1: 6, any2: 0, nat2: ZERO
Model : any1: 0, any2: 8, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(3::(7::rotate (SUCC (ZERO)) ((Nil)))) = (7::(3::(Nil)))
(0::(6::rotate (ZERO) ((Nil)))) = (6::(0::(Nil)))
(8::(0::rotate (ZERO) ((Nil)))) = (0::(8::(Nil)))
Simplifying took 0.000118 seconds
Result : false
advanced_generalize done
=================================================
Progress: 457


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
(any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 4, any2: 0, nat2: ZERO
Model : any1: 2, any2: 4, nat2: SUCC (SUCC (ZERO))
Model : any1: 8, any2: 1, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(0::(4::rotate (ZERO) ((Nil)))) = (4::(0::(Nil)))
(4::(2::rotate (SUCC (SUCC (ZERO))) ((Nil)))) = (2::(4::(Nil)))
(1::(8::rotate (ZERO) ((Nil)))) = (8::(1::(Nil)))
Simplifying took 0.000141 seconds
Result : false
Lemma : forall (nat2:nat), rotate (nat2) ((Nil)) = (Nil)
Model : nat2: SUCC (ZERO)
Model : nat2: ZERO
Model : nat2: SUCC (SUCC (ZERO))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
rotate (SUCC (SUCC (ZERO))) ((Nil)) = (Nil)
Simplifying took 0.000049 seconds
Result : true
Lemma : forall (any1:any) (any2:any), any1 = any2
Model : any1: 3, any2: 2
Model : any1: 1, any2: 3
Model : any1: 4, any2: 5
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
3 = 2
1 = 3
4 = 5
Simplifying took 0.000048 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 7, any2: 5, nat2: ZERO
Model : any1: 0, any2: 4, nat2: ZERO
Model : any1: 0, any2: 8, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(5::(7::rotate (ZERO) ((Nil)))) = (7::(5::(Nil)))
(4::(0::rotate (ZERO) ((Nil)))) = (0::(4::(Nil)))
(8::(0::rotate (ZERO) ((Nil)))) = (0::(8::(Nil)))
Simplifying took 0.000144 seconds
Result : false
advanced_generalize done
=================================================
Progress: 458


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), rotate (nat1) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat1) ((Nil))))

4 goal(s) more...

5 conjecture(s) more...
>>> induction nat1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
Base5 : nat1 = ZERO
---------------------------------------
forall (any1:any) (any2:any), rotate (ZERO) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (ZERO) ((Nil))))

5 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
reflexivity(rank:17)
=================================================
Progress: 459


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
Base5 : nat1 = ZERO
---------------------------------------
forall (any1:any) (any2:any), rotate (ZERO) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (ZERO) ((Nil))))

5 goal(s) more...

5 conjecture(s) more...
>>> reflexivity(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (SUCC (nat2)) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (SUCC (nat2)) ((Nil))))

4 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:17)
=================================================
Progress: 460


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (SUCC (nat2)) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (SUCC (nat2)) ((Nil))))

4 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
intro any1(rank:17)
intro any2(rank:17)
rewrite IH1 in goal at 0(rank:33)
=================================================
Progress: 461


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> intro any1(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
forall (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
intro any2(rank:17)
rewrite IH1 in goal at 0(rank:33)
=================================================
Progress: 462


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> intro any2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:17)
=================================================
Progress: 463


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
forall (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> intro any2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:17)
=================================================
Progress: 464


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 0, any2: 0, nat2: ZERO
Model : any1: 4, any2: 8, nat2: ZERO
Model : any1: 7, any2: 2, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(0::(0::rotate (ZERO) ((Nil)))) = (0::(0::(Nil)))
(8::(4::rotate (ZERO) ((Nil)))) = (4::(8::(Nil)))
(2::(7::rotate (ZERO) ((Nil)))) = (7::(2::(Nil)))
Simplifying took 0.000119 seconds
Result : false
Lemma : forall (nat2:nat), rotate (nat2) ((Nil)) = (Nil)
Model : nat2: ZERO
Model : nat2: SUCC (ZERO)
Model : nat2: SUCC (SUCC (SUCC (ZERO)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((Nil)) = (Nil)
rotate (SUCC (ZERO)) ((Nil)) = (Nil)
rotate (SUCC (SUCC (SUCC (ZERO)))) ((Nil)) = (Nil)
Simplifying took 0.000043 seconds
Result : true
Lemma : forall (any1:any) (any2:any), any1 = any2
Model : any1: 4, any2: 5
Model : any1: 8, any2: 4
Model : any1: 2, any2: 6
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
4 = 5
8 = 4
2 = 6
Simplifying took 0.000052 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 0, any2: 3, nat2: ZERO
Model : any1: 8, any2: 4, nat2: ZERO
Model : any1: 7, any2: 0, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(3::(0::rotate (ZERO) ((Nil)))) = (0::(3::(Nil)))
(4::(8::rotate (ZERO) ((Nil)))) = (8::(4::(Nil)))
(0::(7::rotate (ZERO) ((Nil)))) = (7::(0::(Nil)))
Simplifying took 0.000114 seconds
Result : false
advanced_generalize done
=================================================
Progress: 465


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
(any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 5, any2: 6, nat2: SUCC (ZERO)
Model : any1: 2, any2: 4, nat2: ZERO
Model : any1: 3, any2: 2, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(6::(5::rotate (SUCC (ZERO)) ((Nil)))) = (5::(6::(Nil)))
(4::(2::rotate (ZERO) ((Nil)))) = (2::(4::(Nil)))
(2::(3::rotate (ZERO) ((Nil)))) = (3::(2::(Nil)))
Simplifying took 0.000134 seconds
Result : false
Lemma : forall (nat2:nat), rotate (nat2) ((Nil)) = (Nil)
Model : nat2: ZERO
Model : nat2: ZERO
Model : nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
Simplifying took 0.000033 seconds
Result : true
Lemma : forall (any1:any) (any2:any), any1 = any2
Model : any1: 8, any2: 8
Model : any1: 7, any2: 2
Model : any1: 2, any2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
8 = 8
7 = 2
2 = 0
Simplifying took 0.000049 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 4, any2: 1, nat2: ZERO
Model : any1: 0, any2: 1, nat2: SUCC (SUCC (ZERO))
Model : any1: 1, any2: 0, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(1::(4::rotate (ZERO) ((Nil)))) = (4::(1::(Nil)))
(1::(0::rotate (SUCC (SUCC (ZERO))) ((Nil)))) = (0::(1::(Nil)))
(0::(1::rotate (ZERO) ((Nil)))) = (1::(0::(Nil)))
Simplifying took 0.000094 seconds
Result : false
advanced_generalize done
=================================================
Progress: 466


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), rotate (nat1) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat1) ((Nil))))

4 goal(s) more...

5 conjecture(s) more...
>>> induction nat1(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
Base5 : nat1 = ZERO
---------------------------------------
forall (any1:any) (any2:any), rotate (ZERO) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (ZERO) ((Nil))))

5 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
reflexivity(rank:17)
=================================================
Progress: 467


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
Base5 : nat1 = ZERO
---------------------------------------
forall (any1:any) (any2:any), rotate (ZERO) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (ZERO) ((Nil))))

5 goal(s) more...

5 conjecture(s) more...
>>> reflexivity(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (SUCC (nat2)) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (SUCC (nat2)) ((Nil))))

4 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:17)
=================================================
Progress: 468


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (SUCC (nat2)) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (SUCC (nat2)) ((Nil))))

4 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
intro any1(rank:17)
intro any2(rank:17)
rewrite IH1 in goal at 0(rank:33)
=================================================
Progress: 469


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> intro any1(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
forall (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
intro any2(rank:17)
rewrite IH1 in goal at 0(rank:33)
=================================================
Progress: 470


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any) (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> intro any2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:17)
=================================================
Progress: 471


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
forall (any2:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> intro any2(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:17)
=================================================
Progress: 472


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any2 : any
---------------------------------------
forall (any1:any), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 8, any2: 0, nat2: ZERO
Model : any1: 1, any2: 4, nat2: ZERO
Model : any1: 7, any2: 7, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(0::(8::rotate (ZERO) ((Nil)))) = (8::(0::(Nil)))
(4::(1::rotate (ZERO) ((Nil)))) = (1::(4::(Nil)))
(7::(7::rotate (ZERO) ((Nil)))) = (7::(7::(Nil)))
Simplifying took 0.000124 seconds
Result : false
Lemma : forall (nat2:nat), rotate (nat2) ((Nil)) = (Nil)
Model : nat2: ZERO
Model : nat2: ZERO
Model : nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
rotate (ZERO) ((Nil)) = (Nil)
Simplifying took 0.000031 seconds
Result : true
Lemma : forall (any1:any) (any2:any), any1 = any2
Model : any1: 4, any2: 4
Model : any1: 2, any2: 2
Model : any1: 1, any2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
4 = 4
2 = 2
1 = 0
Simplifying took 0.000035 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 7, any2: 7, nat2: ZERO
Model : any1: 0, any2: 0, nat2: ZERO
Model : any1: 0, any2: 2, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(7::(7::rotate (ZERO) ((Nil)))) = (7::(7::(Nil)))
(0::(0::rotate (ZERO) ((Nil)))) = (0::(0::(Nil)))
(2::(0::rotate (ZERO) ((Nil)))) = (0::(2::(Nil)))
Simplifying took 0.000106 seconds
Result : false
advanced_generalize done
=================================================
Progress: 473


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
rotate (nat2) ((any2::(any1::(Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), rotate (nat1) ((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4)) = (any1::(any2::rotate (nat1) ((((any_list1 @ any_list2) @ any_list3) @ any_list4))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any) (any2:any), rotate (nat2) ((any1::(any2::(Nil)))) = (any1::(any2::rotate (nat2) ((Nil))))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
any2 : any
---------------------------------------
(any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
rewrite IH1 in goal at 0
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 1, any2: 0, nat2: ZERO
Model : any1: 6, any2: 5, nat2: ZERO
Model : any1: 0, any2: 6, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(0::(1::rotate (ZERO) ((Nil)))) = (1::(0::(Nil)))
(5::(6::rotate (ZERO) ((Nil)))) = (6::(5::(Nil)))
(6::(0::rotate (ZERO) ((Nil)))) = (0::(6::(Nil)))
Simplifying took 0.000116 seconds
Result : false
Lemma : forall (nat2:nat), rotate (nat2) ((Nil)) = (Nil)
Model : nat2: ZERO
Model : nat2: SUCC (ZERO)
Model : nat2: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) ((Nil)) = (Nil)
rotate (SUCC (ZERO)) ((Nil)) = (Nil)
rotate (SUCC (ZERO)) ((Nil)) = (Nil)
Simplifying took 0.000037 seconds
Result : true
Lemma : forall (any1:any) (any2:any), any1 = any2
Model : any1: 8, any2: 8
Model : any1: 5, any2: 7
Model : any1: 7, any2: 6
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
8 = 8
5 = 7
7 = 6
Simplifying took 0.000064 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (nat2:nat), (any2::(any1::rotate (nat2) ((Nil)))) = (any1::(any2::(Nil)))
Model : any1: 0, any2: 7, nat2: ZERO
Model : any1: 3, any2: 6, nat2: SUCC (ZERO)
Model : any1: 8, any2: 0, nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(7::(0::rotate (ZERO) ((Nil)))) = (0::(7::(Nil)))
(6::(3::rotate (SUCC (ZERO)) ((Nil)))) = (3::(6::(Nil)))
(0::(8::rotate (ZERO) ((Nil)))) = (8::(0::(Nil)))
Simplifying took 0.000117 seconds
Result : false
advanced_generalize done
=================================================
Progress: 474


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list3 @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((any_list3 @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
>>> induction any_list3(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list4) @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 475


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list3 @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((any_list3 @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
>>> induction any_list3(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list4) @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 476


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list3 : any list
Base2 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list4:any list) (any_list5:any list), rotate (nat1) ((any1::(any2::((any_list4 @ any_list5) @ any_list1)))) = (any1::(any2::rotate (nat1) (((any_list4 @ any_list5) @ any_list1))))

2 goal(s) more...

6 conjecture(s) more...
>>> induction any_list4(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list3 : any list
Base2 : any_list3 = (Nil)
any_list4 : any list
Base3 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list5:any list), rotate (nat1) ((any1::(any2::(((Nil) @ any_list5) @ any_list1)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list5) @ any_list1))))

3 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 477


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list3 @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((any_list3 @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
>>> induction any_list3(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list4) @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 478


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list3 @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((any_list3 @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
>>> induction any_list3(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list4) @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 479


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((any_list3 @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) (((any_list3 @ any_list4) @ any_list5))))

2 goal(s) more...

6 conjecture(s) more...
>>> induction any_list3(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list4) @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18)
=================================================
Progress: 480


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:19)
=================================================
Progress: 481


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:19)
=================================================
Progress: 482


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:19)
=================================================
Progress: 483


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:19)
=================================================
Progress: 484


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:19)
=================================================
Progress: 485


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:19)
=================================================
Progress: 486


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:19)
=================================================
Progress: 487


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:19)
=================================================
Progress: 488


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:19)
=================================================
Progress: 489


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:19)
=================================================
Progress: 490


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) (((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) (((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:19)
=================================================
Progress: 491


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list4) @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list4 @ any_list5)))) = (any1::(any2::rotate (nat1) ((any_list4 @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list4(rank:19)
=================================================
Progress: 492


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list4) @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list4 @ any_list5)))) = (any1::(any2::rotate (nat1) ((any_list4 @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list4(rank:19)
=================================================
Progress: 493


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list3 : any list
Base2 : any_list3 = (Nil)
any_list4 : any list
Base3 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list5:any list), rotate (nat1) ((any1::(any2::(((Nil) @ any_list5) @ any_list1)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list5) @ any_list1))))

3 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list3 : any list
Base2 : any_list3 = (Nil)
any_list4 : any list
Base3 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list5:any list), rotate (nat1) ((any1::(any2::(any_list5 @ any_list1)))) = (any1::(any2::rotate (nat1) ((any_list5 @ any_list1))))

3 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list5(rank:19)
=================================================
Progress: 494


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list4) @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list4 @ any_list5)))) = (any1::(any2::rotate (nat1) ((any_list4 @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list4(rank:19)
=================================================
Progress: 495


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list4) @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list4 @ any_list5)))) = (any1::(any2::rotate (nat1) ((any_list4 @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list4(rank:19)
=================================================
Progress: 496


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((Nil) @ any_list4) @ any_list5)))) = (any1::(any2::rotate (nat1) ((((Nil) @ any_list4) @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 18)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list4 @ any_list5)))) = (any1::(any2::rotate (nat1) ((any_list4 @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list4(rank:19)
=================================================
Progress: 497


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> induction any_list2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 498


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> induction any_list2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 499


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> induction any_list2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 500


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> induction any_list2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 501


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> induction any_list2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 502


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> induction any_list2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 503


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> induction any_list2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 504


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> induction any_list2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 505


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> induction any_list2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 506


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> induction any_list2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 507


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

1 goal(s) more...

7 conjecture(s) more...
>>> induction any_list2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 508


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list4 @ any_list5)))) = (any1::(any2::rotate (nat1) ((any_list4 @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
>>> induction any_list4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list5)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list5))))

4 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 509


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list4 @ any_list5)))) = (any1::(any2::rotate (nat1) ((any_list4 @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
>>> induction any_list4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list5)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list5))))

4 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 510


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list3 : any list
Base2 : any_list3 = (Nil)
any_list4 : any list
Base3 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list5:any list), rotate (nat1) ((any1::(any2::(any_list5 @ any_list1)))) = (any1::(any2::rotate (nat1) ((any_list5 @ any_list1))))

3 goal(s) more...

6 conjecture(s) more...
>>> induction any_list5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list3 : any list
Base2 : any_list3 = (Nil)
any_list4 : any list
Base3 : any_list4 = (Nil)
any_list5 : any list
Base4 : any_list5 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list1)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list1))))

4 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 511


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list4 @ any_list5)))) = (any1::(any2::rotate (nat1) ((any_list4 @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
>>> induction any_list4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list5)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list5))))

4 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 512


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list4 @ any_list5)))) = (any1::(any2::rotate (nat1) ((any_list4 @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
>>> induction any_list4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list5)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list5))))

4 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 513


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(any_list4 @ any_list5)))) = (any1::(any2::rotate (nat1) ((any_list4 @ any_list5))))

3 goal(s) more...

6 conjecture(s) more...
>>> induction any_list4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list5)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list5))))

4 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 514


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:20)
=================================================
Progress: 515


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:20)
=================================================
Progress: 516


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:20)
=================================================
Progress: 517


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:20)
=================================================
Progress: 518


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:20)
=================================================
Progress: 519


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:20)
=================================================
Progress: 520


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:20)
=================================================
Progress: 521


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:20)
=================================================
Progress: 522


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:20)
=================================================
Progress: 523


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:20)
=================================================
Progress: 524


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((((Nil) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6)) = (any1::(any2::rotate (nat1) ((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (nat1:nat), rotate (nat1) ((any1::(any2::(((any_list3 @ any_list4) @ any_list5) @ any_list6)))) = (any1::(any2::rotate (nat1) ((((any_list3 @ any_list4) @ any_list5) @ any_list6))))

2 goal(s) more...

7 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:20)
=================================================
Progress: 525


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list5)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list5))))

4 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list5))) = (any1::(any2::rotate (nat1) (any_list5)))

4 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list5(rank:20)
=================================================
Progress: 526


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list5)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list5))))

4 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list5))) = (any1::(any2::rotate (nat1) (any_list5)))

4 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list5(rank:20)
=================================================
Progress: 527


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list3 : any list
Base2 : any_list3 = (Nil)
any_list4 : any list
Base3 : any_list4 = (Nil)
any_list5 : any list
Base4 : any_list5 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list1)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list1))))

4 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list), rotate (nat1) (((((((any_list2 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list3) @ any_list4) @ any_list5) @ any_list1)) = (any1::(any2::rotate (nat1) (((((any_list2 @ any_list3) @ any_list4) @ any_list5) @ any_list1))))
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list3 : any list
Base2 : any_list3 = (Nil)
any_list4 : any list
Base3 : any_list4 = (Nil)
any_list5 : any list
Base4 : any_list5 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list1))) = (any1::(any2::rotate (nat1) (any_list1)))

4 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:20)
=================================================
Progress: 528


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list5)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list5))))

4 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list5))) = (any1::(any2::rotate (nat1) (any_list5)))

4 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list5(rank:20)
=================================================
Progress: 529


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list5)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list5))))

4 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list5))) = (any1::(any2::rotate (nat1) (any_list5)))

4 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list5(rank:20)
=================================================
Progress: 530


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::((Nil) @ any_list5)))) = (any1::(any2::rotate (nat1) (((Nil) @ any_list5))))

4 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat), rotate (nat1) (((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5)) = (any1::(any2::rotate (nat1) (((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5))))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
any_list3 : any list
Base3 : any_list3 = (Nil)
any_list4 : any list
Base4 : any_list4 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list5:any list) (nat1:nat), rotate (nat1) ((any1::(any2::any_list5))) = (any1::(any2::rotate (nat1) (any_list5)))

4 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
induction any_list5(rank:20)
=================================================
Progress: 531


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

0 goal(s) more...

8 conjecture(s) more...
>>> induction any_list1(rank : 20)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) (((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) (((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (nat1:nat), rotate (nat1) ((((((((((Nil) @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7)) = (any1::(any2::rotate (nat1) ((((((((Nil) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7))))

1 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:20)
=================================================
Progress: 532


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> induction any_list1(rank : 20)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

1 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
reflexivity(rank:19)
=================================================
Progress: 533


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len ((Nil))) (((((((((((Nil) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len ((Nil))) (((((((((Nil) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

1 goal(s) more...

8 conjecture(s) more...
>>> reflexivity(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len ((any9::any_list2))) (((((((((((any9::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len ((any9::any_list2))) (((((((((any9::any_list2) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:19)
=================================================
Progress: 534


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len ((any9::any_list2))) (((((((((((any9::any_list2) @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len ((any9::any_list2))) (((((((((any9::any_list2) @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> simpl in goal(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 8
intro any1(rank:19)
intro any3(rank:19)
intro any5(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
intro any4(rank:19)
intro any2(rank:19)
=================================================
Progress: 535


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any1(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 7
intro any2(rank:19)
intro any4(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
intro any5(rank:19)
intro any3(rank:19)
=================================================
Progress: 536


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 6
intro any3(rank:19)
intro any5(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
intro any4(rank:19)
=================================================
Progress: 537


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any3(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 5
intro any4(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
intro any5(rank:19)
=================================================
Progress: 538


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 4
intro any5(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 539


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 540


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 541


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 542


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any8
Lemma : forall (any1:any) (any2:any) (arg904:any list) (arg905:any list) (arg906:any list) (arg907:any list) (arg908:any list) (arg909:any list) (arg910:any list) (arg911:any list) (arg912:nat), rotate (arg912) ((((((((((arg904 @ (any1::(Nil))) @ (any2::(Nil))) @ arg905) @ arg906) @ arg907) @ arg908) @ arg909) @ arg910) @ arg911)) = (any1::(any2::rotate (arg912) ((((((((arg904 @ arg905) @ arg906) @ arg907) @ arg908) @ arg909) @ arg910) @ arg911))))
Model : any1: 7, any2: 7, arg904: (1::(Nil)), arg905: (Nil), arg906: (Nil), arg907: (Nil), arg908: (3::(Nil)), arg909: (Nil), arg910: (Nil), arg911: (Nil), arg912: ZERO
Model : any1: 0, any2: 7, arg904: (Nil), arg905: (Nil), arg906: (Nil), arg907: (Nil), arg908: (Nil), arg909: (Nil), arg910: (Nil), arg911: (Nil), arg912: ZERO
Model : any1: 6, any2: 0, arg904: (Nil), arg905: (8::(6::(Nil))), arg906: (Nil), arg907: (Nil), arg908: (Nil), arg909: (Nil), arg910: (Nil), arg911: (Nil), arg912: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((1::(Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(7::rotate (ZERO) (((((((((1::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (0::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(7::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (6::(Nil))) @ (0::(Nil))) @ (8::(6::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(0::rotate (ZERO) (((((((((Nil) @ (8::(6::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.004349 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 1, any2: 5, any3: 2, any4: 7, any5: 3, any6: 0, any7: 6, any8: 5, any9: 7, any_list2: (Nil)
Model : any1: 1, any2: 1, any3: 8, any4: 6, any5: 6, any6: 2, any7: 5, any8: 5, any9: 4, any_list2: (Nil)
Model : any1: 4, any2: 0, any3: 4, any4: 7, any5: 1, any6: 6, any7: 3, any8: 8, any9: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (7::(Nil)))) = (1::(5::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (4::(Nil)))) = (1::(1::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (7::(Nil)))) = (4::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (7::(Nil))))))
Simplifying took 0.012765 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 543


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list1:any list), rotate (len (any_list1)) (((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list1:any list), rotate (len (any_list1)) (((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list1)) (((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:22)
=================================================
Progress: 544


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any2(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 6
intro any3(rank:19)
intro any5(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
intro any4(rank:19)
=================================================
Progress: 545


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any3(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 5
intro any4(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
intro any5(rank:19)
=================================================
Progress: 546


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 4
intro any5(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 547


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 548


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 549


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 550


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any8 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any8
Lemma : forall (any1:any) (any2:any) (arg913:any list) (arg914:any list) (arg915:any list) (arg916:any list) (arg917:any list) (arg918:any list) (arg919:any list) (arg920:any list) (arg921:nat), rotate (arg921) ((((((((((arg913 @ (any1::(Nil))) @ (any2::(Nil))) @ arg914) @ arg915) @ arg916) @ arg917) @ arg918) @ arg919) @ arg920)) = (any1::(any2::rotate (arg921) ((((((((arg913 @ arg914) @ arg915) @ arg916) @ arg917) @ arg918) @ arg919) @ arg920))))
Model : any1: 2, any2: 2, arg913: (Nil), arg914: (Nil), arg915: (Nil), arg916: (Nil), arg917: (Nil), arg918: (Nil), arg919: (Nil), arg920: (7::(4::(0::(Nil)))), arg921: ZERO
Model : any1: 4, any2: 3, arg913: (Nil), arg914: (Nil), arg915: (Nil), arg916: (Nil), arg917: (Nil), arg918: (Nil), arg919: (8::(4::(6::(Nil)))), arg920: (Nil), arg921: ZERO
Model : any1: 3, any2: 2, arg913: (Nil), arg914: (0::(Nil)), arg915: (3::(Nil)), arg916: (Nil), arg917: (Nil), arg918: (Nil), arg919: (Nil), arg920: (Nil), arg921: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (2::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(4::(0::(Nil)))))) = (2::(2::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(4::(0::(Nil))))))))
rotate (ZERO) (((((((((((Nil) @ (4::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(4::(6::(Nil))))) @ (Nil))) = (4::(3::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(4::(6::(Nil))))) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (3::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(2::rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003192 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any8 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 551


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any8 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg913:any list) (arg914:any list) (arg915:any list) (arg916:any list) (arg917:any list) (arg918:any list) (arg919:any list) (arg920:any list) (arg921:nat), rotate (arg921) ((((((((((arg913 @ (any1::(Nil))) @ (any2::(Nil))) @ arg914) @ arg915) @ arg916) @ arg917) @ arg918) @ arg919) @ arg920)) = (any1::(any2::rotate (arg921) ((((((((arg913 @ arg914) @ arg915) @ arg916) @ arg917) @ arg918) @ arg919) @ arg920))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:22)
=================================================
Progress: 552


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any3(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 5
intro any4(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
intro any5(rank:19)
=================================================
Progress: 553


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 4
intro any5(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 554


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 555


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 556


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 557


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any8 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any8
Lemma : forall (any1:any) (any2:any) (arg922:any list) (arg923:any list) (arg924:any list) (arg925:any list) (arg926:any list) (arg927:any list) (arg928:any list) (arg929:any list) (arg930:nat), rotate (arg930) ((((((((((arg922 @ (any1::(Nil))) @ (any2::(Nil))) @ arg923) @ arg924) @ arg925) @ arg926) @ arg927) @ arg928) @ arg929)) = (any1::(any2::rotate (arg930) ((((((((arg922 @ arg923) @ arg924) @ arg925) @ arg926) @ arg927) @ arg928) @ arg929))))
Model : any1: 1, any2: 1, arg922: (Nil), arg923: (Nil), arg924: (2::(Nil)), arg925: (Nil), arg926: (Nil), arg927: (Nil), arg928: (Nil), arg929: (Nil), arg930: ZERO
Model : any1: 2, any2: 4, arg922: (7::(Nil)), arg923: (Nil), arg924: (Nil), arg925: (Nil), arg926: (Nil), arg927: (3::(Nil)), arg928: (Nil), arg929: (Nil), arg930: ZERO
Model : any1: 4, any2: 3, arg922: (4::(Nil)), arg923: (Nil), arg924: (Nil), arg925: (Nil), arg926: (2::(Nil)), arg927: (Nil), arg928: (7::(Nil)), arg929: (Nil), arg930: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (1::(Nil))) @ (1::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(1::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((7::(Nil)) @ (2::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (2::(4::rotate (ZERO) (((((((((7::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((4::(Nil)) @ (4::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil))) = (4::(3::rotate (ZERO) (((((((((4::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)))))
Simplifying took 0.003986 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 7, any2: 1, any3: 0, any4: 3, any5: 0, any6: 6, any7: 0, any8: 2, any9: 2, any_list2: (5::(Nil))
Model : any1: 0, any2: 3, any3: 7, any4: 5, any5: 2, any6: 8, any7: 7, any8: 1, any9: 8, any_list2: (Nil)
Model : any1: 6, any2: 1, any3: 2, any4: 0, any5: 0, any6: 5, any7: 3, any8: 0, any9: 8, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((5::(Nil)))) ((((((((((((5::(Nil)) @ (Nil)) @ (7::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (2::(Nil)))) = (7::(1::rotate (len ((5::(Nil)))) ((((((((((5::(Nil)) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (8::(Nil)))) = (0::(3::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (8::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (8::(Nil)))) = (6::(1::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (8::(Nil))))))
Simplifying took 0.013047 seconds
Result : true
advanced_generalize done
=================================================
Progress: 558


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 4
intro any5(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 559


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 560


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 561


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 562


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any8
Lemma : forall (any1:any) (any2:any) (arg931:any list) (arg932:any list) (arg933:any list) (arg934:any list) (arg935:any list) (arg936:any list) (arg937:any list) (arg938:any list) (arg939:nat), rotate (arg939) ((((((((((arg931 @ (any1::(Nil))) @ (any2::(Nil))) @ arg932) @ arg933) @ arg934) @ arg935) @ arg936) @ arg937) @ arg938)) = (any1::(any2::rotate (arg939) ((((((((arg931 @ arg932) @ arg933) @ arg934) @ arg935) @ arg936) @ arg937) @ arg938))))
Model : any1: 2, any2: 1, arg931: (1::(Nil)), arg932: (Nil), arg933: (Nil), arg934: (Nil), arg935: (Nil), arg936: (Nil), arg937: (Nil), arg938: (Nil), arg939: SUCC (ZERO)
Model : any1: 5, any2: 4, arg931: (Nil), arg932: (2::(Nil)), arg933: (0::(Nil)), arg934: (Nil), arg935: (Nil), arg936: (Nil), arg937: (3::(Nil)), arg938: (Nil), arg939: ZERO
Model : any1: 8, any2: 3, arg931: (Nil), arg932: (Nil), arg933: (Nil), arg934: (Nil), arg935: (Nil), arg936: (Nil), arg937: (2::(Nil)), arg938: (5::(Nil)), arg939: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((((1::(Nil)) @ (2::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(1::rotate (SUCC (ZERO)) (((((((((1::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (5::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (5::(4::rotate (ZERO) (((((((((Nil) @ (2::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)))))
rotate (SUCC (ZERO)) (((((((((((Nil) @ (8::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (5::(Nil)))) = (8::(3::rotate (SUCC (ZERO)) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (5::(Nil))))))
Simplifying took 0.003698 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 3, any2: 0, any3: 8, any4: 0, any5: 8, any6: 4, any7: 7, any8: 3, any9: 5, any_list2: (Nil)
Model : any1: 1, any2: 6, any3: 3, any4: 6, any5: 5, any6: 8, any7: 4, any8: 2, any9: 0, any_list2: (6::(Nil))
Model : any1: 2, any2: 3, any3: 5, any4: 7, any5: 4, any6: 4, any7: 5, any8: 5, any9: 1, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (5::(Nil)))) = (3::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (5::(Nil))))))
rotate (len ((6::(Nil)))) ((((((((((((6::(Nil)) @ (Nil)) @ (1::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil)))) = (1::(6::rotate (len ((6::(Nil)))) ((((((((((6::(Nil)) @ (Nil)) @ (3::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (1::(Nil)))) = (2::(3::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (1::(Nil))))))
Simplifying took 0.016141 seconds
Result : true
advanced_generalize done
=================================================
Progress: 563


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 564


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 565


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 566


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
intro any8
Lemma : forall (any1:any) (any2:any) (arg940:any list) (arg941:any list) (arg942:any list) (arg943:any list) (arg944:any list) (arg945:any list) (arg946:any list) (arg947:any list) (arg948:nat), rotate (arg948) ((((((((((arg940 @ (any1::(Nil))) @ (any2::(Nil))) @ arg941) @ arg942) @ arg943) @ arg944) @ arg945) @ arg946) @ arg947)) = (any1::(any2::rotate (arg948) ((((((((arg940 @ arg941) @ arg942) @ arg943) @ arg944) @ arg945) @ arg946) @ arg947))))
Model : any1: 3, any2: 3, arg940: (Nil), arg941: (Nil), arg942: (Nil), arg943: (Nil), arg944: (Nil), arg945: (Nil), arg946: (Nil), arg947: (Nil), arg948: SUCC (SUCC (ZERO))
Model : any1: 6, any2: 8, arg940: (Nil), arg941: (Nil), arg942: (4::(4::(2::(Nil)))), arg943: (Nil), arg944: (Nil), arg945: (7::(Nil)), arg946: (Nil), arg947: (Nil), arg948: ZERO
Model : any1: 8, any2: 2, arg940: (Nil), arg941: (Nil), arg942: (Nil), arg943: (Nil), arg944: (0::(Nil)), arg945: (Nil), arg946: (Nil), arg947: (Nil), arg948: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (SUCC (ZERO))) (((((((((((Nil) @ (3::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(3::rotate (SUCC (SUCC (ZERO))) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (6::(Nil))) @ (8::(Nil))) @ (Nil)) @ (4::(4::(2::(Nil))))) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil))) = (6::(8::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (4::(4::(2::(Nil))))) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (8::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(2::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.004296 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 567


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg940:any list) (arg941:any list) (arg942:any list) (arg943:any list) (arg944:any list) (arg945:any list) (arg946:any list) (arg947:any list) (arg948:nat), rotate (arg948) ((((((((((arg940 @ (any1::(Nil))) @ (any2::(Nil))) @ arg941) @ arg942) @ arg943) @ arg944) @ arg945) @ arg946) @ arg947)) = (any1::(any2::rotate (arg948) ((((((((arg940 @ arg941) @ arg942) @ arg943) @ arg944) @ arg945) @ arg946) @ arg947))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:22)
=================================================
Progress: 568


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 569


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 570


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any5
intro any8
Lemma : forall (any1:any) (any2:any) (arg949:any list) (arg950:any list) (arg951:any list) (arg952:any list) (arg953:any list) (arg954:any list) (arg955:any list) (arg956:any list) (arg957:nat), rotate (arg957) ((((((((((arg949 @ (any1::(Nil))) @ (any2::(Nil))) @ arg950) @ arg951) @ arg952) @ arg953) @ arg954) @ arg955) @ arg956)) = (any1::(any2::rotate (arg957) ((((((((arg949 @ arg950) @ arg951) @ arg952) @ arg953) @ arg954) @ arg955) @ arg956))))
Model : any1: 4, any2: 0, arg949: (Nil), arg950: (3::(Nil)), arg951: (Nil), arg952: (0::(0::(Nil))), arg953: (Nil), arg954: (4::(Nil)), arg955: (Nil), arg956: (Nil), arg957: ZERO
Model : any1: 2, any2: 0, arg949: (Nil), arg950: (Nil), arg951: (Nil), arg952: (Nil), arg953: (Nil), arg954: (5::(Nil)), arg955: (Nil), arg956: (6::(Nil)), arg957: ZERO
Model : any1: 4, any2: 0, arg949: (6::(Nil)), arg950: (Nil), arg951: (3::(Nil)), arg952: (7::(Nil)), arg953: (Nil), arg954: (Nil), arg955: (Nil), arg956: (1::(Nil)), arg957: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (4::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (0::(0::(Nil)))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil))) = (4::(0::rotate (ZERO) (((((((((Nil) @ (3::(Nil))) @ (Nil)) @ (0::(0::(Nil)))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (2::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (6::(Nil)))) = (2::(0::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (6::(Nil))))))
rotate (ZERO) (((((((((((6::(Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (Nil)) @ (3::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (4::(0::rotate (ZERO) (((((((((6::(Nil)) @ (Nil)) @ (3::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))))))
Simplifying took 0.005210 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 6, any2: 6, any3: 4, any4: 0, any5: 6, any6: 0, any7: 3, any8: 7, any9: 6, any_list2: (Nil)
Model : any1: 6, any2: 0, any3: 5, any4: 5, any5: 1, any6: 1, any7: 7, any8: 8, any9: 4, any_list2: (Nil)
Model : any1: 3, any2: 0, any3: 0, any4: 7, any5: 7, any6: 1, any7: 2, any8: 5, any9: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (6::(Nil)))) = (6::(6::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (4::(Nil)))) = (6::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (0::(Nil)))) = (3::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (0::(Nil))))))
Simplifying took 0.011484 seconds
Result : true
advanced_generalize done
=================================================
Progress: 571


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 572


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any6 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any6
intro any8
Lemma : forall (any1:any) (any2:any) (arg958:any list) (arg959:any list) (arg960:any list) (arg961:any list) (arg962:any list) (arg963:any list) (arg964:any list) (arg965:any list) (arg966:nat), rotate (arg966) ((((((((((arg958 @ (any1::(Nil))) @ (any2::(Nil))) @ arg959) @ arg960) @ arg961) @ arg962) @ arg963) @ arg964) @ arg965)) = (any1::(any2::rotate (arg966) ((((((((arg958 @ arg959) @ arg960) @ arg961) @ arg962) @ arg963) @ arg964) @ arg965))))
Model : any1: 7, any2: 2, arg958: (Nil), arg959: (Nil), arg960: (Nil), arg961: (Nil), arg962: (Nil), arg963: (Nil), arg964: (6::(Nil)), arg965: (Nil), arg966: ZERO
Model : any1: 7, any2: 0, arg958: (Nil), arg959: (5::(Nil)), arg960: (1::(0::(0::(Nil)))), arg961: (2::(Nil)), arg962: (Nil), arg963: (Nil), arg964: (Nil), arg965: (Nil), arg966: ZERO
Model : any1: 4, any2: 4, arg958: (Nil), arg959: (Nil), arg960: (2::(Nil)), arg961: (Nil), arg962: (Nil), arg963: (Nil), arg964: (Nil), arg965: (Nil), arg966: SUCC (SUCC (ZERO))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (7::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil))) = (7::(2::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (7::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (1::(0::(0::(Nil))))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(0::rotate (ZERO) (((((((((Nil) @ (5::(Nil))) @ (1::(0::(0::(Nil))))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (SUCC (ZERO))) (((((((((((Nil) @ (4::(Nil))) @ (4::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(4::rotate (SUCC (SUCC (ZERO))) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.004872 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 3, any2: 0, any3: 2, any4: 7, any5: 6, any6: 2, any7: 1, any8: 5, any9: 7, any_list2: (Nil)
Model : any1: 3, any2: 1, any3: 0, any4: 0, any5: 1, any6: 6, any7: 1, any8: 4, any9: 0, any_list2: (3::(Nil))
Model : any1: 7, any2: 0, any3: 4, any4: 3, any5: 6, any6: 8, any7: 7, any8: 3, any9: 0, any_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (7::(Nil)))) = (3::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (7::(Nil))))))
rotate (len ((3::(Nil)))) ((((((((((((3::(Nil)) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (0::(Nil)))) = (3::(1::rotate (len ((3::(Nil)))) ((((((((((3::(Nil)) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (0::(Nil))))))
rotate (len ((0::(Nil)))) ((((((((((((0::(Nil)) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (0::(Nil)))) = (7::(0::rotate (len ((0::(Nil)))) ((((((((((0::(Nil)) @ (Nil)) @ (4::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (0::(Nil))))))
Simplifying took 0.016273 seconds
Result : true
advanced_generalize done
=================================================
Progress: 573


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any7
intro any8
Lemma : forall (any1:any) (any2:any) (arg967:any list) (arg968:any list) (arg969:any list) (arg970:any list) (arg971:any list) (arg972:any list) (arg973:any list) (arg974:any list) (arg975:nat), rotate (arg975) ((((((((((arg967 @ (any1::(Nil))) @ (any2::(Nil))) @ arg968) @ arg969) @ arg970) @ arg971) @ arg972) @ arg973) @ arg974)) = (any1::(any2::rotate (arg975) ((((((((arg967 @ arg968) @ arg969) @ arg970) @ arg971) @ arg972) @ arg973) @ arg974))))
Model : any1: 2, any2: 3, arg967: (Nil), arg968: (7::(Nil)), arg969: (Nil), arg970: (Nil), arg971: (Nil), arg972: (Nil), arg973: (6::(Nil)), arg974: (Nil), arg975: ZERO
Model : any1: 1, any2: 7, arg967: (Nil), arg968: (Nil), arg969: (3::(Nil)), arg970: (Nil), arg971: (Nil), arg972: (6::(Nil)), arg973: (Nil), arg974: (Nil), arg975: ZERO
Model : any1: 3, any2: 6, arg967: (Nil), arg968: (Nil), arg969: (Nil), arg970: (Nil), arg971: (7::(Nil)), arg972: (3::(Nil)), arg973: (Nil), arg974: (Nil), arg975: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (2::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil))) = (2::(3::rotate (ZERO) (((((((((Nil) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (1::(Nil))) @ (7::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil))) = (1::(7::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (3::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (3::(6::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.004075 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 574


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg967:any list) (arg968:any list) (arg969:any list) (arg970:any list) (arg971:any list) (arg972:any list) (arg973:any list) (arg974:any list) (arg975:nat), rotate (arg975) ((((((((((arg967 @ (any1::(Nil))) @ (any2::(Nil))) @ arg968) @ arg969) @ arg970) @ arg971) @ arg972) @ arg973) @ arg974)) = (any1::(any2::rotate (arg975) ((((((((arg967 @ arg968) @ arg969) @ arg970) @ arg971) @ arg972) @ arg973) @ arg974))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:22)
=================================================
Progress: 575


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any3(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 5
intro any4(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
intro any5(rank:19)
=================================================
Progress: 576


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 4
intro any5(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 577


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any5 : any
---------------------------------------
forall (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 578


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 579


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any7 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 580


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any8 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any8
Lemma : forall (any1:any) (any2:any) (arg976:any list) (arg977:any list) (arg978:any list) (arg979:any list) (arg980:any list) (arg981:any list) (arg982:any list) (arg983:any list) (arg984:nat), rotate (arg984) ((((((((((arg976 @ (any1::(Nil))) @ (any2::(Nil))) @ arg977) @ arg978) @ arg979) @ arg980) @ arg981) @ arg982) @ arg983)) = (any1::(any2::rotate (arg984) ((((((((arg976 @ arg977) @ arg978) @ arg979) @ arg980) @ arg981) @ arg982) @ arg983))))
Model : any1: 7, any2: 5, arg976: (Nil), arg977: (Nil), arg978: (Nil), arg979: (Nil), arg980: (8::(Nil)), arg981: (Nil), arg982: (3::(Nil)), arg983: (Nil), arg984: ZERO
Model : any1: 8, any2: 2, arg976: (Nil), arg977: (Nil), arg978: (Nil), arg979: (Nil), arg980: (4::(Nil)), arg981: (Nil), arg982: (3::(Nil)), arg983: (Nil), arg984: SUCC (ZERO)
Model : any1: 6, any2: 2, arg976: (Nil), arg977: (Nil), arg978: (3::(4::(1::(Nil)))), arg979: (Nil), arg980: (Nil), arg981: (Nil), arg982: (Nil), arg983: (0::(Nil)), arg984: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (7::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (7::(5::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil)))))
rotate (SUCC (ZERO)) (((((((((((Nil) @ (8::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (8::(2::rotate (SUCC (ZERO)) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (6::(Nil))) @ (2::(Nil))) @ (Nil)) @ (3::(4::(1::(Nil))))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (6::(2::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (3::(4::(1::(Nil))))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))))))
Simplifying took 0.004720 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 5, any2: 0, any3: 0, any4: 8, any5: 1, any6: 7, any7: 1, any8: 6, any9: 8, any_list2: (6::(Nil))
Model : any1: 0, any2: 7, any3: 7, any4: 7, any5: 5, any6: 8, any7: 6, any8: 2, any9: 5, any_list2: (Nil)
Model : any1: 5, any2: 0, any3: 7, any4: 5, any5: 0, any6: 7, any7: 0, any8: 8, any9: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((6::(Nil)))) ((((((((((((6::(Nil)) @ (Nil)) @ (5::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (8::(Nil)))) = (5::(0::rotate (len ((6::(Nil)))) ((((((((((6::(Nil)) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (8::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (5::(Nil)))) = (0::(7::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (7::(Nil)))) = (5::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (7::(Nil))))))
Simplifying took 0.016371 seconds
Result : true
advanced_generalize done
=================================================
Progress: 581


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 4
intro any5(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 582


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any5 : any
---------------------------------------
forall (any2:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 583


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any6 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 584


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any7 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 585


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any8 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any8
Lemma : forall (any1:any) (any2:any) (arg985:any list) (arg986:any list) (arg987:any list) (arg988:any list) (arg989:any list) (arg990:any list) (arg991:any list) (arg992:any list) (arg993:nat), rotate (arg993) ((((((((((arg985 @ (any1::(Nil))) @ (any2::(Nil))) @ arg986) @ arg987) @ arg988) @ arg989) @ arg990) @ arg991) @ arg992)) = (any1::(any2::rotate (arg993) ((((((((arg985 @ arg986) @ arg987) @ arg988) @ arg989) @ arg990) @ arg991) @ arg992))))
Model : any1: 7, any2: 5, arg985: (Nil), arg986: (Nil), arg987: (Nil), arg988: (Nil), arg989: (Nil), arg990: (Nil), arg991: (Nil), arg992: (Nil), arg993: ZERO
Model : any1: 5, any2: 1, arg985: (Nil), arg986: (Nil), arg987: (Nil), arg988: (Nil), arg989: (2::(7::(Nil))), arg990: (Nil), arg991: (Nil), arg992: (Nil), arg993: ZERO
Model : any1: 2, any2: 5, arg985: (Nil), arg986: (Nil), arg987: (Nil), arg988: (Nil), arg989: (3::(3::(Nil))), arg990: (1::(Nil)), arg991: (Nil), arg992: (Nil), arg993: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (7::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(5::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (5::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(7::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(1::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(7::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) (((((((((((Nil) @ (2::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(3::(Nil)))) @ (1::(Nil))) @ (Nil)) @ (Nil))) = (2::(5::rotate (SUCC (ZERO)) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(3::(Nil)))) @ (1::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.003683 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 2, any2: 7, any3: 4, any4: 8, any5: 2, any6: 0, any7: 5, any8: 0, any9: 2, any_list2: (Nil)
Model : any1: 7, any2: 5, any3: 3, any4: 1, any5: 7, any6: 3, any7: 6, any8: 3, any9: 3, any_list2: (Nil)
Model : any1: 7, any2: 0, any3: 7, any4: 0, any5: 8, any6: 0, any7: 6, any8: 4, any9: 4, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (2::(Nil)))) = (2::(7::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (8::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (3::(Nil)))) = (7::(5::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (4::(Nil)))) = (7::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (4::(Nil))))))
Simplifying took 0.011984 seconds
Result : true
advanced_generalize done
=================================================
Progress: 586


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 587


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any4 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 588


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any4 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 589


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any4 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any4 : any
any8 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any4
intro any8
Lemma : forall (any1:any) (any2:any) (arg1000:any list) (arg1001:any list) (arg1002:nat) (arg994:any list) (arg995:any list) (arg996:any list) (arg997:any list) (arg998:any list) (arg999:any list), rotate (arg1002) ((((((((((arg994 @ (any1::(Nil))) @ (any2::(Nil))) @ arg995) @ arg996) @ arg997) @ arg998) @ arg999) @ arg1000) @ arg1001)) = (any1::(any2::rotate (arg1002) ((((((((arg994 @ arg995) @ arg996) @ arg997) @ arg998) @ arg999) @ arg1000) @ arg1001))))
Model : any1: 4, any2: 0, arg1000: (Nil), arg1001: (Nil), arg1002: ZERO, arg994: (Nil), arg995: (Nil), arg996: (Nil), arg997: (Nil), arg998: (Nil), arg999: (Nil)
Model : any1: 4, any2: 1, arg1000: (Nil), arg1001: (Nil), arg1002: SUCC (SUCC (ZERO)), arg994: (Nil), arg995: (Nil), arg996: (Nil), arg997: (Nil), arg998: (Nil), arg999: (Nil)
Model : any1: 2, any2: 2, arg1000: (7::(Nil)), arg1001: (3::(Nil)), arg1002: ZERO, arg994: (Nil), arg995: (Nil), arg996: (Nil), arg997: (8::(Nil)), arg998: (3::(Nil)), arg999: (0::(0::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (4::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(0::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (SUCC (SUCC (ZERO))) (((((((((((Nil) @ (4::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(1::rotate (SUCC (SUCC (ZERO))) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (2::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (3::(Nil))) @ (0::(0::(Nil)))) @ (7::(Nil))) @ (3::(Nil)))) = (2::(2::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (3::(Nil))) @ (0::(0::(Nil)))) @ (7::(Nil))) @ (3::(Nil))))))
Simplifying took 0.003448 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any4 : any
any8 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 590


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any4 : any
any8 : any
---------------------------------------
forall (any2:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg1000:any list) (arg1001:any list) (arg1002:nat) (arg994:any list) (arg995:any list) (arg996:any list) (arg997:any list) (arg998:any list) (arg999:any list), rotate (arg1002) ((((((((((arg994 @ (any1::(Nil))) @ (any2::(Nil))) @ arg995) @ arg996) @ arg997) @ arg998) @ arg999) @ arg1000) @ arg1001)) = (any1::(any2::rotate (arg1002) ((((((((arg994 @ arg995) @ arg996) @ arg997) @ arg998) @ arg999) @ arg1000) @ arg1001))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list), rotate (nat1) ((((((((((any_list3 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8) @ any_list1) @ any_list2)) = (any1::(any2::rotate (nat1) ((((((((any_list3 @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8) @ any_list1) @ any_list2))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (nat1:nat) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list), rotate (nat1) ((((((((((any_list3 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8) @ any_list1) @ any_list2)) = (any1::(any2::rotate (nat1) ((((((((any_list3 @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8) @ any_list1) @ any_list2))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:22)
=================================================
Progress: 591


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 592


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any5 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 593


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any5 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any5 : any
any8 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any5
intro any8
Lemma : forall (any1:any) (any2:any) (arg1003:any list) (arg1004:any list) (arg1005:any list) (arg1006:any list) (arg1007:any list) (arg1008:any list) (arg1009:any list) (arg1010:any list) (arg1011:nat), rotate (arg1011) ((((((((((arg1003 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1004) @ arg1005) @ arg1006) @ arg1007) @ arg1008) @ arg1009) @ arg1010)) = (any1::(any2::rotate (arg1011) ((((((((arg1003 @ arg1004) @ arg1005) @ arg1006) @ arg1007) @ arg1008) @ arg1009) @ arg1010))))
Model : any1: 0, any2: 5, arg1003: (Nil), arg1004: (Nil), arg1005: (Nil), arg1006: (Nil), arg1007: (Nil), arg1008: (Nil), arg1009: (Nil), arg1010: (Nil), arg1011: ZERO
Model : any1: 1, any2: 0, arg1003: (1::(Nil)), arg1004: (Nil), arg1005: (Nil), arg1006: (Nil), arg1007: (1::(Nil)), arg1008: (Nil), arg1009: (Nil), arg1010: (Nil), arg1011: ZERO
Model : any1: 5, any2: 6, arg1003: (Nil), arg1004: (Nil), arg1005: (Nil), arg1006: (Nil), arg1007: (Nil), arg1008: (Nil), arg1009: (Nil), arg1010: (Nil), arg1011: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (0::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(5::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((1::(Nil)) @ (1::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(0::rotate (ZERO) (((((((((1::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (5::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(6::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002180 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 3, any2: 7, any3: 0, any4: 4, any5: 2, any6: 6, any7: 0, any8: 3, any9: 4, any_list2: (0::(Nil))
Model : any1: 0, any2: 0, any3: 2, any4: 0, any5: 3, any6: 8, any7: 4, any8: 5, any9: 8, any_list2: (Nil)
Model : any1: 2, any2: 4, any3: 1, any4: 4, any5: 0, any6: 2, any7: 7, any8: 8, any9: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((0::(Nil)))) ((((((((((((0::(Nil)) @ (Nil)) @ (3::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (4::(Nil)))) = (3::(7::rotate (len ((0::(Nil)))) ((((((((((0::(Nil)) @ (Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (8::(Nil)))) = (0::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (8::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (7::(Nil)))) = (2::(4::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (7::(Nil))))))
Simplifying took 0.013048 seconds
Result : true
advanced_generalize done
=================================================
Progress: 594


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 595


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any6 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any6 : any
any8 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any6
intro any8
Lemma : forall (any1:any) (any2:any) (arg1012:any list) (arg1013:any list) (arg1014:any list) (arg1015:any list) (arg1016:any list) (arg1017:any list) (arg1018:any list) (arg1019:any list) (arg1020:nat), rotate (arg1020) ((((((((((arg1012 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1013) @ arg1014) @ arg1015) @ arg1016) @ arg1017) @ arg1018) @ arg1019)) = (any1::(any2::rotate (arg1020) ((((((((arg1012 @ arg1013) @ arg1014) @ arg1015) @ arg1016) @ arg1017) @ arg1018) @ arg1019))))
Model : any1: 4, any2: 7, arg1012: (3::(Nil)), arg1013: (Nil), arg1014: (Nil), arg1015: (Nil), arg1016: (Nil), arg1017: (Nil), arg1018: (Nil), arg1019: (3::(Nil)), arg1020: ZERO
Model : any1: 6, any2: 6, arg1012: (7::(Nil)), arg1013: (Nil), arg1014: (Nil), arg1015: (Nil), arg1016: (Nil), arg1017: (Nil), arg1018: (Nil), arg1019: (Nil), arg1020: ZERO
Model : any1: 4, any2: 8, arg1012: (Nil), arg1013: (Nil), arg1014: (4::(Nil)), arg1015: (Nil), arg1016: (Nil), arg1017: (Nil), arg1018: (Nil), arg1019: (Nil), arg1020: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((3::(Nil)) @ (4::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil)))) = (4::(7::rotate (ZERO) (((((((((3::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))))))
rotate (ZERO) (((((((((((7::(Nil)) @ (6::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(6::rotate (ZERO) (((((((((7::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (4::(Nil))) @ (8::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(8::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003990 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 8, any2: 3, any3: 7, any4: 5, any5: 8, any6: 0, any7: 1, any8: 7, any9: 2, any_list2: (Nil)
Model : any1: 8, any2: 5, any3: 2, any4: 5, any5: 7, any6: 0, any7: 3, any8: 0, any9: 4, any_list2: (Nil)
Model : any1: 5, any2: 3, any3: 5, any4: 6, any5: 4, any6: 0, any7: 7, any8: 1, any9: 1, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (2::(Nil)))) = (8::(3::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (4::(Nil)))) = (8::(5::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (1::(Nil)))) = (5::(3::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (1::(Nil))))))
Simplifying took 0.011839 seconds
Result : true
advanced_generalize done
=================================================
Progress: 596


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any7 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any7 : any
any8 : any
---------------------------------------
forall (any2:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any7
intro any8
Lemma : forall (any1:any) (any2:any) (arg1021:any list) (arg1022:any list) (arg1023:any list) (arg1024:any list) (arg1025:any list) (arg1026:any list) (arg1027:any list) (arg1028:any list) (arg1029:nat), rotate (arg1029) ((((((((((arg1021 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1022) @ arg1023) @ arg1024) @ arg1025) @ arg1026) @ arg1027) @ arg1028)) = (any1::(any2::rotate (arg1029) ((((((((arg1021 @ arg1022) @ arg1023) @ arg1024) @ arg1025) @ arg1026) @ arg1027) @ arg1028))))
Model : any1: 3, any2: 7, arg1021: (Nil), arg1022: (5::(Nil)), arg1023: (Nil), arg1024: (Nil), arg1025: (Nil), arg1026: (Nil), arg1027: (Nil), arg1028: (Nil), arg1029: ZERO
Model : any1: 1, any2: 7, arg1021: (6::(8::(Nil))), arg1022: (Nil), arg1023: (Nil), arg1024: (Nil), arg1025: (Nil), arg1026: (Nil), arg1027: (Nil), arg1028: (Nil), arg1029: ZERO
Model : any1: 0, any2: 0, arg1021: (Nil), arg1022: (Nil), arg1023: (Nil), arg1024: (Nil), arg1025: (Nil), arg1026: (Nil), arg1027: (Nil), arg1028: (Nil), arg1029: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (3::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(7::rotate (ZERO) (((((((((Nil) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((6::(8::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(7::rotate (ZERO) (((((((((6::(8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (0::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(0::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003969 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 0, any2: 5, any3: 7, any4: 8, any5: 6, any6: 1, any7: 1, any8: 1, any9: 8, any_list2: (Nil)
Model : any1: 0, any2: 0, any3: 4, any4: 7, any5: 6, any6: 6, any7: 4, any8: 3, any9: 6, any_list2: (Nil)
Model : any1: 8, any2: 3, any3: 3, any4: 4, any5: 1, any6: 3, any7: 4, any8: 7, any9: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (8::(Nil)))) = (0::(5::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (8::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (6::(Nil)))) = (0::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (0::(Nil)))) = (8::(3::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (0::(Nil))))))
Simplifying took 0.012232 seconds
Result : true
advanced_generalize done
=================================================
Progress: 597


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 4
intro any5(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 598


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 599


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any3 : any
any6 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 600


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any3 : any
any7 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 601


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any3 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any3 : any
any8 : any
---------------------------------------
forall (any1:any) (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any3
intro any8
Lemma : forall (any1:any) (any2:any) (arg1030:any list) (arg1031:any list) (arg1032:any list) (arg1033:any list) (arg1034:any list) (arg1035:any list) (arg1036:any list) (arg1037:any list) (arg1038:nat), rotate (arg1038) ((((((((((arg1030 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1031) @ arg1032) @ arg1033) @ arg1034) @ arg1035) @ arg1036) @ arg1037)) = (any1::(any2::rotate (arg1038) ((((((((arg1030 @ arg1031) @ arg1032) @ arg1033) @ arg1034) @ arg1035) @ arg1036) @ arg1037))))
Model : any1: 7, any2: 0, arg1030: (7::(Nil)), arg1031: (Nil), arg1032: (Nil), arg1033: (Nil), arg1034: (Nil), arg1035: (6::(Nil)), arg1036: (Nil), arg1037: (Nil), arg1038: ZERO
Model : any1: 8, any2: 0, arg1030: (Nil), arg1031: (Nil), arg1032: (Nil), arg1033: (0::(Nil)), arg1034: (Nil), arg1035: (Nil), arg1036: (Nil), arg1037: (3::(6::(Nil))), arg1038: ZERO
Model : any1: 0, any2: 8, arg1030: (Nil), arg1031: (Nil), arg1032: (Nil), arg1033: (Nil), arg1034: (Nil), arg1035: (Nil), arg1036: (Nil), arg1037: (Nil), arg1038: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((7::(Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil))) = (7::(0::rotate (ZERO) (((((((((7::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(6::(Nil))))) = (8::(0::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(6::(Nil)))))))
rotate (ZERO) (((((((((((Nil) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(8::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003126 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 4, any2: 4, any3: 0, any4: 7, any5: 1, any6: 1, any7: 2, any8: 2, any9: 6, any_list2: (Nil)
Model : any1: 7, any2: 0, any3: 1, any4: 8, any5: 1, any6: 0, any7: 6, any8: 6, any9: 0, any_list2: (Nil)
Model : any1: 0, any2: 5, any3: 8, any4: 0, any5: 8, any6: 4, any7: 6, any8: 5, any9: 2, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (6::(Nil)))) = (4::(4::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (0::(Nil)))) = (7::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (2::(Nil)))) = (0::(5::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (5::(Nil))) @ (2::(Nil))))))
Simplifying took 0.011335 seconds
Result : true
advanced_generalize done
=================================================
Progress: 602


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 603


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 604


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any4 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 605


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any4 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any4 : any
any8 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any4
intro any8
Lemma : forall (any1:any) (any2:any) (arg1039:any list) (arg1040:any list) (arg1041:any list) (arg1042:any list) (arg1043:any list) (arg1044:any list) (arg1045:any list) (arg1046:any list) (arg1047:nat), rotate (arg1047) ((((((((((arg1039 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1040) @ arg1041) @ arg1042) @ arg1043) @ arg1044) @ arg1045) @ arg1046)) = (any1::(any2::rotate (arg1047) ((((((((arg1039 @ arg1040) @ arg1041) @ arg1042) @ arg1043) @ arg1044) @ arg1045) @ arg1046))))
Model : any1: 4, any2: 0, arg1039: (Nil), arg1040: (8::(Nil)), arg1041: (0::(Nil)), arg1042: (Nil), arg1043: (Nil), arg1044: (Nil), arg1045: (Nil), arg1046: (Nil), arg1047: ZERO
Model : any1: 2, any2: 7, arg1039: (Nil), arg1040: (Nil), arg1041: (1::(Nil)), arg1042: (Nil), arg1043: (6::(Nil)), arg1044: (Nil), arg1045: (Nil), arg1046: (Nil), arg1047: ZERO
Model : any1: 6, any2: 8, arg1039: (Nil), arg1040: (7::(Nil)), arg1041: (Nil), arg1042: (Nil), arg1043: (Nil), arg1044: (Nil), arg1045: (2::(Nil)), arg1046: (Nil), arg1047: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (4::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(0::rotate (ZERO) (((((((((Nil) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (2::(Nil))) @ (7::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(7::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (6::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil))) = (6::(8::rotate (ZERO) (((((((((Nil) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)))))
Simplifying took 0.004340 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any4 : any
any8 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 606


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any4 : any
any8 : any
---------------------------------------
forall (any1:any) (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg1039:any list) (arg1040:any list) (arg1041:any list) (arg1042:any list) (arg1043:any list) (arg1044:any list) (arg1045:any list) (arg1046:any list) (arg1047:nat), rotate (arg1047) ((((((((((arg1039 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1040) @ arg1041) @ arg1042) @ arg1043) @ arg1044) @ arg1045) @ arg1046)) = (any1::(any2::rotate (arg1047) ((((((((arg1039 @ arg1040) @ arg1041) @ arg1042) @ arg1043) @ arg1044) @ arg1045) @ arg1046))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:22)
=================================================
Progress: 607


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 608


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 609


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any5 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any5 : any
any8 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any5
intro any8
Lemma : forall (any1:any) (any2:any) (arg1048:any list) (arg1049:any list) (arg1050:any list) (arg1051:any list) (arg1052:any list) (arg1053:any list) (arg1054:any list) (arg1055:any list) (arg1056:nat), rotate (arg1056) ((((((((((arg1048 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1049) @ arg1050) @ arg1051) @ arg1052) @ arg1053) @ arg1054) @ arg1055)) = (any1::(any2::rotate (arg1056) ((((((((arg1048 @ arg1049) @ arg1050) @ arg1051) @ arg1052) @ arg1053) @ arg1054) @ arg1055))))
Model : any1: 3, any2: 5, arg1048: (Nil), arg1049: (Nil), arg1050: (Nil), arg1051: (Nil), arg1052: (Nil), arg1053: (Nil), arg1054: (Nil), arg1055: (Nil), arg1056: ZERO
Model : any1: 3, any2: 7, arg1048: (Nil), arg1049: (Nil), arg1050: (Nil), arg1051: (Nil), arg1052: (Nil), arg1053: (Nil), arg1054: (7::(Nil)), arg1055: (Nil), arg1056: ZERO
Model : any1: 0, any2: 3, arg1048: (2::(0::(Nil))), arg1049: (Nil), arg1050: (Nil), arg1051: (Nil), arg1052: (Nil), arg1053: (Nil), arg1054: (Nil), arg1055: (Nil), arg1056: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (3::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(5::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (3::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil))) = (3::(7::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((((2::(0::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(3::rotate (ZERO) (((((((((2::(0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002895 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 1, any2: 1, any3: 1, any4: 4, any5: 1, any6: 3, any7: 0, any8: 8, any9: 8, any_list2: (Nil)
Model : any1: 0, any2: 1, any3: 8, any4: 4, any5: 1, any6: 7, any7: 4, any8: 6, any9: 0, any_list2: (4::(Nil))
Model : any1: 2, any2: 3, any3: 1, any4: 4, any5: 8, any6: 0, any7: 5, any8: 4, any9: 8, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (8::(Nil)))) = (1::(1::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (8::(Nil))))))
rotate (len ((4::(Nil)))) ((((((((((((4::(Nil)) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (0::(Nil)))) = (0::(1::rotate (len ((4::(Nil)))) ((((((((((4::(Nil)) @ (Nil)) @ (8::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (8::(Nil)))) = (2::(3::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (4::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (8::(Nil))))))
Simplifying took 0.014571 seconds
Result : true
advanced_generalize done
=================================================
Progress: 610


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 611


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any6 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any6 : any
any8 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any6
intro any8
Lemma : forall (any1:any) (any2:any) (arg1057:any list) (arg1058:any list) (arg1059:any list) (arg1060:any list) (arg1061:any list) (arg1062:any list) (arg1063:any list) (arg1064:any list) (arg1065:nat), rotate (arg1065) ((((((((((arg1057 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1058) @ arg1059) @ arg1060) @ arg1061) @ arg1062) @ arg1063) @ arg1064)) = (any1::(any2::rotate (arg1065) ((((((((arg1057 @ arg1058) @ arg1059) @ arg1060) @ arg1061) @ arg1062) @ arg1063) @ arg1064))))
Model : any1: 0, any2: 4, arg1057: (Nil), arg1058: (Nil), arg1059: (Nil), arg1060: (Nil), arg1061: (Nil), arg1062: (Nil), arg1063: (Nil), arg1064: (6::(Nil)), arg1065: ZERO
Model : any1: 8, any2: 6, arg1057: (Nil), arg1058: (Nil), arg1059: (Nil), arg1060: (Nil), arg1061: (Nil), arg1062: (Nil), arg1063: (2::(6::(Nil))), arg1064: (Nil), arg1065: ZERO
Model : any1: 7, any2: 3, arg1057: (Nil), arg1058: (2::(Nil)), arg1059: (Nil), arg1060: (5::(Nil)), arg1061: (Nil), arg1062: (Nil), arg1063: (5::(Nil)), arg1064: (Nil), arg1065: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (0::(4::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))))))
rotate (ZERO) (((((((((((Nil) @ (8::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(6::(Nil)))) @ (Nil))) = (8::(6::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(6::(Nil)))) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (7::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (7::(3::rotate (ZERO) (((((((((Nil) @ (2::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)))))
Simplifying took 0.003473 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any6 : any
any8 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 612


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any6 : any
any8 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg1057:any list) (arg1058:any list) (arg1059:any list) (arg1060:any list) (arg1061:any list) (arg1062:any list) (arg1063:any list) (arg1064:any list) (arg1065:nat), rotate (arg1065) ((((((((((arg1057 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1058) @ arg1059) @ arg1060) @ arg1061) @ arg1062) @ arg1063) @ arg1064)) = (any1::(any2::rotate (arg1065) ((((((((arg1057 @ arg1058) @ arg1059) @ arg1060) @ arg1061) @ arg1062) @ arg1063) @ arg1064))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:22)
=================================================
Progress: 613


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any7 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any2 : any
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any2
intro any7
intro any8
Lemma : forall (any1:any) (any2:any) (arg1066:any list) (arg1067:any list) (arg1068:any list) (arg1069:any list) (arg1070:any list) (arg1071:any list) (arg1072:any list) (arg1073:any list) (arg1074:nat), rotate (arg1074) ((((((((((arg1066 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1067) @ arg1068) @ arg1069) @ arg1070) @ arg1071) @ arg1072) @ arg1073)) = (any1::(any2::rotate (arg1074) ((((((((arg1066 @ arg1067) @ arg1068) @ arg1069) @ arg1070) @ arg1071) @ arg1072) @ arg1073))))
Model : any1: 5, any2: 1, arg1066: (Nil), arg1067: (Nil), arg1068: (Nil), arg1069: (Nil), arg1070: (Nil), arg1071: (6::(2::(Nil))), arg1072: (Nil), arg1073: (Nil), arg1074: ZERO
Model : any1: 1, any2: 0, arg1066: (2::(Nil)), arg1067: (Nil), arg1068: (Nil), arg1069: (Nil), arg1070: (Nil), arg1071: (Nil), arg1072: (Nil), arg1073: (Nil), arg1074: ZERO
Model : any1: 7, any2: 6, arg1066: (Nil), arg1067: (Nil), arg1068: (Nil), arg1069: (Nil), arg1070: (Nil), arg1071: (Nil), arg1072: (Nil), arg1073: (Nil), arg1074: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (5::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(2::(Nil)))) @ (Nil)) @ (Nil))) = (5::(1::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(2::(Nil)))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((2::(Nil)) @ (1::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(0::rotate (ZERO) (((((((((2::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (7::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(6::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.002483 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 5, any2: 7, any3: 0, any4: 7, any5: 2, any6: 8, any7: 7, any8: 0, any9: 5, any_list2: (Nil)
Model : any1: 8, any2: 0, any3: 3, any4: 7, any5: 7, any6: 5, any7: 1, any8: 8, any9: 0, any_list2: (Nil)
Model : any1: 2, any2: 2, any3: 3, any4: 1, any5: 4, any6: 7, any7: 8, any8: 1, any9: 3, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (5::(Nil)))) = (5::(7::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (0::(Nil)))) = (8::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (3::(Nil)))) = (2::(2::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (3::(Nil))))))
Simplifying took 0.012291 seconds
Result : true
advanced_generalize done
=================================================
Progress: 614


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 615


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 616


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any4 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 617


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any4 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any4 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any4
intro any8
Lemma : forall (any1:any) (any2:any) (arg1075:any list) (arg1076:any list) (arg1077:any list) (arg1078:any list) (arg1079:any list) (arg1080:any list) (arg1081:any list) (arg1082:any list) (arg1083:nat), rotate (arg1083) ((((((((((arg1075 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1076) @ arg1077) @ arg1078) @ arg1079) @ arg1080) @ arg1081) @ arg1082)) = (any1::(any2::rotate (arg1083) ((((((((arg1075 @ arg1076) @ arg1077) @ arg1078) @ arg1079) @ arg1080) @ arg1081) @ arg1082))))
Model : any1: 0, any2: 3, arg1075: (3::(Nil)), arg1076: (Nil), arg1077: (2::(0::(Nil))), arg1078: (1::(0::(2::(4::(0::(Nil)))))), arg1079: (Nil), arg1080: (Nil), arg1081: (Nil), arg1082: (Nil), arg1083: ZERO
Model : any1: 8, any2: 2, arg1075: (Nil), arg1076: (Nil), arg1077: (7::(8::(Nil))), arg1078: (3::(Nil)), arg1079: (Nil), arg1080: (Nil), arg1081: (Nil), arg1082: (2::(Nil)), arg1083: ZERO
Model : any1: 3, any2: 4, arg1075: (Nil), arg1076: (Nil), arg1077: (8::(Nil)), arg1078: (0::(6::(Nil))), arg1079: (Nil), arg1080: (Nil), arg1081: (Nil), arg1082: (Nil), arg1083: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((3::(Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (Nil)) @ (2::(0::(Nil)))) @ (1::(0::(2::(4::(0::(Nil))))))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(3::rotate (ZERO) (((((((((3::(Nil)) @ (Nil)) @ (2::(0::(Nil)))) @ (1::(0::(2::(4::(0::(Nil))))))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (8::(Nil))) @ (2::(Nil))) @ (Nil)) @ (7::(8::(Nil)))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil)))) = (8::(2::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (7::(8::(Nil)))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))))))
rotate (ZERO) (((((((((((Nil) @ (3::(Nil))) @ (4::(Nil))) @ (Nil)) @ (8::(Nil))) @ (0::(6::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(4::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(6::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.010083 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 8, any2: 3, any3: 4, any4: 1, any5: 0, any6: 5, any7: 3, any8: 4, any9: 0, any_list2: (Nil)
Model : any1: 7, any2: 5, any3: 5, any4: 3, any5: 4, any6: 2, any7: 1, any8: 8, any9: 2, any_list2: (Nil)
Model : any1: 0, any2: 8, any3: 4, any4: 7, any5: 6, any6: 0, any7: 8, any8: 3, any9: 7, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (0::(Nil)))) = (8::(3::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (5::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (2::(Nil)))) = (7::(5::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (2::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (7::(Nil)))) = (0::(8::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (7::(Nil))))))
Simplifying took 0.011727 seconds
Result : true
advanced_generalize done
=================================================
Progress: 618


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 619


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 620


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any5 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any5
intro any8
Lemma : forall (any1:any) (any2:any) (arg1084:any list) (arg1085:any list) (arg1086:any list) (arg1087:any list) (arg1088:any list) (arg1089:any list) (arg1090:any list) (arg1091:any list) (arg1092:nat), rotate (arg1092) ((((((((((arg1084 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1085) @ arg1086) @ arg1087) @ arg1088) @ arg1089) @ arg1090) @ arg1091)) = (any1::(any2::rotate (arg1092) ((((((((arg1084 @ arg1085) @ arg1086) @ arg1087) @ arg1088) @ arg1089) @ arg1090) @ arg1091))))
Model : any1: 6, any2: 5, arg1084: (Nil), arg1085: (Nil), arg1086: (Nil), arg1087: (6::(Nil)), arg1088: (Nil), arg1089: (Nil), arg1090: (Nil), arg1091: (Nil), arg1092: ZERO
Model : any1: 4, any2: 6, arg1084: (Nil), arg1085: (Nil), arg1086: (Nil), arg1087: (Nil), arg1088: (Nil), arg1089: (3::(Nil)), arg1090: (Nil), arg1091: (Nil), arg1092: ZERO
Model : any1: 0, any2: 4, arg1084: (Nil), arg1085: (Nil), arg1086: (Nil), arg1087: (Nil), arg1088: (Nil), arg1089: (Nil), arg1090: (5::(Nil)), arg1091: (Nil), arg1092: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (6::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(5::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (4::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (4::(6::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (0::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (0::(4::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)))))
Simplifying took 0.002550 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any5 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 621


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any5 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg1084:any list) (arg1085:any list) (arg1086:any list) (arg1087:any list) (arg1088:any list) (arg1089:any list) (arg1090:any list) (arg1091:any list) (arg1092:nat), rotate (arg1092) ((((((((((arg1084 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1085) @ arg1086) @ arg1087) @ arg1088) @ arg1089) @ arg1090) @ arg1091)) = (any1::(any2::rotate (arg1092) ((((((((arg1084 @ arg1085) @ arg1086) @ arg1087) @ arg1088) @ arg1089) @ arg1090) @ arg1091))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:22)
=================================================
Progress: 622


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 623


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any6 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any6
intro any8
Lemma : forall (any1:any) (any2:any) (arg1093:any list) (arg1094:any list) (arg1095:any list) (arg1096:any list) (arg1097:any list) (arg1098:any list) (arg1099:any list) (arg1100:any list) (arg1101:nat), rotate (arg1101) ((((((((((arg1093 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1094) @ arg1095) @ arg1096) @ arg1097) @ arg1098) @ arg1099) @ arg1100)) = (any1::(any2::rotate (arg1101) ((((((((arg1093 @ arg1094) @ arg1095) @ arg1096) @ arg1097) @ arg1098) @ arg1099) @ arg1100))))
Model : any1: 2, any2: 0, arg1093: (0::(Nil)), arg1094: (Nil), arg1095: (Nil), arg1096: (Nil), arg1097: (Nil), arg1098: (Nil), arg1099: (0::(Nil)), arg1100: (Nil), arg1101: ZERO
Model : any1: 2, any2: 8, arg1093: (Nil), arg1094: (5::(5::(Nil))), arg1095: (Nil), arg1096: (Nil), arg1097: (Nil), arg1098: (0::(Nil)), arg1099: (Nil), arg1100: (Nil), arg1101: ZERO
Model : any1: 3, any2: 7, arg1093: (0::(Nil)), arg1094: (Nil), arg1095: (3::(Nil)), arg1096: (Nil), arg1097: (7::(Nil)), arg1098: (Nil), arg1099: (Nil), arg1100: (Nil), arg1101: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((0::(Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (2::(0::rotate (ZERO) (((((((((0::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (2::(Nil))) @ (8::(Nil))) @ (5::(5::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (2::(8::rotate (ZERO) (((((((((Nil) @ (5::(5::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
rotate (SUCC (ZERO)) (((((((((((0::(Nil)) @ (3::(Nil))) @ (7::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(7::rotate (SUCC (ZERO)) (((((((((0::(Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.005910 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 5, any2: 2, any3: 7, any4: 7, any5: 1, any6: 1, any7: 4, any8: 6, any9: 7, any_list2: (Nil)
Model : any1: 7, any2: 1, any3: 0, any4: 4, any5: 5, any6: 1, any7: 6, any8: 6, any9: 1, any_list2: (Nil)
Model : any1: 4, any2: 2, any3: 6, any4: 4, any5: 5, any6: 0, any7: 0, any8: 8, any9: 3, any_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (2::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (7::(Nil)))) = (5::(2::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (1::(Nil)))) = (7::(1::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (1::(Nil))))))
rotate (len ((0::(Nil)))) ((((((((((((0::(Nil)) @ (Nil)) @ (4::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (3::(Nil)))) = (4::(2::rotate (len ((0::(Nil)))) ((((((((((0::(Nil)) @ (Nil)) @ (6::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (3::(Nil))))))
Simplifying took 0.014628 seconds
Result : true
advanced_generalize done
=================================================
Progress: 624


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any3
intro any7
intro any8
Lemma : forall (any1:any) (any2:any) (arg1102:any list) (arg1103:any list) (arg1104:any list) (arg1105:any list) (arg1106:any list) (arg1107:any list) (arg1108:any list) (arg1109:any list) (arg1110:nat), rotate (arg1110) ((((((((((arg1102 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1103) @ arg1104) @ arg1105) @ arg1106) @ arg1107) @ arg1108) @ arg1109)) = (any1::(any2::rotate (arg1110) ((((((((arg1102 @ arg1103) @ arg1104) @ arg1105) @ arg1106) @ arg1107) @ arg1108) @ arg1109))))
Model : any1: 8, any2: 8, arg1102: (Nil), arg1103: (Nil), arg1104: (2::(1::(4::(Nil)))), arg1105: (6::(6::(1::(Nil)))), arg1106: (0::(0::(4::(Nil)))), arg1107: (Nil), arg1108: (Nil), arg1109: (Nil), arg1110: ZERO
Model : any1: 3, any2: 5, arg1102: (Nil), arg1103: (Nil), arg1104: (Nil), arg1105: (Nil), arg1106: (Nil), arg1107: (Nil), arg1108: (Nil), arg1109: (Nil), arg1110: ZERO
Model : any1: 6, any2: 3, arg1102: (Nil), arg1103: (5::(Nil)), arg1104: (Nil), arg1105: (Nil), arg1106: (6::(Nil)), arg1107: (Nil), arg1108: (Nil), arg1109: (Nil), arg1110: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (8::(Nil))) @ (8::(Nil))) @ (Nil)) @ (2::(1::(4::(Nil))))) @ (6::(6::(1::(Nil))))) @ (0::(0::(4::(Nil))))) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(8::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (2::(1::(4::(Nil))))) @ (6::(6::(1::(Nil))))) @ (0::(0::(4::(Nil))))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (3::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(5::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (6::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (6::(3::rotate (ZERO) (((((((((Nil) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.009142 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 625


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any3 : any
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg1102:any list) (arg1103:any list) (arg1104:any list) (arg1105:any list) (arg1106:any list) (arg1107:any list) (arg1108:any list) (arg1109:any list) (arg1110:nat), rotate (arg1110) ((((((((((arg1102 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1103) @ arg1104) @ arg1105) @ arg1106) @ arg1107) @ arg1108) @ arg1109)) = (any1::(any2::rotate (arg1110) ((((((((arg1102 @ arg1103) @ arg1104) @ arg1105) @ arg1106) @ arg1107) @ arg1108) @ arg1109))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:22)
=================================================
Progress: 626


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 627


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 628


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any5 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any5 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
intro any5
intro any8
Lemma : forall (any1:any) (any2:any) (arg1111:any list) (arg1112:any list) (arg1113:any list) (arg1114:any list) (arg1115:any list) (arg1116:any list) (arg1117:any list) (arg1118:any list) (arg1119:nat), rotate (arg1119) ((((((((((arg1111 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1112) @ arg1113) @ arg1114) @ arg1115) @ arg1116) @ arg1117) @ arg1118)) = (any1::(any2::rotate (arg1119) ((((((((arg1111 @ arg1112) @ arg1113) @ arg1114) @ arg1115) @ arg1116) @ arg1117) @ arg1118))))
Model : any1: 5, any2: 0, arg1111: (Nil), arg1112: (Nil), arg1113: (3::(Nil)), arg1114: (Nil), arg1115: (2::(Nil)), arg1116: (Nil), arg1117: (Nil), arg1118: (Nil), arg1119: ZERO
Model : any1: 3, any2: 2, arg1111: (1::(Nil)), arg1112: (Nil), arg1113: (2::(Nil)), arg1114: (Nil), arg1115: (Nil), arg1116: (Nil), arg1117: (7::(2::(Nil))), arg1118: (Nil), arg1119: ZERO
Model : any1: 8, any2: 2, arg1111: (Nil), arg1112: (Nil), arg1113: (2::(Nil)), arg1114: (0::(Nil)), arg1115: (Nil), arg1116: (Nil), arg1117: (Nil), arg1118: (Nil), arg1119: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (5::(Nil))) @ (0::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(0::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((1::(Nil)) @ (3::(Nil))) @ (2::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(2::(Nil)))) @ (Nil))) = (3::(2::rotate (ZERO) (((((((((1::(Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(2::(Nil)))) @ (Nil)))))
rotate (SUCC (ZERO)) (((((((((((Nil) @ (8::(Nil))) @ (2::(Nil))) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(2::rotate (SUCC (ZERO)) (((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.004554 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 0, any2: 0, any3: 1, any4: 8, any5: 7, any6: 5, any7: 0, any8: 8, any9: 1, any_list2: (Nil)
Model : any1: 6, any2: 3, any3: 6, any4: 7, any5: 0, any6: 1, any7: 3, any8: 0, any9: 0, any_list2: (0::(8::(Nil)))
Model : any1: 0, any2: 7, any3: 6, any4: 0, any5: 6, any6: 0, any7: 1, any8: 5, any9: 3, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (1::(Nil)))) = (0::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (1::(Nil))))))
rotate (len ((0::(8::(Nil))))) ((((((((((((0::(8::(Nil))) @ (Nil)) @ (6::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (6::(3::rotate (len ((0::(8::(Nil))))) ((((((((((0::(8::(Nil))) @ (Nil)) @ (6::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (3::(Nil)))) = (0::(7::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (3::(Nil))))))
Simplifying took 0.017519 seconds
Result : true
advanced_generalize done
=================================================
Progress: 629


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 630


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any6 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
intro any6
intro any8
Lemma : forall (any1:any) (any2:any) (arg1120:any list) (arg1121:any list) (arg1122:any list) (arg1123:any list) (arg1124:any list) (arg1125:any list) (arg1126:any list) (arg1127:any list) (arg1128:nat), rotate (arg1128) ((((((((((arg1120 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1121) @ arg1122) @ arg1123) @ arg1124) @ arg1125) @ arg1126) @ arg1127)) = (any1::(any2::rotate (arg1128) ((((((((arg1120 @ arg1121) @ arg1122) @ arg1123) @ arg1124) @ arg1125) @ arg1126) @ arg1127))))
Model : any1: 5, any2: 1, arg1120: (Nil), arg1121: (Nil), arg1122: (Nil), arg1123: (Nil), arg1124: (Nil), arg1125: (5::(Nil)), arg1126: (2::(4::(Nil))), arg1127: (Nil), arg1128: ZERO
Model : any1: 0, any2: 7, arg1120: (4::(Nil)), arg1121: (Nil), arg1122: (2::(Nil)), arg1123: (7::(Nil)), arg1124: (Nil), arg1125: (Nil), arg1126: (Nil), arg1127: (Nil), arg1128: ZERO
Model : any1: 1, any2: 7, arg1120: (Nil), arg1121: (Nil), arg1122: (7::(Nil)), arg1123: (Nil), arg1124: (Nil), arg1125: (Nil), arg1126: (Nil), arg1127: (Nil), arg1128: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (5::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (2::(4::(Nil)))) @ (Nil))) = (5::(1::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (2::(4::(Nil)))) @ (Nil)))))
rotate (ZERO) (((((((((((4::(Nil)) @ (0::(Nil))) @ (7::(Nil))) @ (Nil)) @ (2::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(7::rotate (ZERO) (((((((((4::(Nil)) @ (Nil)) @ (2::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (1::(Nil))) @ (7::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(7::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.004863 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 5, any2: 6, any3: 8, any4: 0, any5: 8, any6: 0, any7: 8, any8: 6, any9: 1, any_list2: (0::(Nil))
Model : any1: 5, any2: 7, any3: 5, any4: 4, any5: 4, any6: 5, any7: 3, any8: 7, any9: 0, any_list2: (Nil)
Model : any1: 0, any2: 1, any3: 7, any4: 4, any5: 7, any6: 7, any7: 4, any8: 6, any9: 1, any_list2: (5::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((0::(Nil)))) ((((((((((((0::(Nil)) @ (Nil)) @ (5::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (1::(Nil)))) = (5::(6::rotate (len ((0::(Nil)))) ((((((((((0::(Nil)) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (0::(Nil)))) = (5::(7::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (0::(Nil))))))
rotate (len ((5::(Nil)))) ((((((((((((5::(Nil)) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (1::(Nil)))) = (0::(1::rotate (len ((5::(Nil)))) ((((((((((5::(Nil)) @ (Nil)) @ (7::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (1::(Nil))))))
Simplifying took 0.020461 seconds
Result : true
advanced_generalize done
=================================================
Progress: 631


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any4
intro any7
intro any8
Lemma : forall (any1:any) (any2:any) (arg1129:any list) (arg1130:any list) (arg1131:any list) (arg1132:any list) (arg1133:any list) (arg1134:any list) (arg1135:any list) (arg1136:any list) (arg1137:nat), rotate (arg1137) ((((((((((arg1129 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1130) @ arg1131) @ arg1132) @ arg1133) @ arg1134) @ arg1135) @ arg1136)) = (any1::(any2::rotate (arg1137) ((((((((arg1129 @ arg1130) @ arg1131) @ arg1132) @ arg1133) @ arg1134) @ arg1135) @ arg1136))))
Model : any1: 4, any2: 0, arg1129: (Nil), arg1130: (Nil), arg1131: (0::(6::(Nil))), arg1132: (Nil), arg1133: (1::(Nil)), arg1134: (Nil), arg1135: (Nil), arg1136: (Nil), arg1137: ZERO
Model : any1: 6, any2: 3, arg1129: (Nil), arg1130: (Nil), arg1131: (Nil), arg1132: (Nil), arg1133: (Nil), arg1134: (0::(Nil)), arg1135: (Nil), arg1136: (Nil), arg1137: ZERO
Model : any1: 7, any2: 0, arg1129: (Nil), arg1130: (Nil), arg1131: (Nil), arg1132: (8::(Nil)), arg1133: (Nil), arg1134: (0::(Nil)), arg1135: (8::(Nil)), arg1136: (Nil), arg1137: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (4::(Nil))) @ (0::(Nil))) @ (Nil)) @ (0::(6::(Nil)))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(0::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (0::(6::(Nil)))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (6::(Nil))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (6::(3::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (7::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (Nil))) = (7::(0::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (Nil)))))
Simplifying took 0.004589 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 632


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any4 : any
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg1129:any list) (arg1130:any list) (arg1131:any list) (arg1132:any list) (arg1133:any list) (arg1134:any list) (arg1135:any list) (arg1136:any list) (arg1137:nat), rotate (arg1137) ((((((((((arg1129 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1130) @ arg1131) @ arg1132) @ arg1133) @ arg1134) @ arg1135) @ arg1136)) = (any1::(any2::rotate (arg1137) ((((((((arg1129 @ arg1130) @ arg1131) @ arg1132) @ arg1133) @ arg1134) @ arg1135) @ arg1136))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:22)
=================================================
Progress: 633


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 634


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
any6 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
any6 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any5
intro any6
intro any8
Lemma : forall (any1:any) (any2:any) (arg1138:any list) (arg1139:any list) (arg1140:any list) (arg1141:any list) (arg1142:any list) (arg1143:any list) (arg1144:any list) (arg1145:any list) (arg1146:nat), rotate (arg1146) ((((((((((arg1138 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1139) @ arg1140) @ arg1141) @ arg1142) @ arg1143) @ arg1144) @ arg1145)) = (any1::(any2::rotate (arg1146) ((((((((arg1138 @ arg1139) @ arg1140) @ arg1141) @ arg1142) @ arg1143) @ arg1144) @ arg1145))))
Model : any1: 1, any2: 8, arg1138: (Nil), arg1139: (Nil), arg1140: (Nil), arg1141: (5::(Nil)), arg1142: (7::(Nil)), arg1143: (Nil), arg1144: (Nil), arg1145: (Nil), arg1146: SUCC (ZERO)
Model : any1: 4, any2: 8, arg1138: (Nil), arg1139: (Nil), arg1140: (Nil), arg1141: (Nil), arg1142: (Nil), arg1143: (Nil), arg1144: (6::(Nil)), arg1145: (Nil), arg1146: ZERO
Model : any1: 7, any2: 5, arg1138: (Nil), arg1139: (Nil), arg1140: (Nil), arg1141: (Nil), arg1142: (Nil), arg1143: (Nil), arg1144: (Nil), arg1145: (Nil), arg1146: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((((Nil) @ (1::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (1::(8::rotate (SUCC (ZERO)) (((((((((Nil) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (4::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil))) = (4::(8::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (7::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(5::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003542 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 0, any2: 0, any3: 8, any4: 7, any5: 5, any6: 2, any7: 2, any8: 3, any9: 0, any_list2: (Nil)
Model : any1: 7, any2: 7, any3: 7, any4: 4, any5: 4, any6: 1, any7: 8, any8: 4, any9: 3, any_list2: (Nil)
Model : any1: 0, any2: 8, any3: 3, any4: 1, any5: 6, any6: 1, any7: 1, any8: 5, any9: 8, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (0::(Nil)))) = (0::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (0::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (3::(Nil)))) = (7::(7::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (4::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (3::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (8::(Nil)))) = (0::(8::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (6::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (8::(Nil))))))
Simplifying took 0.012462 seconds
Result : true
advanced_generalize done
=================================================
Progress: 635


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any5
intro any7
intro any8
Lemma : forall (any1:any) (any2:any) (arg1147:any list) (arg1148:any list) (arg1149:any list) (arg1150:any list) (arg1151:any list) (arg1152:any list) (arg1153:any list) (arg1154:any list) (arg1155:nat), rotate (arg1155) ((((((((((arg1147 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1148) @ arg1149) @ arg1150) @ arg1151) @ arg1152) @ arg1153) @ arg1154)) = (any1::(any2::rotate (arg1155) ((((((((arg1147 @ arg1148) @ arg1149) @ arg1150) @ arg1151) @ arg1152) @ arg1153) @ arg1154))))
Model : any1: 1, any2: 1, arg1147: (Nil), arg1148: (2::(1::(Nil))), arg1149: (Nil), arg1150: (Nil), arg1151: (0::(Nil)), arg1152: (Nil), arg1153: (0::(Nil)), arg1154: (Nil), arg1155: ZERO
Model : any1: 4, any2: 0, arg1147: (Nil), arg1148: (Nil), arg1149: (4::(Nil)), arg1150: (8::(Nil)), arg1151: (Nil), arg1152: (Nil), arg1153: (7::(Nil)), arg1154: (6::(Nil)), arg1155: ZERO
Model : any1: 8, any2: 8, arg1147: (1::(Nil)), arg1148: (Nil), arg1149: (3::(Nil)), arg1150: (Nil), arg1151: (Nil), arg1152: (Nil), arg1153: (Nil), arg1154: (3::(1::(Nil))), arg1155: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (1::(Nil))) @ (1::(Nil))) @ (2::(1::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (1::(1::rotate (ZERO) (((((((((Nil) @ (2::(1::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (4::(Nil))) @ (0::(Nil))) @ (Nil)) @ (4::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (6::(Nil)))) = (4::(0::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (6::(Nil))))))
rotate (SUCC (ZERO)) (((((((((((1::(Nil)) @ (8::(Nil))) @ (8::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(1::(Nil))))) = (8::(8::rotate (SUCC (ZERO)) (((((((((1::(Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(1::(Nil)))))))
Simplifying took 0.006434 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 636


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any5 : any
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg1147:any list) (arg1148:any list) (arg1149:any list) (arg1150:any list) (arg1151:any list) (arg1152:any list) (arg1153:any list) (arg1154:any list) (arg1155:nat), rotate (arg1155) ((((((((((arg1147 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1148) @ arg1149) @ arg1150) @ arg1151) @ arg1152) @ arg1153) @ arg1154)) = (any1::(any2::rotate (arg1155) ((((((((arg1147 @ arg1148) @ arg1149) @ arg1150) @ arg1151) @ arg1152) @ arg1153) @ arg1154))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:22)
=================================================
Progress: 637


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any6 : any
any7 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any6 : any
any7 : any
any8 : any
---------------------------------------
forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any6
intro any7
intro any8
Lemma : forall (any1:any) (any2:any) (arg1156:any list) (arg1157:any list) (arg1158:any list) (arg1159:any list) (arg1160:any list) (arg1161:any list) (arg1162:any list) (arg1163:any list) (arg1164:nat), rotate (arg1164) ((((((((((arg1156 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1157) @ arg1158) @ arg1159) @ arg1160) @ arg1161) @ arg1162) @ arg1163)) = (any1::(any2::rotate (arg1164) ((((((((arg1156 @ arg1157) @ arg1158) @ arg1159) @ arg1160) @ arg1161) @ arg1162) @ arg1163))))
Model : any1: 2, any2: 8, arg1156: (4::(Nil)), arg1157: (Nil), arg1158: (5::(Nil)), arg1159: (Nil), arg1160: (Nil), arg1161: (Nil), arg1162: (Nil), arg1163: (Nil), arg1164: SUCC (SUCC (ZERO))
Model : any1: 0, any2: 5, arg1156: (8::(Nil)), arg1157: (Nil), arg1158: (Nil), arg1159: (Nil), arg1160: (Nil), arg1161: (Nil), arg1162: (Nil), arg1163: (Nil), arg1164: ZERO
Model : any1: 4, any2: 2, arg1156: (Nil), arg1157: (0::(Nil)), arg1158: (Nil), arg1159: (Nil), arg1160: (Nil), arg1161: (7::(Nil)), arg1162: (Nil), arg1163: (Nil), arg1164: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (SUCC (ZERO))) (((((((((((4::(Nil)) @ (2::(Nil))) @ (8::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(8::rotate (SUCC (SUCC (ZERO))) (((((((((4::(Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((8::(Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (0::(5::rotate (ZERO) (((((((((8::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil))) = (4::(2::rotate (ZERO) (((((((((Nil) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)))))
Simplifying took 0.004984 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 8, any2: 0, any3: 6, any4: 2, any5: 8, any6: 0, any7: 5, any8: 0, any9: 5, any_list2: (Nil)
Model : any1: 3, any2: 0, any3: 7, any4: 4, any5: 7, any6: 1, any7: 5, any8: 4, any9: 6, any_list2: (Nil)
Model : any1: 1, any2: 3, any3: 5, any4: 3, any5: 8, any6: 7, any7: 5, any8: 7, any9: 1, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (5::(Nil)))) = (8::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (2::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (5::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (6::(Nil)))) = (3::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (6::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (1::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (1::(Nil)))) = (1::(3::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (1::(Nil))))))
Simplifying took 0.012641 seconds
Result : true
advanced_generalize done
=================================================
Progress: 638


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any4(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any3 : any
any4 : any
---------------------------------------
forall (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 4
intro any5(rank:19)
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 639


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any3 : any
any5 : any
---------------------------------------
forall (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 640


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any3 : any
any6 : any
---------------------------------------
forall (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 641


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any3 : any
any7 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 642


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any3 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any3 : any
any8 : any
---------------------------------------
forall (any4:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any3
intro any8
Lemma : forall (any1:any) (any2:any) (arg1165:any list) (arg1166:any list) (arg1167:any list) (arg1168:any list) (arg1169:any list) (arg1170:any list) (arg1171:any list) (arg1172:any list) (arg1173:nat), rotate (arg1173) ((((((((((arg1165 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1166) @ arg1167) @ arg1168) @ arg1169) @ arg1170) @ arg1171) @ arg1172)) = (any1::(any2::rotate (arg1173) ((((((((arg1165 @ arg1166) @ arg1167) @ arg1168) @ arg1169) @ arg1170) @ arg1171) @ arg1172))))
Model : any1: 1, any2: 8, arg1165: (Nil), arg1166: (Nil), arg1167: (Nil), arg1168: (8::(Nil)), arg1169: (Nil), arg1170: (Nil), arg1171: (6::(Nil)), arg1172: (7::(Nil)), arg1173: SUCC (ZERO)
Model : any1: 6, any2: 2, arg1165: (Nil), arg1166: (Nil), arg1167: (Nil), arg1168: (Nil), arg1169: (Nil), arg1170: (Nil), arg1171: (Nil), arg1172: (6::(Nil)), arg1173: ZERO
Model : any1: 1, any2: 1, arg1165: (Nil), arg1166: (0::(Nil)), arg1167: (Nil), arg1168: (Nil), arg1169: (Nil), arg1170: (Nil), arg1171: (5::(Nil)), arg1172: (Nil), arg1173: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((((Nil) @ (1::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (7::(Nil)))) = (1::(8::rotate (SUCC (ZERO)) (((((((((Nil) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (7::(Nil))))))
rotate (ZERO) (((((((((((Nil) @ (6::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (6::(2::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))))))
rotate (SUCC (ZERO)) (((((((((((Nil) @ (1::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (1::(1::rotate (SUCC (ZERO)) (((((((((Nil) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)))))
Simplifying took 0.003957 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 2, any2: 3, any3: 7, any4: 1, any5: 4, any6: 6, any7: 6, any8: 3, any9: 4, any_list2: (Nil)
Model : any1: 7, any2: 6, any3: 3, any4: 8, any5: 6, any6: 8, any7: 3, any8: 6, any9: 2, any_list2: (Nil)
Model : any1: 0, any2: 0, any3: 7, any4: 1, any5: 0, any6: 3, any7: 5, any8: 2, any9: 1, any_list2: (8::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (4::(Nil)))) = (2::(3::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (6::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (4::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (2::(Nil)))) = (7::(6::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (8::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (2::(Nil))))))
rotate (len ((8::(Nil)))) ((((((((((((8::(Nil)) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (1::(Nil)))) = (0::(0::rotate (len ((8::(Nil)))) ((((((((((8::(Nil)) @ (Nil)) @ (7::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (1::(Nil))))))
Simplifying took 0.015011 seconds
Result : true
advanced_generalize done
=================================================
Progress: 643


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any4 : any
any5 : any
---------------------------------------
forall (any3:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 644


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any4 : any
any6 : any
---------------------------------------
forall (any3:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 645


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any4 : any
any7 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 646


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any4 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any4 : any
any8 : any
---------------------------------------
forall (any3:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any4
intro any8
Lemma : forall (any1:any) (any2:any) (arg1174:any list) (arg1175:any list) (arg1176:any list) (arg1177:any list) (arg1178:any list) (arg1179:any list) (arg1180:any list) (arg1181:any list) (arg1182:nat), rotate (arg1182) ((((((((((arg1174 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1175) @ arg1176) @ arg1177) @ arg1178) @ arg1179) @ arg1180) @ arg1181)) = (any1::(any2::rotate (arg1182) ((((((((arg1174 @ arg1175) @ arg1176) @ arg1177) @ arg1178) @ arg1179) @ arg1180) @ arg1181))))
Model : any1: 2, any2: 8, arg1174: (Nil), arg1175: (3::(5::(Nil))), arg1176: (Nil), arg1177: (Nil), arg1178: (Nil), arg1179: (Nil), arg1180: (Nil), arg1181: (Nil), arg1182: ZERO
Model : any1: 4, any2: 3, arg1174: (3::(Nil)), arg1175: (Nil), arg1176: (4::(0::(Nil))), arg1177: (Nil), arg1178: (Nil), arg1179: (Nil), arg1180: (Nil), arg1181: (Nil), arg1182: ZERO
Model : any1: 0, any2: 5, arg1174: (4::(Nil)), arg1175: (Nil), arg1176: (Nil), arg1177: (Nil), arg1178: (Nil), arg1179: (Nil), arg1180: (0::(Nil)), arg1181: (Nil), arg1182: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (2::(Nil))) @ (8::(Nil))) @ (3::(5::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(8::rotate (ZERO) (((((((((Nil) @ (3::(5::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((3::(Nil)) @ (4::(Nil))) @ (3::(Nil))) @ (Nil)) @ (4::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(3::rotate (ZERO) (((((((((3::(Nil)) @ (Nil)) @ (4::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((4::(Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (0::(5::rotate (ZERO) (((((((((4::(Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)))))
Simplifying took 0.005208 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 3, any2: 3, any3: 0, any4: 3, any5: 3, any6: 7, any7: 0, any8: 2, any9: 4, any_list2: (Nil)
Model : any1: 0, any2: 2, any3: 6, any4: 8, any5: 1, any6: 1, any7: 1, any8: 0, any9: 1, any_list2: (6::(3::(Nil)))
Model : any1: 6, any2: 0, any3: 5, any4: 1, any5: 1, any6: 0, any7: 0, any8: 7, any9: 2, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (4::(Nil)))) = (3::(3::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (2::(Nil))) @ (4::(Nil))))))
rotate (len ((6::(3::(Nil))))) ((((((((((((6::(3::(Nil))) @ (Nil)) @ (0::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (1::(Nil)))) = (0::(2::rotate (len ((6::(3::(Nil))))) ((((((((((6::(3::(Nil))) @ (Nil)) @ (6::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (2::(Nil)))) = (6::(0::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (1::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (2::(Nil))))))
Simplifying took 0.015905 seconds
Result : true
advanced_generalize done
=================================================
Progress: 647


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any5 : any
---------------------------------------
forall (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any5 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 648


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any5 : any
---------------------------------------
forall (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any5 : any
any7 : any
---------------------------------------
forall (any3:any) (any4:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 649


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any5 : any
---------------------------------------
forall (any3:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any5 : any
any8 : any
---------------------------------------
forall (any3:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any5
intro any8
Lemma : forall (any1:any) (any2:any) (arg1183:any list) (arg1184:any list) (arg1185:any list) (arg1186:any list) (arg1187:any list) (arg1188:any list) (arg1189:any list) (arg1190:any list) (arg1191:nat), rotate (arg1191) ((((((((((arg1183 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1184) @ arg1185) @ arg1186) @ arg1187) @ arg1188) @ arg1189) @ arg1190)) = (any1::(any2::rotate (arg1191) ((((((((arg1183 @ arg1184) @ arg1185) @ arg1186) @ arg1187) @ arg1188) @ arg1189) @ arg1190))))
Model : any1: 4, any2: 7, arg1183: (Nil), arg1184: (Nil), arg1185: (Nil), arg1186: (Nil), arg1187: (Nil), arg1188: (Nil), arg1189: (Nil), arg1190: (Nil), arg1191: ZERO
Model : any1: 2, any2: 5, arg1183: (2::(Nil)), arg1184: (Nil), arg1185: (2::(Nil)), arg1186: (Nil), arg1187: (Nil), arg1188: (Nil), arg1189: (Nil), arg1190: (Nil), arg1191: ZERO
Model : any1: 3, any2: 1, arg1183: (Nil), arg1184: (Nil), arg1185: (Nil), arg1186: (Nil), arg1187: (8::(Nil)), arg1188: (Nil), arg1189: (Nil), arg1190: (Nil), arg1191: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (4::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(7::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((2::(Nil)) @ (2::(Nil))) @ (5::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (2::(5::rotate (ZERO) (((((((((2::(Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (3::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(1::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.003161 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 0, any2: 3, any3: 8, any4: 5, any5: 1, any6: 4, any7: 7, any8: 3, any9: 1, any_list2: (Nil)
Model : any1: 4, any2: 3, any3: 5, any4: 6, any5: 4, any6: 3, any7: 7, any8: 4, any9: 1, any_list2: (Nil)
Model : any1: 3, any2: 6, any3: 3, any4: 1, any5: 5, any6: 4, any7: 1, any8: 2, any9: 5, any_list2: (1::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (8::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (1::(Nil)))) = (0::(3::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (5::(Nil))) @ (1::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (3::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (1::(Nil)))) = (4::(3::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (5::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (4::(Nil))) @ (1::(Nil))))))
rotate (len ((1::(Nil)))) ((((((((((((1::(Nil)) @ (Nil)) @ (3::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (5::(Nil)))) = (3::(6::rotate (len ((1::(Nil)))) ((((((((((1::(Nil)) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (1::(Nil))) @ (2::(Nil))) @ (5::(Nil))))))
Simplifying took 0.014574 seconds
Result : true
advanced_generalize done
=================================================
Progress: 650


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any6 : any
any7 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 651


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any6 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any6 : any
any8 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any6
intro any8
Lemma : forall (any1:any) (any2:any) (arg1192:any list) (arg1193:any list) (arg1194:any list) (arg1195:any list) (arg1196:any list) (arg1197:any list) (arg1198:any list) (arg1199:any list) (arg1200:nat), rotate (arg1200) ((((((((((arg1192 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1193) @ arg1194) @ arg1195) @ arg1196) @ arg1197) @ arg1198) @ arg1199)) = (any1::(any2::rotate (arg1200) ((((((((arg1192 @ arg1193) @ arg1194) @ arg1195) @ arg1196) @ arg1197) @ arg1198) @ arg1199))))
Model : any1: 8, any2: 0, arg1192: (0::(Nil)), arg1193: (Nil), arg1194: (Nil), arg1195: (1::(Nil)), arg1196: (Nil), arg1197: (Nil), arg1198: (Nil), arg1199: (Nil), arg1200: ZERO
Model : any1: 8, any2: 1, arg1192: (Nil), arg1193: (Nil), arg1194: (8::(Nil)), arg1195: (Nil), arg1196: (0::(Nil)), arg1197: (Nil), arg1198: (Nil), arg1199: (Nil), arg1200: ZERO
Model : any1: 3, any2: 1, arg1192: (Nil), arg1193: (Nil), arg1194: (2::(4::(Nil))), arg1195: (Nil), arg1196: (Nil), arg1197: (Nil), arg1198: (3::(Nil)), arg1199: (Nil), arg1200: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((0::(Nil)) @ (8::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(0::rotate (ZERO) (((((((((0::(Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (8::(Nil))) @ (1::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(1::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (3::(Nil))) @ (1::(Nil))) @ (Nil)) @ (2::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (3::(1::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (2::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)))))
Simplifying took 0.004287 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 4, any2: 8, any3: 3, any4: 2, any5: 3, any6: 5, any7: 4, any8: 5, any9: 0, any_list2: (Nil)
Model : any1: 0, any2: 5, any3: 8, any4: 4, any5: 3, any6: 6, any7: 7, any8: 5, any9: 1, any_list2: (2::(Nil))
Model : any1: 7, any2: 4, any3: 2, any4: 0, any5: 3, any6: 1, any7: 0, any8: 7, any9: 6, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (4::(Nil))) @ (8::(Nil))) @ (3::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (0::(Nil)))) = (4::(8::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (2::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (5::(Nil))) @ (0::(Nil))))))
rotate (len ((2::(Nil)))) ((((((((((((2::(Nil)) @ (Nil)) @ (0::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (1::(Nil)))) = (0::(5::rotate (len ((2::(Nil)))) ((((((((((2::(Nil)) @ (Nil)) @ (8::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (7::(Nil))) @ (5::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (7::(Nil))) @ (4::(Nil))) @ (2::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (6::(Nil)))) = (7::(4::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (2::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (7::(Nil))) @ (6::(Nil))))))
Simplifying took 0.014916 seconds
Result : true
advanced_generalize done
=================================================
Progress: 652


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any7 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any7 : any
any8 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any2
intro any7
intro any8
Lemma : forall (any1:any) (any2:any) (arg1201:any list) (arg1202:any list) (arg1203:any list) (arg1204:any list) (arg1205:any list) (arg1206:any list) (arg1207:any list) (arg1208:any list) (arg1209:nat), rotate (arg1209) ((((((((((arg1201 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1202) @ arg1203) @ arg1204) @ arg1205) @ arg1206) @ arg1207) @ arg1208)) = (any1::(any2::rotate (arg1209) ((((((((arg1201 @ arg1202) @ arg1203) @ arg1204) @ arg1205) @ arg1206) @ arg1207) @ arg1208))))
Model : any1: 7, any2: 2, arg1201: (Nil), arg1202: (Nil), arg1203: (Nil), arg1204: (2::(Nil)), arg1205: (Nil), arg1206: (Nil), arg1207: (Nil), arg1208: (Nil), arg1209: ZERO
Model : any1: 8, any2: 6, arg1201: (Nil), arg1202: (Nil), arg1203: (0::(Nil)), arg1204: (3::(1::(Nil))), arg1205: (Nil), arg1206: (Nil), arg1207: (Nil), arg1208: (Nil), arg1209: ZERO
Model : any1: 2, any2: 7, arg1201: (Nil), arg1202: (Nil), arg1203: (Nil), arg1204: (Nil), arg1205: (Nil), arg1206: (8::(3::(Nil))), arg1207: (Nil), arg1208: (Nil), arg1209: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (7::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(2::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (8::(Nil))) @ (6::(Nil))) @ (Nil)) @ (0::(Nil))) @ (3::(1::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (8::(6::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(1::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (2::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(3::(Nil)))) @ (Nil)) @ (Nil))) = (2::(7::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(3::(Nil)))) @ (Nil)) @ (Nil)))))
Simplifying took 0.003844 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any7 : any
any8 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 653


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any2 : any
any7 : any
any8 : any
---------------------------------------
forall (any3:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg1201:any list) (arg1202:any list) (arg1203:any list) (arg1204:any list) (arg1205:any list) (arg1206:any list) (arg1207:any list) (arg1208:any list) (arg1209:nat), rotate (arg1209) ((((((((((arg1201 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1202) @ arg1203) @ arg1204) @ arg1205) @ arg1206) @ arg1207) @ arg1208)) = (any1::(any2::rotate (arg1209) ((((((((arg1201 @ arg1202) @ arg1203) @ arg1204) @ arg1205) @ arg1206) @ arg1207) @ arg1208))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:22)
=================================================
Progress: 654


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any5(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any4 : any
any5 : any
---------------------------------------
forall (any2:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 3
intro any6(rank:19)
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 655


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any4 : any
any6 : any
---------------------------------------
forall (any2:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 656


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any4 : any
any7 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 657


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any4 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any4 : any
any8 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any4
intro any8
Lemma : forall (any1:any) (any2:any) (arg1210:any list) (arg1211:any list) (arg1212:any list) (arg1213:any list) (arg1214:any list) (arg1215:any list) (arg1216:any list) (arg1217:any list) (arg1218:nat), rotate (arg1218) ((((((((((arg1210 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1211) @ arg1212) @ arg1213) @ arg1214) @ arg1215) @ arg1216) @ arg1217)) = (any1::(any2::rotate (arg1218) ((((((((arg1210 @ arg1211) @ arg1212) @ arg1213) @ arg1214) @ arg1215) @ arg1216) @ arg1217))))
Model : any1: 1, any2: 1, arg1210: (Nil), arg1211: (Nil), arg1212: (Nil), arg1213: (Nil), arg1214: (6::(Nil)), arg1215: (1::(Nil)), arg1216: (8::(Nil)), arg1217: (Nil), arg1218: ZERO
Model : any1: 3, any2: 7, arg1210: (Nil), arg1211: (Nil), arg1212: (Nil), arg1213: (Nil), arg1214: (Nil), arg1215: (Nil), arg1216: (0::(Nil)), arg1217: (Nil), arg1218: ZERO
Model : any1: 5, any2: 5, arg1210: (Nil), arg1211: (7::(Nil)), arg1212: (6::(0::(Nil))), arg1213: (Nil), arg1214: (3::(2::(Nil))), arg1215: (Nil), arg1216: (Nil), arg1217: (Nil), arg1218: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((Nil) @ (1::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (Nil))) = (1::(1::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (1::(Nil))) @ (8::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (3::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (3::(7::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (5::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (6::(0::(Nil)))) @ (Nil)) @ (3::(2::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (5::(5::rotate (ZERO) (((((((((Nil) @ (7::(Nil))) @ (6::(0::(Nil)))) @ (Nil)) @ (3::(2::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.005414 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any4 : any
any8 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
=================================================
Progress: 658


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any4 : any
any8 : any
---------------------------------------
forall (any2:any) (any5:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (arg1210:any list) (arg1211:any list) (arg1212:any list) (arg1213:any list) (arg1214:any list) (arg1215:any list) (arg1216:any list) (arg1217:any list) (arg1218:nat), rotate (arg1218) ((((((((((arg1210 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1211) @ arg1212) @ arg1213) @ arg1214) @ arg1215) @ arg1216) @ arg1217)) = (any1::(any2::rotate (arg1218) ((((((((arg1210 @ arg1211) @ arg1212) @ arg1213) @ arg1214) @ arg1215) @ arg1216) @ arg1217))))(rank : 0)


1st goal of : forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

---------------------------------------
forall (any1:any) (any2:any) (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (any_list6:any list) (any_list7:any list) (any_list8:any list) (nat1:nat), rotate (nat1) ((((((((((any_list1 @ (any1::(Nil))) @ (any2::(Nil))) @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8)) = (any1::(any2::rotate (nat1) ((((((((any_list1 @ any_list2) @ any_list3) @ any_list4) @ any_list5) @ any_list6) @ any_list7) @ any_list8))))

0 goal(s) more...

9 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:22)
=================================================
Progress: 659


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any5 : any
---------------------------------------
forall (any2:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any6(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any5 : any
any6 : any
---------------------------------------
forall (any2:any) (any4:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 2
intro any7(rank:19)
intro any8(rank:19)
=================================================
Progress: 660


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any5 : any
---------------------------------------
forall (any2:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any5 : any
any7 : any
---------------------------------------
forall (any2:any) (any4:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 661


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any5 : any
---------------------------------------
forall (any2:any) (any4:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any5 : any
any8 : any
---------------------------------------
forall (any2:any) (any4:any) (any6:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any5
intro any8
Lemma : forall (any1:any) (any2:any) (arg1219:any list) (arg1220:any list) (arg1221:any list) (arg1222:any list) (arg1223:any list) (arg1224:any list) (arg1225:any list) (arg1226:any list) (arg1227:nat), rotate (arg1227) ((((((((((arg1219 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1220) @ arg1221) @ arg1222) @ arg1223) @ arg1224) @ arg1225) @ arg1226)) = (any1::(any2::rotate (arg1227) ((((((((arg1219 @ arg1220) @ arg1221) @ arg1222) @ arg1223) @ arg1224) @ arg1225) @ arg1226))))
Model : any1: 4, any2: 7, arg1219: (Nil), arg1220: (0::(2::(Nil))), arg1221: (Nil), arg1222: (Nil), arg1223: (Nil), arg1224: (Nil), arg1225: (Nil), arg1226: (Nil), arg1227: SUCC (ZERO)
Model : any1: 6, any2: 3, arg1219: (Nil), arg1220: (5::(Nil)), arg1221: (Nil), arg1222: (Nil), arg1223: (0::(Nil)), arg1224: (Nil), arg1225: (Nil), arg1226: (7::(Nil)), arg1227: ZERO
Model : any1: 7, any2: 7, arg1219: (Nil), arg1220: (3::(3::(Nil))), arg1221: (Nil), arg1222: (1::(Nil)), arg1223: (4::(Nil)), arg1224: (Nil), arg1225: (Nil), arg1226: (Nil), arg1227: SUCC (SUCC (ZERO))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (SUCC (ZERO)) (((((((((((Nil) @ (4::(Nil))) @ (7::(Nil))) @ (0::(2::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (4::(7::rotate (SUCC (ZERO)) (((((((((Nil) @ (0::(2::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (6::(Nil))) @ (3::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil)))) = (6::(3::rotate (ZERO) (((((((((Nil) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil))))))
rotate (SUCC (SUCC (ZERO))) (((((((((((Nil) @ (7::(Nil))) @ (7::(Nil))) @ (3::(3::(Nil)))) @ (Nil)) @ (1::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(7::rotate (SUCC (SUCC (ZERO))) (((((((((Nil) @ (3::(3::(Nil)))) @ (Nil)) @ (1::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.007331 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 6, any2: 5, any3: 0, any4: 3, any5: 3, any6: 0, any7: 0, any8: 6, any9: 1, any_list2: (Nil)
Model : any1: 3, any2: 4, any3: 3, any4: 1, any5: 7, any6: 6, any7: 3, any8: 0, any9: 0, any_list2: (Nil)
Model : any1: 5, any2: 5, any3: 8, any4: 7, any5: 0, any6: 3, any7: 6, any8: 0, any9: 0, any_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (5::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (1::(Nil)))) = (6::(5::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (1::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (4::(Nil))) @ (3::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (3::(4::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (7::(Nil))) @ (6::(Nil))) @ (3::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
rotate (len ((0::(Nil)))) ((((((((((((0::(Nil)) @ (Nil)) @ (5::(Nil))) @ (5::(Nil))) @ (8::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (0::(Nil)))) = (5::(5::rotate (len ((0::(Nil)))) ((((((((((0::(Nil)) @ (Nil)) @ (8::(Nil))) @ (7::(Nil))) @ (0::(Nil))) @ (3::(Nil))) @ (6::(Nil))) @ (0::(Nil))) @ (0::(Nil))))))
Simplifying took 0.013023 seconds
Result : true
advanced_generalize done
=================================================
Progress: 662


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any6 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any7(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any6 : any
any7 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 1
intro any8(rank:19)
=================================================
Progress: 663


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any6 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any7:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any6 : any
any8 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any7:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
intro any3
intro any6
intro any8
Lemma : forall (any1:any) (any2:any) (arg1228:any list) (arg1229:any list) (arg1230:any list) (arg1231:any list) (arg1232:any list) (arg1233:any list) (arg1234:any list) (arg1235:any list) (arg1236:nat), rotate (arg1236) ((((((((((arg1228 @ (any1::(Nil))) @ (any2::(Nil))) @ arg1229) @ arg1230) @ arg1231) @ arg1232) @ arg1233) @ arg1234) @ arg1235)) = (any1::(any2::rotate (arg1236) ((((((((arg1228 @ arg1229) @ arg1230) @ arg1231) @ arg1232) @ arg1233) @ arg1234) @ arg1235))))
Model : any1: 1, any2: 0, arg1228: (6::(0::(Nil))), arg1229: (Nil), arg1230: (4::(Nil)), arg1231: (Nil), arg1232: (Nil), arg1233: (Nil), arg1234: (Nil), arg1235: (0::(Nil)), arg1236: ZERO
Model : any1: 3, any2: 8, arg1228: (5::(Nil)), arg1229: (1::(Nil)), arg1230: (Nil), arg1231: (Nil), arg1232: (Nil), arg1233: (Nil), arg1234: (Nil), arg1235: (Nil), arg1236: ZERO
Model : any1: 7, any2: 4, arg1228: (Nil), arg1229: (Nil), arg1230: (Nil), arg1231: (Nil), arg1232: (0::(Nil)), arg1233: (Nil), arg1234: (Nil), arg1235: (Nil), arg1236: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (ZERO) (((((((((((6::(0::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (1::(0::rotate (ZERO) (((((((((6::(0::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))))))
rotate (ZERO) (((((((((((5::(Nil)) @ (3::(Nil))) @ (8::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (3::(8::rotate (ZERO) (((((((((5::(Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)))))
rotate (ZERO) (((((((((((Nil) @ (7::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (7::(4::rotate (ZERO) (((((((((Nil) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)))))
Simplifying took 0.004870 seconds
Result : false
Lemma : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any9:any) (any_list2:any list), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))
Model : any1: 3, any2: 1, any3: 0, any4: 6, any5: 4, any6: 0, any7: 5, any8: 4, any9: 6, any_list2: (Nil)
Model : any1: 7, any2: 8, any3: 0, any4: 1, any5: 0, any6: 5, any7: 2, any8: 4, any9: 7, any_list2: (5::(Nil))
Model : any1: 3, any2: 2, any3: 6, any4: 2, any5: 4, any6: 7, any7: 7, any8: 8, any9: 0, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (6::(Nil)))) = (3::(1::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (0::(Nil))) @ (6::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (4::(Nil))) @ (6::(Nil))))))
rotate (len ((5::(Nil)))) ((((((((((((5::(Nil)) @ (Nil)) @ (7::(Nil))) @ (8::(Nil))) @ (0::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (7::(Nil)))) = (7::(8::rotate (len ((5::(Nil)))) ((((((((((5::(Nil)) @ (Nil)) @ (0::(Nil))) @ (1::(Nil))) @ (0::(Nil))) @ (5::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (7::(Nil))))))
rotate (len ((Nil))) ((((((((((((Nil) @ (Nil)) @ (3::(Nil))) @ (2::(Nil))) @ (6::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (0::(Nil)))) = (3::(2::rotate (len ((Nil))) ((((((((((Nil) @ (Nil)) @ (6::(Nil))) @ (2::(Nil))) @ (4::(Nil))) @ (7::(Nil))) @ (7::(Nil))) @ (8::(Nil))) @ (0::(Nil))))))
Simplifying took 0.014339 seconds
Result : true
advanced_generalize done
=================================================
Progress: 664


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any7 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any) (any8:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
>>> intro any8(rank : 19)


1st goal of : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any) (any_list1:any list), rotate (len (any_list1)) ((((((((((any_list1 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list1)) ((((((((any_list1 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
any_list1 : any list
any9 : any
any_list2 : any list
IH1 : forall (any1:any) (any2:any) (any3:any) (any4:any) (any5:any) (any6:any) (any7:any) (any8:any), rotate (len (any_list2)) ((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil)))) = (any1::(any2::rotate (len (any_list2)) ((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))))))
Inductive1 : any_list1 = (any9::any_list2)
any1 : any
any3 : any
any7 : any
any8 : any
---------------------------------------
forall (any2:any) (any4:any) (any5:any) (any6:any), rotate (len (any_list2)) (((((((((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil))) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil)))) = (any1::(any2::rotate (len (any_list2)) (((((((((any_list2 @ (Nil)) @ (any3::(Nil))) @ (any4::(Nil))) @ (any5::(Nil))) @ (any6::(Nil))) @ (any7::(Nil))) @ (any8::(Nil))) @ (any9::(Nil))))))

0 goal(s) more...

8 conjecture(s) more...
Dilemma timed out for benchmark clam with problem 21.File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
