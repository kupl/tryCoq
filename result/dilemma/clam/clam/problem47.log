Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:any list) (y:any list), rotate (len (x)) ((x @ y)) = (y @ x)(rank : 0.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)

---------------------------------------
forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction any_list1(rank:12.)
induction any_list2(rank:12.)
=================================================
Progress: 2


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)

---------------------------------------
forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list1(rank : 12.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), rotate (len ((Nil))) (((Nil) @ any_list2)) = (any_list2 @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 3


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), rotate (len ((Nil))) (((Nil) @ any_list2)) = (any_list2 @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), any_list2 = (any_list2 @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:5.)
=================================================
Progress: 4


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), any_list2 = (any_list2 @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> induction any_list2(rank : 5.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
(Nil) = ((Nil) @ (Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 5


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
(Nil) = ((Nil) @ (Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : any_list3 = (any_list3 @ (Nil))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
(any1::any_list3) = ((any1::any_list3) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 6


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : any_list3 = (any_list3 @ (Nil))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
(any1::any_list3) = ((any1::any_list3) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : any_list3 = (any_list3 @ (Nil))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
(any1::any_list3) = (any1::(any_list3 @ (Nil)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4.)
=================================================
Progress: 7


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : any_list3 = (any_list3 @ (Nil))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
(any1::any_list3) = (any1::(any_list3 @ (Nil)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : any_list3 = (any_list3 @ (Nil))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
(any1::any_list3) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 8


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : any_list3 = (any_list3 @ (Nil))
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
(any1::any_list3) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), rotate (len ((any1::any_list3))) (((any1::any_list3) @ any_list2)) = (any_list2 @ (any1::any_list3))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 9


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), rotate (len ((any1::any_list3))) (((any1::any_list3) @ any_list2)) = (any_list2 @ (any1::any_list3))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), rotate (len (any_list3)) (((any_list3 @ any_list2) @ (any1::(Nil)))) = (any_list2 @ (any1::any_list3))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:4.)
=================================================
Progress: 10


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), rotate (len (any_list3)) (((any_list3 @ any_list2) @ (any1::(Nil)))) = (any_list2 @ (any1::any_list3))

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list2(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = ((Nil) @ (any1::any_list3))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 11


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = ((Nil) @ (any1::any_list3))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (5::(Nil)))) = (5::(Nil))
Prop: rotate (len ((0::(Nil)))) ((((0::(Nil)) @ (Nil)) @ (5::(Nil)))) = (5::(0::(Nil)))
Prop: rotate (len ((8::(Nil)))) ((((8::(Nil)) @ (Nil)) @ (8::(Nil)))) = (8::(8::(Nil)))
Lemma List
forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
End of Lemma List


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 12


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), rotate (len (any_list3)) ((any_list3 @ any_list2)) = (any_list2 @ any_list3)
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)(rank : 0.)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)

---------------------------------------
forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6.)
=================================================
Progress: 13


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)

---------------------------------------
forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6.)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (any1::(Nil)))) = (any1::(Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 14


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (any1::(Nil)))) = (any1::(Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len ((any2::any_list2))) ((((any2::any_list2) @ (Nil)) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 15


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len ((any2::any_list2))) ((((any2::any_list2) @ (Nil)) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any1(rank:5.)
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 16


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 5.)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:5.)
=================================================
Progress: 17


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 5.)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
rewrite <- IH1 in goal at 0
Prop: rotate (SUCC (ZERO)) ((((Nil) @ (1::(Nil))) @ (Nil))) = (1::rotate (SUCC (ZERO)) (((Nil) @ (Nil))))
Prop: rotate (ZERO) ((((Nil) @ (4::(Nil))) @ (3::(Nil)))) = (4::rotate (ZERO) (((Nil) @ (3::(Nil)))))
Prop: rotate (ZERO) ((((Nil) @ (3::(Nil))) @ (0::(Nil)))) = (3::rotate (ZERO) (((Nil) @ (0::(Nil)))))
previous tactics
simpl in goal
intro any1
validate generalize_common_subterm_goal
Prop: rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (0::(Nil))) @ (2::(Nil)))) = (0::(2::(Nil)))
Prop: rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (0::(Nil))) @ (0::(Nil)))) = (0::(0::(Nil)))
Prop: rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (6::(Nil))) @ (4::(Nil)))) = (6::(4::(Nil)))
Lemma List
forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
End of Lemma List


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 18


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))(rank : 0.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8.)
=================================================
Progress: 19


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any_list2:any list) (nat1:nat), rotate (nat1) ((((Nil) @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) (((Nil) @ any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 20


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any_list2:any list) (nat1:nat), rotate (nat1) ((((Nil) @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) (((Nil) @ any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any_list2:any list) (nat1:nat), rotate (nat1) ((any1::any_list2)) = (any1::rotate (nat1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:9.)
=================================================
Progress: 21


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any_list2:any list) (nat1:nat), rotate (nat1) ((any1::any_list2)) = (any1::rotate (nat1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_list2(rank : 9.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (nat1:nat), rotate (nat1) ((any1::(Nil))) = (any1::rotate (nat1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 22


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any) (nat1:nat), rotate (nat1) ((any1::(Nil))) = (any1::rotate (nat1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (any1:any), rotate (ZERO) ((any1::(Nil))) = (any1::rotate (ZERO) ((Nil)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 23


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (any1:any), rotate (ZERO) ((any1::(Nil))) = (any1::rotate (ZERO) ((Nil)))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (SUCC (nat2)) ((any1::(Nil))) = (any1::rotate (SUCC (nat2)) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 24


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (SUCC (nat2)) ((any1::(Nil))) = (any1::rotate (SUCC (nat2)) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any1(rank:9.)
rewrite IH1 in goal at 0(rank:25.)
=================================================
Progress: 25


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 9.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
rotate (nat2) ((any1::(Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:9.)
=================================================
Progress: 26


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
rotate (nat2) ((any1::(Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 9.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
(any1::rotate (nat2) ((Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: (1::rotate (ZERO) ((Nil))) = (1::(Nil))
Prop: (8::rotate (ZERO) ((Nil))) = (8::(Nil))
Prop: (1::rotate (SUCC (ZERO)) ((Nil))) = (1::(Nil))
previous tactics
simpl in goal
intro any1
Prop: rotate (SUCC (ZERO)) ((Nil)) = (Nil)
Prop: rotate (SUCC (ZERO)) ((Nil)) = (Nil)
Prop: rotate (ZERO) ((2::(Nil))) = (2::(Nil))
Lemma List
forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
End of Lemma List


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
rotate (nat2) ((any1::(Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 27


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
rotate (nat2) ((any1::(Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1(rank : 0.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1

---------------------------------------
forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction any_list1(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 28


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)

---------------------------------------
forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list2(rank : 12.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (Nil))) = ((Nil) @ any_list1)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 29


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (Nil))) = ((Nil) @ any_list1)

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (Nil))) = any_list1

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:5.)
=================================================
Progress: 30


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any_list1:any list), rotate (len (any_list1)) ((any_list1 @ (Nil))) = any_list1

1 goal(s) more...

0 conjecture(s) more...
>>> induction any_list1(rank : 5.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
rotate (len ((Nil))) (((Nil) @ (Nil))) = (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 31


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
rotate (len ((Nil))) (((Nil) @ (Nil))) = (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : rotate (len (any_list3)) ((any_list3 @ (Nil))) = any_list3
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
rotate (len ((any1::any_list3))) (((any1::any_list3) @ (Nil))) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 32


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : rotate (len (any_list3)) ((any_list3 @ (Nil))) = any_list3
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
rotate (len ((any1::any_list3))) (((any1::any_list3) @ (Nil))) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), rotate (len (any_list1)) ((any_list1 @ any_list2)) = (any_list2 @ any_list1)
any_list2 : any list
Base1 : any_list2 = (Nil)
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : rotate (len (any_list3)) ((any_list3 @ (Nil))) = any_list3
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
rotate (len (any_list3)) (((any_list3 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list3)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
parent
(any1::(Nil))
lower
Cons(_, Nil())
upper
rotate(len(any_list3), @(@(any_list3, Nil()), _))
remove upper
Nil()
remove lower
Nil()
remove upper
Cons(any1, Nil())
remove lower
Cons(any1, Nil())
parent
(any1::any_list3)
lower
Cons(_, any_list3)
upper
_
remove upper
any_list3
remove lower
_
remove upper
Cons(any1, any_list3)
remove lower
Cons(any1, _)
remove upper
Cons(any1, Cons(any2, any_list4))
remove lower
Cons(any1, Cons(any2, _))
remove upper
Cons(any1, Cons(any2, Cons(any3, any_list5)))
remove lower
Cons(any1, Cons(any2, Cons(any3, _)))
validate generalize_common_subterm_goal
Prop: rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (8::(Nil)))) = (8::(Nil))
Prop: rotate (len ((4::(Nil)))) ((((4::(Nil)) @ (Nil)) @ (7::(Nil)))) = (7::(4::(Nil)))
Prop: rotate (len ((Nil))) ((((Nil) @ (Nil)) @ (4::(Nil)))) = (4::(Nil))
=================================================
Progress: 33


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (any1:any) (any_list1:any list), rotate (len (any_list1)) (((any_list1 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), rotate (len (any_list2)) ((((any_list2 @ (Nil)) @ (any1::(Nil))) @ (any2::(Nil)))) = (any1::rotate (len (any_list2)) (((any_list2 @ (Nil)) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
Prop: rotate (SUCC (ZERO)) ((((Nil) @ (0::(Nil))) @ (Nil))) = (0::rotate (SUCC (ZERO)) (((Nil) @ (Nil))))
Prop: rotate (SUCC (ZERO)) ((((Nil) @ (0::(Nil))) @ (Nil))) = (0::rotate (SUCC (ZERO)) (((Nil) @ (Nil))))
Prop: rotate (ZERO) ((((Nil) @ (1::(Nil))) @ (8::(3::(Nil))))) = (1::rotate (ZERO) (((Nil) @ (8::(3::(Nil))))))
previous tactics
simpl in goal
parent
(any2::(Nil))
lower
Cons(_, Nil())
upper
rotate(len(any_list2), @(@(@(any_list2, Nil()), Cons(any1, Nil())), _))
remove upper
Cons(any2, Nil())
remove lower
Cons(any2, Nil())
parent
(any2::any_list2)
lower
Cons(_, any_list2)
upper
Cons(any1, _)
remove upper
Cons(any2, any_list2)
remove lower
Cons(any2, _)
remove upper
Cons(any2, Cons(any3, any_list3))
remove lower
Cons(any2, Cons(any3, _))
remove upper
Cons(any2, Cons(any3, Cons(any4, any_list4)))
remove lower
Cons(any2, Cons(any3, Cons(any4, _)))
validate generalize_common_subterm_goal
Prop: rotate (len ((0::(Nil)))) (((((0::(Nil)) @ (Nil)) @ (2::(Nil))) @ (6::(Nil)))) = (2::(6::(0::(Nil))))
Prop: rotate (len ((6::(Nil)))) (((((6::(Nil)) @ (Nil)) @ (1::(Nil))) @ (8::(Nil)))) = (1::(8::(6::(Nil))))
Prop: rotate (len ((Nil))) (((((Nil) @ (Nil)) @ (2::(Nil))) @ (4::(Nil)))) = (2::(4::(Nil)))
=================================================
Progress: 34


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1

---------------------------------------
forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1

0 goal(s) more...

3 conjecture(s) more...
>>> induction any_list1(rank : 18.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (nat1:nat), rotate (nat1) ((Nil)) = (Nil)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 35


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (nat1:nat), rotate (nat1) ((Nil)) = (Nil)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
Base1 : any_list1 = (Nil)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
rotate (ZERO) ((Nil)) = (Nil)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 36


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
Base1 : any_list1 = (Nil)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
rotate (ZERO) ((Nil)) = (Nil)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
Base1 : any_list1 = (Nil)
nat1 : nat
nat2 : nat
IH1 : rotate (nat2) ((Nil)) = (Nil)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
rotate (SUCC (nat2)) ((Nil)) = (Nil)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 37


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
Base1 : any_list1 = (Nil)
nat1 : nat
nat2 : nat
IH1 : rotate (nat2) ((Nil)) = (Nil)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
rotate (SUCC (nat2)) ((Nil)) = (Nil)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), rotate (nat1) (any_list2) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat), rotate (nat1) ((any1::any_list2)) = (any1::any_list2)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 38


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), rotate (nat1) (any_list2) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat), rotate (nat1) ((any1::any_list2)) = (any1::any_list2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), rotate (nat1) (any_list2) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
rotate (ZERO) ((any1::any_list2)) = (any1::any_list2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 39


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), rotate (nat1) (any_list2) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
rotate (ZERO) ((any1::any_list2)) = (any1::any_list2)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), rotate (nat1) (any_list2) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
nat2 : nat
IH2 : rotate (nat2) ((any1::any_list2)) = (any1::any_list2)
Inductive2 : nat1 = SUCC (nat2)
---------------------------------------
rotate (SUCC (nat2)) ((any1::any_list2)) = (any1::any_list2)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 40


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), rotate (nat1) (any_list2) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
nat2 : nat
IH2 : rotate (nat2) ((any1::any_list2)) = (any1::any_list2)
Inductive2 : nat1 = SUCC (nat2)
---------------------------------------
rotate (SUCC (nat2)) ((any1::any_list2)) = (any1::any_list2)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), rotate (nat1) (any_list2) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
nat2 : nat
IH2 : rotate (nat2) ((any1::any_list2)) = (any1::any_list2)
Inductive2 : nat1 = SUCC (nat2)
---------------------------------------
rotate (nat2) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: rotate (ZERO) (((Nil) @ (7::(Nil)))) = (7::(Nil))
Prop: rotate (SUCC (ZERO)) (((3::(Nil)) @ (4::(Nil)))) = (4::(3::(Nil)))
Prop: rotate (ZERO) (((8::(Nil)) @ (5::(Nil)))) = (5::(8::(Nil)))
asdf
=================================================
Progress: 41


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1

---------------------------------------
forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (any_list1:any list), rotate (ZERO) (any_list1) = any_list1

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 42


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (any_list1:any list), rotate (ZERO) (any_list1) = any_list1

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
nat2 : nat
IH1 : forall (any_list1:any list), rotate (nat2) (any_list1) = any_list1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any_list1:any list), rotate (SUCC (nat2)) (any_list1) = any_list1

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction any_list1(rank:10.)
=================================================
Progress: 43


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
nat2 : nat
IH1 : forall (any_list1:any list), rotate (nat2) (any_list1) = any_list1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any_list1:any list), rotate (SUCC (nat2)) (any_list1) = any_list1

0 goal(s) more...

3 conjecture(s) more...
>>> induction any_list1(rank : 10.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
nat2 : nat
IH1 : forall (any_list1:any list), rotate (nat2) (any_list1) = any_list1
Inductive1 : nat1 = SUCC (nat2)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
rotate (SUCC (nat2)) ((Nil)) = (Nil)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 44


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
nat2 : nat
IH1 : forall (any_list1:any list), rotate (nat2) (any_list1) = any_list1
Inductive1 : nat1 = SUCC (nat2)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
rotate (SUCC (nat2)) ((Nil)) = (Nil)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
nat2 : nat
IH1 : forall (any_list1:any list), rotate (nat2) (any_list1) = any_list1
Inductive1 : nat1 = SUCC (nat2)
any_list1 : any list
any1 : any
any_list2 : any list
IH2 : rotate (SUCC (nat2)) (any_list2) = any_list2
Inductive2 : any_list1 = (any1::any_list2)
---------------------------------------
rotate (SUCC (nat2)) ((any1::any_list2)) = (any1::any_list2)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 45


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
nat2 : nat
IH1 : forall (any_list1:any list), rotate (nat2) (any_list1) = any_list1
Inductive1 : nat1 = SUCC (nat2)
any_list1 : any list
any1 : any
any_list2 : any list
IH2 : rotate (SUCC (nat2)) (any_list2) = any_list2
Inductive2 : any_list1 = (any1::any_list2)
---------------------------------------
rotate (SUCC (nat2)) ((any1::any_list2)) = (any1::any_list2)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
nat2 : nat
IH1 : forall (any_list1:any list), rotate (nat2) (any_list1) = any_list1
Inductive1 : nat1 = SUCC (nat2)
any_list1 : any list
any1 : any
any_list2 : any list
IH2 : rotate (SUCC (nat2)) (any_list2) = any_list2
Inductive2 : any_list1 = (any1::any_list2)
---------------------------------------
rotate (nat2) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:9.)
=================================================
Progress: 46


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
nat2 : nat
IH1 : forall (any_list1:any list), rotate (nat2) (any_list1) = any_list1
Inductive1 : nat1 = SUCC (nat2)
any_list1 : any list
any1 : any
any_list2 : any list
IH2 : rotate (SUCC (nat2)) (any_list2) = any_list2
Inductive2 : any_list1 = (any1::any_list2)
---------------------------------------
rotate (nat2) ((any_list2 @ (any1::(Nil)))) = (any1::any_list2)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 9.)


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
nat2 : nat
IH1 : forall (any_list1:any list), rotate (nat2) (any_list1) = any_list1
Inductive1 : nat1 = SUCC (nat2)
any_list1 : any list
any1 : any
any_list2 : any list
IH2 : rotate (SUCC (nat2)) (any_list2) = any_list2
Inductive2 : any_list1 = (any1::any_list2)
---------------------------------------
(any_list2 @ (any1::(Nil))) = (any1::any_list2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ((Nil) @ (5::(Nil))) = (5::(Nil))
Prop: ((Nil) @ (1::(Nil))) = (1::(Nil))
Prop: ((Nil) @ (8::(Nil))) = (8::(Nil))
previous tactics
simpl in goal
parent
(any1::(Nil))
lower
Cons(_, Nil())
upper
rotate(nat2, @(any_list2, _))
remove upper
Cons(any1, Nil())
remove lower
Cons(any1, Nil())
parent
(any1::any_list2)
lower
Cons(_, any_list2)
upper
_
remove upper
any_list2
remove lower
_
remove upper
Cons(any1, any_list2)
remove lower
Cons(any1, _)
remove upper
Cons(any1, Cons(any2, any_list3))
remove lower
Cons(any1, Cons(any2, _))
remove upper
Cons(any1, Cons(any2, Cons(any3, any_list4)))
remove lower
Cons(any1, Cons(any2, Cons(any3, _)))
validate generalize_common_subterm_goal
Prop: rotate (ZERO) (((6::(Nil)) @ (4::(Nil)))) = (4::(6::(Nil)))
Prop: rotate (SUCC (ZERO)) (((Nil) @ (1::(Nil)))) = (1::(Nil))
Prop: rotate (ZERO) (((Nil) @ (7::(Nil)))) = (7::(Nil))
asdf
Lemma List
forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
End of Lemma List


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
nat2 : nat
IH1 : forall (any_list1:any list), rotate (nat2) (any_list1) = any_list1
Inductive1 : nat1 = SUCC (nat2)
any_list1 : any list
any1 : any
any_list2 : any list
IH2 : rotate (SUCC (nat2)) (any_list2) = any_list2
Inductive2 : any_list1 = (any1::any_list2)
---------------------------------------
(any_list2 @ (any1::(Nil))) = (any1::any_list2)

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 47


1st goal of : forall (any_list1:any list) (nat1:nat), rotate (nat1) (any_list1) = any_list1
nat1 : nat
nat2 : nat
IH1 : forall (any_list1:any list), rotate (nat2) (any_list1) = any_list1
Inductive1 : nat1 = SUCC (nat2)
any_list1 : any list
any1 : any
any_list2 : any list
IH2 : rotate (SUCC (nat2)) (any_list2) = any_list2
Inductive2 : any_list1 = (any1::any_list2)
---------------------------------------
(any_list2 @ (any1::(Nil))) = (any1::any_list2)

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)(rank : 0.)


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)

---------------------------------------
forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:12.)
=================================================
Progress: 48


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)

---------------------------------------
forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)

0 goal(s) more...

4 conjecture(s) more...
>>> induction any_list1(rank : 12.)


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), ((Nil) @ (any1::(Nil))) = (any1::(Nil))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 49


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), ((Nil) @ (any1::(Nil))) = (any1::(Nil))

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), ((any2::any_list2) @ (any1::(Nil))) = (any1::(any2::any_list2))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 50


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), ((any2::any_list2) @ (any1::(Nil))) = (any1::(any2::any_list2))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (any2::(any_list2 @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any1(rank:11.)
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 51


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (any2::(any_list2 @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any1(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
(any2::(any_list2 @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 52


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (any2::(any_list2 @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 19.)


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (any2::(any1::any_list2)) = (any1::(any2::any_list2))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 2(rank:11.)
=================================================
Progress: 53


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (any2::(any1::any_list2)) = (any1::(any2::any_list2))

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (any2::(any1::any_list2)) = (any1::(any_list2 @ (any2::(Nil))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro any1(rank:11.)
=================================================
Progress: 54


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (any2::(any1::any_list2)) = (any1::(any_list2 @ (any2::(Nil))))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any1(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
(any2::(any1::any_list2)) = (any1::(any_list2 @ (any2::(Nil))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH1 in goal at 2
intro any1
validate generalize_common_subterm_goal
Prop: (6::(0::(Nil))) = (0::((Nil) @ (6::(Nil))))
Prop: (2::(6::(Nil))) = (6::((Nil) @ (2::(Nil))))
Prop: (0::(4::(3::(Nil)))) = (4::((3::(Nil)) @ (0::(Nil))))
asdf
=================================================
Progress: 55


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (any2::(any_list2 @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 19.)


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (any2::(any_list2 @ (any1::(Nil)))) = (any1::(any_list2 @ (any2::(Nil))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: (3::((3::(Nil)) @ (1::(Nil)))) = (1::((3::(Nil)) @ (3::(Nil))))
Prop: (0::((5::(Nil)) @ (4::(Nil)))) = (4::((5::(Nil)) @ (0::(Nil))))
Prop: (1::((Nil) @ (8::(Nil)))) = (8::((Nil) @ (1::(Nil))))
asdf
previous tactics
simpl in goal
parent
(any2::(any_list2 @ (any1::(Nil))))
lower
Cons(_, @(any_list2, Cons(any1, Nil())))
upper
_
remove upper
@(any_list2, Cons(any1, Nil()))
remove lower
@(any_list2, Cons(any1, Nil()))
remove upper
Cons(any2, @(any_list2, Cons(any1, Nil())))
remove lower
Cons(any2, @(any_list2, Cons(any1, Nil())))
remove upper
Cons(any2, Cons(any3, @(any_list3, Cons(any1, Nil()))))
remove lower
Cons(any2, Cons(any3, @(any_list3, Cons(any1, Nil()))))
remove upper
Cons(any2, Cons(any3, Cons(any4, @(any_list4, Cons(any1, Nil())))))
remove lower
Cons(any2, Cons(any3, Cons(any4, @(any_list4, Cons(any1, Nil())))))
parent
(any2::any_list2)
lower
Cons(_, any_list2)
upper
Cons(any1, _)
remove upper
Cons(any2, any_list2)
remove lower
Cons(any2, _)
remove upper
Cons(any2, Cons(any3, any_list3))
remove lower
Cons(any2, Cons(any3, _))
remove upper
Cons(any2, Cons(any3, Cons(any4, any_list4)))
remove lower
Cons(any2, Cons(any3, Cons(any4, _)))
validate generalize_common_subterm_goal
Prop: (8::((Nil) @ (8::(Nil)))) = (8::(8::(Nil)))
Prop: (3::((Nil) @ (8::(Nil)))) = (8::(3::(Nil)))
Prop: (3::((Nil) @ (4::(Nil)))) = (4::(3::(Nil)))
asdf
=================================================
Progress: 56


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
(any2::(any_list2 @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 19.)


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
(any2::(any1::any_list2)) = (any1::(any2::any_list2))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: (6::(0::(Nil))) = (0::(6::(Nil)))
Prop: (3::(2::(Nil))) = (2::(3::(Nil)))
Prop: (8::(2::(Nil))) = (2::(8::(Nil)))
asdf
previous tactics
simpl in goal
intro any1
validate generalize_common_subterm_goal
Prop: (0::((7::(Nil)) @ (4::(Nil)))) = (4::(0::(7::(Nil))))
Prop: (2::((Nil) @ (0::(Nil)))) = (0::(2::(Nil)))
Prop: (7::((3::(Nil)) @ (7::(Nil)))) = (7::(7::(3::(Nil))))
asdf
=================================================
Progress: 57


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
(any2::(any_list2 @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 19.)


1st goal of : forall (any1:any) (any_list1:any list), (any_list1 @ (any1::(Nil))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), (any_list2 @ (any1::(Nil))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
(any2::(any_list2 @ (any1::(Nil)))) = (any1::(any_list2 @ (any2::(Nil))))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: (4::((Nil) @ (6::(Nil)))) = (6::((Nil) @ (4::(Nil))))
Prop: (6::((Nil) @ (0::(Nil)))) = (0::((Nil) @ (6::(Nil))))
Prop: (4::((0::(Nil)) @ (1::(Nil)))) = (1::((0::(Nil)) @ (4::(Nil))))
asdf
previous tactics
simpl in goal
intro any1
validate generalize_common_subterm_goal
Prop: (3::((8::(1::(Nil))) @ (1::(Nil)))) = (1::(3::(8::(1::(Nil)))))
Prop: (4::((4::(5::(Nil))) @ (0::(Nil)))) = (0::(4::(4::(5::(Nil)))))
Prop: (5::((4::(Nil)) @ (0::(Nil)))) = (0::(5::(4::(Nil))))
asdf
=================================================
Progress: 58


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 25.)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list) (nat1:nat), rotate (nat1) (((any_list1 @ (any1::(Nil))) @ any_list2)) = (any1::rotate (nat1) ((any_list1 @ any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), rotate (nat2) ((any1::(Nil))) = (any1::rotate (nat2) ((Nil)))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), (any1::rotate (nat2) ((Nil))) = (any1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: (0::rotate (ZERO) ((Nil))) = (0::(Nil))
Prop: (1::rotate (ZERO) ((Nil))) = (1::(Nil))
Prop: (6::rotate (SUCC (ZERO)) ((Nil))) = (6::(Nil))
previous tactics
simpl in goal
Prop: rotate (ZERO) ((4::(Nil))) = (4::(Nil))
Prop: rotate (ZERO) ((Nil)) = (Nil)
Prop: rotate (ZERO) ((Nil)) = (Nil)
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 283, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
