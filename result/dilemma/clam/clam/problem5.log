Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:any list), len (reverse (x)) = len (x)(rank : 0)


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)

---------------------------------------
forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)

---------------------------------------
forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list1(rank : 4)


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
len (reverse ((Nil))) = len ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
len (reverse ((Nil))) = len ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : len (reverse (any_list2)) = len (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
len (reverse ((any1::any_list2))) = len ((any1::any_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : len (reverse (any_list2)) = len (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
len (reverse ((any1::any_list2))) = len ((any1::any_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : len (reverse (any_list2)) = len (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
len ((reverse (any_list2) @ (any1::(Nil)))) = SUCC (len (any_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:3)
=================================================
Progress: 5


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : len (reverse (any_list2)) = len (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
len ((reverse (any_list2) @ (any1::(Nil)))) = SUCC (len (any_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 3)


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : len (reverse (any_list2)) = len (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
len ((reverse (any_list2) @ (any1::(Nil)))) = SUCC (len (reverse (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (arg1:any list), len ((arg1 @ (any1::(Nil)))) = SUCC (len (arg1))
Model : any1: 5, arg1: (Nil)
Model : any1: 4, arg1: (0::(Nil))
Model : any1: 1, arg1: (2::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
len (((Nil) @ (5::(Nil)))) = SUCC (len ((Nil)))
len (((0::(Nil)) @ (4::(Nil)))) = SUCC (len ((0::(Nil))))
len (((2::(Nil)) @ (1::(Nil)))) = SUCC (len ((2::(Nil))))
Simplifying took 0.000269 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : len (reverse (any_list2)) = len (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
len ((reverse (any_list2) @ (any1::(Nil)))) = SUCC (len (reverse (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : len (reverse (any_list2)) = len (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
len ((reverse (any_list2) @ (any1::(Nil)))) = SUCC (len (reverse (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any1:any) (arg1:any list), len ((arg1 @ (any1::(Nil)))) = SUCC (len (arg1))(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 7


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), len (((Nil) @ (any1::(Nil)))) = SUCC (len ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 8


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), len (((Nil) @ (any1::(Nil)))) = SUCC (len ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), len (((any2::any_list2) @ (any1::(Nil)))) = SUCC (len ((any2::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 9


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), len (((any2::any_list2) @ (any1::(Nil)))) = SUCC (len ((any2::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), SUCC (len ((any_list2 @ (any1::(Nil))))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any1(rank:5)
rewrite IH1 in goal at 0(rank:13)
=================================================
Progress: 10


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), SUCC (len ((any_list2 @ (any1::(Nil))))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (len ((any_list2 @ (any1::(Nil))))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:5)
=================================================
Progress: 11


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (len ((any_list2 @ (any1::(Nil))))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 12


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : len (reverse (any_list2)) = len (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
len ((reverse (any_list2) @ (any1::(Nil)))) = SUCC (len (reverse (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite lemma3 in goal at 0(rank:3)
=================================================
Progress: 13


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : len (reverse (any_list2)) = len (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
len ((reverse (any_list2) @ (any1::(Nil)))) = SUCC (len (reverse (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 3)


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : len (reverse (any_list2)) = len (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
SUCC (len (reverse (any_list2))) = SUCC (len (reverse (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 14


1st goal of : forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : len (reverse (any_list2)) = len (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
SUCC (len (reverse (any_list2))) = SUCC (len (reverse (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


No conjecture
Proof Success
Proof
assert forall (any_list1:any list), len (reverse (any_list1)) = len (any_list1)
induction any_list1
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0
assert forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
induction any_list1
reflexivity
simpl in goal
intro any1
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
Qed
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
