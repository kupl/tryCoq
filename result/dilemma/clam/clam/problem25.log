Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:any list) (y:any list), even (len ((x @ y))) = even (plus (len (x)) (len (y)))(rank : 0.)


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction any_list1(rank:12.)
induction any_list2(rank:12.)
=================================================
Progress: 2


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list1(rank : 12.)


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), even (len (((Nil) @ any_list2))) = even (plus (len ((Nil))) (len (any_list2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 3


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), even (len (((Nil) @ any_list2))) = even (plus (len ((Nil))) (len (any_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), even (len (((any1::any_list3) @ any_list2))) = even (plus (len ((any1::any_list3))) (len (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 4


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), even (len (((any1::any_list3) @ any_list2))) = even (plus (len ((any1::any_list3))) (len (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), if even (len ((any_list3 @ any_list2))) then false else true = if even (plus (len (any_list3)) (len (any_list2))) then false else true

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro any_list2(rank:3.)
=================================================
Progress: 5


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), if even (len ((any_list3 @ any_list2))) then false else true = if even (plus (len (any_list3)) (len (any_list2))) then false else true

0 goal(s) more...

0 conjecture(s) more...
>>> intro any_list2(rank : 3.)


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
---------------------------------------
if even (len ((any_list3 @ any_list2))) then false else true = if even (plus (len (any_list3)) (len (any_list2))) then false else true

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case even (plus (len (any_list3)) (len (any_list2)))(rank:4.)
case even (len ((any_list3 @ any_list2)))(rank:4.)
rewrite IH1 in goal at 0(rank:11.)
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 6


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
---------------------------------------
if even (len ((any_list3 @ any_list2))) then false else true = if even (plus (len (any_list3)) (len (any_list2))) then false else true

0 goal(s) more...

0 conjecture(s) more...
>>> case even (plus (len (any_list3)) (len (any_list2)))(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Case1 : even (plus (len (any_list3)) (len (any_list2))) = true
---------------------------------------
if even (len ((any_list3 @ any_list2))) then false else true = false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case even (len ((any_list3 @ any_list2)))(rank:5.)
rewrite IH1 in goal at 0(rank:20.)
rewrite <- Case1 in goal at 0(rank:20.)
=================================================
Progress: 7


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
---------------------------------------
if even (len ((any_list3 @ any_list2))) then false else true = if even (plus (len (any_list3)) (len (any_list2))) then false else true

0 goal(s) more...

0 conjecture(s) more...
>>> case even (len ((any_list3 @ any_list2)))(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Case1 : even (len ((any_list3 @ any_list2))) = true
---------------------------------------
false = if even (plus (len (any_list3)) (len (any_list2))) then false else true

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case even (plus (len (any_list3)) (len (any_list2)))(rank:5.)
rewrite <- IH1 in goal at 0(rank:12.)
rewrite <- Case1 in goal at 0(rank:20.)
=================================================
Progress: 8


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Case1 : even (plus (len (any_list3)) (len (any_list2))) = true
---------------------------------------
if even (len ((any_list3 @ any_list2))) then false else true = false

1 goal(s) more...

0 conjecture(s) more...
>>> case even (len ((any_list3 @ any_list2)))(rank : 5.)


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Case1 : even (plus (len (any_list3)) (len (any_list2))) = true
Case2 : even (len ((any_list3 @ any_list2))) = true
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 9


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Case1 : even (plus (len (any_list3)) (len (any_list2))) = true
Case2 : even (len ((any_list3 @ any_list2))) = true
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Case1 : even (plus (len (any_list3)) (len (any_list2))) = true
Case2 : even (len ((any_list3 @ any_list2))) = false
---------------------------------------
true = false

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case2 in goal at 0(rank:20.)
=================================================
Progress: 10


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Case1 : even (len ((any_list3 @ any_list2))) = true
---------------------------------------
false = if even (plus (len (any_list3)) (len (any_list2))) then false else true

1 goal(s) more...

0 conjecture(s) more...
>>> case even (plus (len (any_list3)) (len (any_list2)))(rank : 5.)


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Case1 : even (len ((any_list3 @ any_list2))) = true
Case2 : even (plus (len (any_list3)) (len (any_list2))) = true
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 11


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Case1 : even (len ((any_list3 @ any_list2))) = true
Case2 : even (plus (len (any_list3)) (len (any_list2))) = true
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
Case1 : even (len ((any_list3 @ any_list2))) = true
Case2 : even (plus (len (any_list3)) (len (any_list2))) = false
---------------------------------------
false = true

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case2 in goal at 0(rank:20.)
=================================================
Progress: 12


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
---------------------------------------
if even (len ((any_list3 @ any_list2))) then false else true = if even (plus (len (any_list3)) (len (any_list2))) then false else true

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
---------------------------------------
if even (plus (len (any_list3)) (len (any_list2))) then false else true = if even (plus (len (any_list3)) (len (any_list2))) then false else true

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0.)
=================================================
Progress: 13


1st goal of : forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), even (len ((any_list3 @ any_list2))) = even (plus (len (any_list3)) (len (any_list2)))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
---------------------------------------
if even (plus (len (any_list3)) (len (any_list2))) then false else true = if even (plus (len (any_list3)) (len (any_list2))) then false else true

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0.)


No conjecture
Proof Success
Proof
assert forall (any_list1:any list) (any_list2:any list), even (len ((any_list1 @ any_list2))) = even (plus (len (any_list1)) (len (any_list2)))
induction any_list1
reflexivity
simpl in goal
intro any_list2
rewrite IH1 in goal at 0
reflexivity
Qed
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
