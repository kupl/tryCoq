Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:any list) (y:any list), len (reverse ((x @ y))) = plus (len (x)) (len (y))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))

---------------------------------------
forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction any_list1(rank:12)
induction any_list2(rank:12)
=================================================
Progress: 2


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))

---------------------------------------
forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list1(rank : 12)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), len (reverse (((Nil) @ any_list2))) = plus (len ((Nil))) (len (any_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 3


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), len (reverse (((Nil) @ any_list2))) = plus (len ((Nil))) (len (any_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), len (reverse (any_list2)) = len (any_list2)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:5)
=================================================
Progress: 4


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list), len (reverse (any_list2)) = len (any_list2)

1 goal(s) more...

0 conjecture(s) more...
>>> induction any_list2(rank : 5)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
len (reverse ((Nil))) = len ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 5


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
len (reverse ((Nil))) = len ((Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : len (reverse (any_list3)) = len (any_list3)
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
len (reverse ((any1::any_list3))) = len ((any1::any_list3))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 6


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : len (reverse (any_list3)) = len (any_list3)
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
len (reverse ((any1::any_list3))) = len ((any1::any_list3))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : len (reverse (any_list3)) = len (any_list3)
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
len ((reverse (any_list3) @ (any1::(Nil)))) = SUCC (len (any_list3))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4)
=================================================
Progress: 7


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : len (reverse (any_list3)) = len (any_list3)
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
len ((reverse (any_list3) @ (any1::(Nil)))) = SUCC (len (any_list3))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : len (reverse (any_list3)) = len (any_list3)
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
len ((reverse (any_list3) @ (any1::(Nil)))) = SUCC (len (reverse (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
New Env

;;
Lemma List
forall (any1:any) (arg1:any list), len ((arg1 @ (any1::(Nil)))) = SUCC (len (arg1))
End of Lemma List


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : len (reverse (any_list3)) = len (any_list3)
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
len ((reverse (any_list3) @ (any1::(Nil)))) = SUCC (len (reverse (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 8


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : len (reverse (any_list3)) = len (any_list3)
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
len ((reverse (any_list3) @ (any1::(Nil)))) = SUCC (len (reverse (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any1:any) (arg1:any list), len ((arg1 @ (any1::(Nil)))) = SUCC (len (arg1))(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 9


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), len (((Nil) @ (any1::(Nil)))) = SUCC (len ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 10


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), len (((Nil) @ (any1::(Nil)))) = SUCC (len ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), len (((any2::any_list2) @ (any1::(Nil)))) = SUCC (len ((any2::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 11


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), len (((any2::any_list2) @ (any1::(Nil)))) = SUCC (len ((any2::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), SUCC (len ((any_list2 @ (any1::(Nil))))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any1(rank:5)
rewrite IH1 in goal at 0(rank:13)
=================================================
Progress: 12


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), SUCC (len ((any_list2 @ (any1::(Nil))))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (len ((any_list2 @ (any1::(Nil))))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:5)
=================================================
Progress: 13


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (len ((any_list2 @ (any1::(Nil))))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 14


1st goal of : forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), len ((any_list2 @ (any1::(Nil)))) = SUCC (len (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
SUCC (SUCC (len (any_list2))) = SUCC (SUCC (len (any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : len (reverse (any_list3)) = len (any_list3)
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
len ((reverse (any_list3) @ (any1::(Nil)))) = SUCC (len (reverse (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite lemma3 in goal at 0(rank:4)
=================================================
Progress: 15


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : len (reverse (any_list3)) = len (any_list3)
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
len ((reverse (any_list3) @ (any1::(Nil)))) = SUCC (len (reverse (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 4)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : len (reverse (any_list3)) = len (any_list3)
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
SUCC (len (reverse (any_list3))) = SUCC (len (reverse (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 16


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any1 : any
any_list3 : any list
IH1 : len (reverse (any_list3)) = len (any_list3)
Inductive1 : any_list2 = (any1::any_list3)
---------------------------------------
SUCC (len (reverse (any_list3))) = SUCC (len (reverse (any_list3)))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), len (reverse ((any_list3 @ any_list2))) = plus (len (any_list3)) (len (any_list2))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), len (reverse (((any1::any_list3) @ any_list2))) = plus (len ((any1::any_list3))) (len (any_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 17


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), len (reverse ((any_list3 @ any_list2))) = plus (len (any_list3)) (len (any_list2))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), len (reverse (((any1::any_list3) @ any_list2))) = plus (len ((any1::any_list3))) (len (any_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), len (reverse ((any_list3 @ any_list2))) = plus (len (any_list3)) (len (any_list2))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), len ((reverse ((any_list3 @ any_list2)) @ (any1::(Nil)))) = SUCC (plus (len (any_list3)) (len (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:11)
induction any_list2(rank:12)
rewrite <- IH1 in goal at 0(rank:11)
=================================================
Progress: 18


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), len (reverse ((any_list3 @ any_list2))) = plus (len (any_list3)) (len (any_list2))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), len ((reverse ((any_list3 @ any_list2)) @ (any1::(Nil)))) = SUCC (plus (len (any_list3)) (len (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), len (reverse ((any_list3 @ any_list2))) = plus (len (any_list3)) (len (any_list2))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), SUCC (len (reverse ((any_list3 @ any_list2)))) = SUCC (plus (len (any_list3)) (len (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:11)
induction any_list2(rank:12)
rewrite <- IH1 in goal at 0(rank:11)
=================================================
Progress: 19


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), len (reverse ((any_list3 @ any_list2))) = plus (len (any_list3)) (len (any_list2))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), len ((reverse ((any_list3 @ any_list2)) @ (any1::(Nil)))) = SUCC (plus (len (any_list3)) (len (any_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), len (reverse ((any_list3 @ any_list2))) = plus (len (any_list3)) (len (any_list2))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), len ((reverse ((any_list3 @ any_list2)) @ (any1::(Nil)))) = SUCC (len (reverse ((any_list3 @ any_list2))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro any_list2(rank:3)
=================================================
Progress: 20


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), len (reverse ((any_list3 @ any_list2))) = plus (len (any_list3)) (len (any_list2))
Inductive1 : any_list1 = (any1::any_list3)
---------------------------------------
forall (any_list2:any list), len ((reverse ((any_list3 @ any_list2)) @ (any1::(Nil)))) = SUCC (len (reverse ((any_list3 @ any_list2))))

0 goal(s) more...

0 conjecture(s) more...
>>> intro any_list2(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), len (reverse ((any_list3 @ any_list2))) = plus (len (any_list3)) (len (any_list2))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
---------------------------------------
len ((reverse ((any_list3 @ any_list2)) @ (any1::(Nil)))) = SUCC (len (reverse ((any_list3 @ any_list2))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:3)
=================================================
Progress: 21


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), len (reverse ((any_list3 @ any_list2))) = plus (len (any_list3)) (len (any_list2))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
---------------------------------------
len ((reverse ((any_list3 @ any_list2)) @ (any1::(Nil)))) = SUCC (len (reverse ((any_list3 @ any_list2))))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 3)


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), len (reverse ((any_list3 @ any_list2))) = plus (len (any_list3)) (len (any_list2))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
---------------------------------------
SUCC (len (reverse ((any_list3 @ any_list2)))) = SUCC (len (reverse ((any_list3 @ any_list2))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 22


1st goal of : forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
any_list1 : any list
any1 : any
any_list3 : any list
IH1 : forall (any_list2:any list), len (reverse ((any_list3 @ any_list2))) = plus (len (any_list3)) (len (any_list2))
Inductive1 : any_list1 = (any1::any_list3)
any_list2 : any list
---------------------------------------
SUCC (len (reverse ((any_list3 @ any_list2)))) = SUCC (len (reverse ((any_list3 @ any_list2))))

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


No conjecture
Proof Success
Proof
assert forall (any_list1:any list) (any_list2:any list), len (reverse ((any_list1 @ any_list2))) = plus (len (any_list1)) (len (any_list2))
induction any_list1
simpl in goal
induction any_list2
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0
assert forall (any1:any) (any_list1:any list), len ((any_list1 @ (any1::(Nil)))) = SUCC (len (any_list1))
induction any_list1
reflexivity
simpl in goal
intro any1
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0
intro any_list2
rewrite lemma3 in goal at 0
reflexivity
Qed
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
