Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:any list), reverse (reverse (x)) = x(rank : 0)


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1

---------------------------------------
forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1

---------------------------------------
forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1

0 goal(s) more...

0 conjecture(s) more...
>>> induction any_list1(rank : 4)


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
reverse (reverse ((Nil))) = (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
reverse (reverse ((Nil))) = (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (reverse (any_list2)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
reverse (reverse ((any1::any_list2))) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (reverse (any_list2)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
reverse (reverse ((any1::any_list2))) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (reverse (any_list2)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
advanced_generalize done
Lemma : forall (any1:any) (any_list2:any list), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Model : any1: 8, any_list2: (Nil)
Model : any1: 1, any_list2: (Nil)
Model : any1: 3, any_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((reverse ((Nil)) @ (8::(Nil)))) = (8::(Nil))
reverse ((reverse ((Nil)) @ (1::(Nil)))) = (1::(Nil))
reverse ((reverse ((Nil)) @ (3::(Nil)))) = (3::(Nil))
Simplifying took 0.000219 seconds
Result : true
New Env

;;
Lemma List
forall (any1:any) (any_list2:any list), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
End of Lemma List


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (reverse (any_list2)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 5


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (reverse (any_list2)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any1:any) (any_list2:any list), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)

---------------------------------------
forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 6


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)

---------------------------------------
forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), reverse ((reverse ((Nil)) @ (any1::(Nil)))) = (any1::(Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 7


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), reverse ((reverse ((Nil)) @ (any1::(Nil)))) = (any1::(Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse ((reverse ((any2::any_list2)) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 8


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse ((reverse ((any2::any_list2)) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any1(rank:5)
rewrite <- IH1 in goal at 0(rank:13)
=================================================
Progress: 9


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:5)
=================================================
Progress: 10


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::reverse ((reverse (any_list2) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
rewrite <- IH1 in goal at 0
advanced_generalize done
Lemma : forall (any1:any) (arg1:any list), reverse ((arg1 @ (any1::(Nil)))) = (any1::reverse (arg1))
Model : any1: 6, arg1: (Nil)
Model : any1: 4, arg1: (Nil)
Model : any1: 3, arg1: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((Nil) @ (6::(Nil)))) = (6::reverse ((Nil)))
reverse (((Nil) @ (4::(Nil)))) = (4::reverse ((Nil)))
reverse (((Nil) @ (3::(Nil)))) = (3::reverse ((Nil)))
Simplifying took 0.000247 seconds
Result : true
New Env

;;
Lemma List
forall (any1:any) (arg1:any list), reverse ((arg1 @ (any1::(Nil)))) = (any1::reverse (arg1))
End of Lemma List


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::reverse ((reverse (any_list2) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 11


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::reverse ((reverse (any_list2) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (arg1:any list), reverse ((arg1 @ (any1::(Nil)))) = (any1::reverse (arg1))(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 12


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), reverse (((Nil) @ (any1::(Nil)))) = (any1::reverse ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 13


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), reverse (((Nil) @ (any1::(Nil)))) = (any1::reverse ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse (((any2::any_list2) @ (any1::(Nil)))) = (any1::reverse ((any2::any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 14


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse (((any2::any_list2) @ (any1::(Nil)))) = (any1::reverse ((any2::any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (reverse ((any_list2 @ (any1::(Nil)))) @ (any2::(Nil))) = (any1::(reverse (any_list2) @ (any2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any1(rank:7)
rewrite IH1 in goal at 0(rank:15)
=================================================
Progress: 15


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (reverse ((any_list2 @ (any1::(Nil)))) @ (any2::(Nil))) = (any1::(reverse (any_list2) @ (any2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
(reverse ((any_list2 @ (any1::(Nil)))) @ (any2::(Nil))) = (any1::(reverse (any_list2) @ (any2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:7)
=================================================
Progress: 16


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
(reverse ((any_list2 @ (any1::(Nil)))) @ (any2::(Nil))) = (any1::(reverse (any_list2) @ (any2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
((any1::reverse (any_list2)) @ (any2::(Nil))) = (any1::(reverse (any_list2) @ (any2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 17


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
((any1::reverse (any_list2)) @ (any2::(Nil))) = (any1::(reverse (any_list2) @ (any2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::reverse ((reverse (any_list2) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 4
rewrite lemma3 in goal at 1(rank:13)
rewrite lemma3 in goal at 0(rank:21)
rewrite <- lemma3 in goal at 0(rank:13)
rewrite lemma3 in goal at 2(rank:21)
=================================================
Progress: 18


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::(any2::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::reverse ((reverse (any_list2) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
advanced_generalize done
Lemma : forall (any1:any) (arg2:any list), reverse ((arg2 @ (any1::(Nil)))) = (any1::reverse (arg2))
Model : any1: 0, arg2: (1::(Nil))
Model : any1: 8, arg2: (Nil)
Model : any1: 5, arg2: (8::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil  -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((1::(Nil)) @ (0::(Nil)))) = (0::reverse ((1::(Nil))))
reverse (((Nil) @ (8::(Nil)))) = (8::reverse ((Nil)))
reverse (((8::(Nil)) @ (5::(Nil)))) = (5::reverse ((8::(Nil))))
Simplifying took 0.000520 seconds
Result : true
New Env

;;
Lemma List
forall (any1:any) (arg2:any list), reverse ((arg2 @ (any1::(Nil)))) = (any1::reverse (arg2))
End of Lemma List


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::reverse ((reverse (any_list2) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 19


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::reverse ((reverse (any_list2) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (arg2:any list), reverse ((arg2 @ (any1::(Nil)))) = (any1::reverse (arg2))(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 20


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), reverse (((Nil) @ (any1::(Nil)))) = (any1::reverse ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 21


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any), reverse (((Nil) @ (any1::(Nil)))) = (any1::reverse ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse (((any2::any_list2) @ (any1::(Nil)))) = (any1::reverse ((any2::any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 22


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse (((any2::any_list2) @ (any1::(Nil)))) = (any1::reverse ((any2::any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (reverse ((any_list2 @ (any1::(Nil)))) @ (any2::(Nil))) = (any1::(reverse (any_list2) @ (any2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any1(rank:7)
rewrite IH1 in goal at 0(rank:15)
=================================================
Progress: 23


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), (reverse ((any_list2 @ (any1::(Nil)))) @ (any2::(Nil))) = (any1::(reverse (any_list2) @ (any2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
(reverse ((any_list2 @ (any1::(Nil)))) @ (any2::(Nil))) = (any1::(reverse (any_list2) @ (any2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:7)
=================================================
Progress: 24


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
(reverse ((any_list2 @ (any1::(Nil)))) @ (any2::(Nil))) = (any1::(reverse (any_list2) @ (any2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
((any1::reverse (any_list2)) @ (any2::(Nil))) = (any1::(reverse (any_list2) @ (any2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 25


1st goal of : forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
((any1::reverse (any_list2)) @ (any2::(Nil))) = (any1::(reverse (any_list2) @ (any2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
forall (any1:any), reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::reverse ((reverse (any_list2) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 4
rewrite lemma3 in goal at 1(rank:13)
rewrite lemma3 in goal at 0(rank:21)
rewrite <- lemma3 in goal at 0(rank:13)
rewrite lemma3 in goal at 2(rank:21)
=================================================
Progress: 26


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
reverse (((reverse (any_list2) @ (any2::(Nil))) @ (any1::(Nil)))) = (any1::reverse ((reverse (any_list2) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 1(rank : 13)


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
(any1::reverse ((reverse (any_list2) @ (any2::(Nil))))) = (any1::reverse ((reverse (any_list2) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 27


1st goal of : forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : forall (any1:any), reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)
Inductive1 : any_list1 = (any2::any_list2)
any1 : any
---------------------------------------
(any1::reverse ((reverse (any_list2) @ (any2::(Nil))))) = (any1::reverse ((reverse (any_list2) @ (any2::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (reverse (any_list2)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 7
Tactic List : 5
rewrite lemma3 in goal at 0(rank:11)
rewrite <- lemma4 in goal at 0(rank:11)
rewrite <- lemma4 in goal at 1(rank:19)
rewrite <- lemma4 in goal at 2(rank:11)
rewrite lemma4 in goal at 0(rank:11)
=================================================
Progress: 28


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (reverse (any_list2)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 11)


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (reverse (any_list2)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::reverse (reverse (any_list2))) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- lemma4 in goal at 0(rank:19)
rewrite <- lemma4 in goal at 2(rank:19)
=================================================
Progress: 29


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (reverse (any_list2)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
reverse ((reverse (any_list2) @ (any1::(Nil)))) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 11)


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (reverse (any_list2)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 30


1st goal of : forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (reverse (any_list2)) = any_list2
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::any_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


No conjecture
Proof Success
Proof
assert forall (any_list1:any list), reverse (reverse (any_list1)) = any_list1
induction any_list1
reflexivity
simpl in goal
assert forall (any1:any) (any_list1:any list), reverse ((reverse (any_list1) @ (any1::(Nil)))) = (any1::any_list1)
induction any_list1
reflexivity
simpl in goal
intro any1
rewrite <- IH1 in goal at 0
assert forall (any1:any) (any_list1:any list), reverse ((any_list1 @ (any1::(Nil)))) = (any1::reverse (any_list1))
induction any_list1
reflexivity
simpl in goal
intro any1
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 1
reflexivity
rewrite lemma4 in goal at 0
reflexivity
Qed
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
