Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:int) (y:int list), count (x) (sort (y)) = count (x) (y)(rank : 0)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)

---------------------------------------
forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)

---------------------------------------
forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), count (int1) (sort ((Nil))) = count (int1) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), count (int1) (sort ((Nil))) = count (int1) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), count (int1) (sort ((int2::int_list2))) = count (int1) ((int2::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), count (int1) (sort ((int2::int_list2))) = count (int1) ((int2::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro int1(rank:3)
=================================================
Progress: 5


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> intro int1(rank : 3)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:4)
rewrite <- IH1 in goal at 2(rank:19)
rewrite <- IH1 in goal at 0(rank:19)
rewrite <- IH1 in goal at 1(rank:19)
=================================================
Progress: 6


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4)
=================================================
Progress: 7


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int1
case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (arg1)) = SUCC (count (int1) (arg1))
Model : arg1: (Nil), int1: 0, int2: 0
Model : arg1: (Nil), int1: 0, int2: 0
Model : arg1: (Nil), int1: 0, int2: -0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) (insort (0) ((Nil))) = SUCC (count (0) ((Nil)))
count (0) (insort (0) ((Nil))) = SUCC (count (0) ((Nil)))
count (0) (insort (-0) ((Nil))) = SUCC (count (0) ((Nil)))
Simplifying took 0.000323 seconds
Result : true
advanced_generalize done


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 8


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (arg1)) = SUCC (count (int1) (arg1))(rank : 0)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5)
=================================================
Progress: 9


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int2(rank:5)
=================================================
Progress: 10


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int2(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5)
=================================================
Progress: 11


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 12


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = SUCC (count (int1) ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 13


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = SUCC (count (int1) ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 14


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 15


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = SUCC (count (int1) ((any1::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 16


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = SUCC (count (int1) ((any1::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6)
rewrite <- IH1 in goal at 0(rank:13)
case any_eq (any1) (int1)(rank:6)
=================================================
Progress: 17


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (int1)(rank:7)
rewrite Cond1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 0(rank:22)
=================================================
Progress: 18


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 19


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 20


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 21


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6)
=================================================
Progress: 22


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (int1)(rank:7)
rewrite Cond1 in goal at 0(rank:14)
rewrite IH1 in goal at 0(rank:14)
=================================================
Progress: 23


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite IH1 in goal at 0(rank:23)
=================================================
Progress: 24


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 25


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 1
case any_eq (any1) (int1)(rank:6)
=================================================
Progress: 26


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 27


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
=================================================
Progress: 28


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite IH1 in goal at 0(rank:23)
=================================================
Progress: 29


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 30


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:7)
=================================================
Progress: 31


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 32


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))
Model : any1: 1, any_list2: (Nil), int1: -0, int2: 1
Model : any1: 2, any_list2: (Nil), int1: 0, int2: 0
Model : any1: 2, any_list2: (Nil), int1: 0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
if match (1, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((1::(Nil)))) else count (-0) ((1::(Nil))) = SUCC (if int_eq (1) (-0) then SUCC (count (-0) ((Nil))) else count (-0) ((Nil)))
if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((2::(Nil)))) else count (0) ((2::(Nil))) = SUCC (if int_eq (2) (0) then SUCC (count (0) ((Nil))) else count (0) ((Nil)))
if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((2::(Nil)))) else count (0) ((2::(Nil))) = SUCC (if int_eq (2) (0) then SUCC (count (0) ((Nil))) else count (0) ((Nil)))
Simplifying took 0.000574 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 33


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any1(rank:7)
=================================================
Progress: 34


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 35


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 36


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 37


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 38


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case any_eq (any1) (int1)(rank:8)
rewrite Cond1 in goal at 0(rank:15)
=================================================
Progress: 39


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:8)
=================================================
Progress: 40


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 41


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:8)
=================================================
Progress: 42


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (if true then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 43


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (if true then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Cond1 in goal at 0(rank:7)
=================================================
Progress: 44


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 45


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 46


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), SUCC (if false then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 47


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), SUCC (if false then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 2
case any_eq (any1) (int1)(rank:7)
rewrite Cond1 in goal at 0(rank:14)
=================================================
Progress: 48


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 49


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 50


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 2
rewrite IH1 in goal at 0(rank:13)
rewrite <- IH1 in goal at 0(rank:13)
=================================================
Progress: 51


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 52


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 12
Tactic List : 1
rewrite lemma3 in goal at 0(rank:5)
=================================================
Progress: 53


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 5)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (count (int1) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 54


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (count (int1) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:4)
=================================================
Progress: 55


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
true = true

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 56


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
true = true

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:11)
rewrite lemma3 in goal at 0(rank:12)
=================================================
Progress: 57


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:4)
=================================================
Progress: 58


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (sort (int_list2))) = count (int1) (sort (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
rewrite lemma3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg2:nat), SUCC (arg2) = arg2
Model : arg2: ZERO
Model : arg2: ZERO
Model : arg2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (ZERO) = ZERO
SUCC (ZERO) = ZERO
SUCC (ZERO) = ZERO
Simplifying took 0.000020 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (count (int1) (sort (int_list2))) = count (int1) (sort (int_list2))
Model : int1: -0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Model : int1: 1, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (-0) (sort ((Nil)))) = count (-0) (sort ((Nil)))
SUCC (count (-0) (sort ((Nil)))) = count (-0) (sort ((Nil)))
SUCC (count (1) (sort ((Nil)))) = count (1) (sort ((Nil)))
Simplifying took 0.000081 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 59


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 12)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (sort (int_list2))) = count (int1) (int_list2)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:4)
=================================================
Progress: 60


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (sort (int_list2))) = count (int1) (int_list2)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (int_list2)) = count (int1) (int_list2)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg3:nat), SUCC (arg3) = arg3
Model : arg3: ZERO
Model : arg3: SUCC (ZERO)
Model : arg3: SUCC (SUCC (ZERO))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (ZERO) = ZERO
SUCC (SUCC (ZERO)) = SUCC (ZERO)
SUCC (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Simplifying took 0.000028 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (count (int1) (int_list2)) = count (int1) (int_list2)
Model : int1: 0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (0) ((Nil))) = count (0) ((Nil))
SUCC (count (-0) ((Nil))) = count (-0) ((Nil))
SUCC (count (0) ((Nil))) = count (0) ((Nil))
Simplifying took 0.000055 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 61


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 19)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (sort (int_list2))) else count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:4)
=================================================
Progress: 62


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (sort (int_list2))) else count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:4)
=================================================
Progress: 63


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int1
rewrite <- IH1 in goal at 0
case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int2:int) (int_list2:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Model : int1: 0, int2: -0, int_list2: (Nil)
Model : int1: 0, int2: -0, int_list2: (Nil)
Model : int1: -0, int2: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) (insort (-0) (sort ((Nil)))) = SUCC (count (0) ((Nil)))
count (0) (insort (-0) (sort ((Nil)))) = SUCC (count (0) ((Nil)))
count (-0) (insort (0) (sort ((Nil)))) = SUCC (count (-0) ((Nil)))
Simplifying took 0.000726 seconds
Result : true
advanced_generalize done


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 64


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (int1:int) (int2:int) (int_list2:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))(rank : 0)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))

---------------------------------------
forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5)
=================================================
Progress: 65


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))

---------------------------------------
forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
---------------------------------------
forall (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int2(rank:5)
=================================================
Progress: 66


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
---------------------------------------
forall (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int2(rank : 5)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
---------------------------------------
forall (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5)
=================================================
Progress: 67


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
---------------------------------------
forall (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:6)
=================================================
Progress: 68


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 6)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) (sort ((Nil)))) = SUCC (count (int1) ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 69


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) (sort ((Nil)))) = SUCC (count (int1) ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 70


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 71


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (insort (int2) (sort ((int3::int_list2)))) = SUCC (count (int1) ((int3::int_list2)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 72


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (insort (int2) (sort ((int3::int_list2)))) = SUCC (count (int1) ((int3::int_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:6)
rewrite <- IH1 in goal at 0(rank:21)
=================================================
Progress: 73


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 6)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (SUCC (count (int1) (int_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:6)
=================================================
Progress: 74


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (SUCC (count (int1) (int_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 6)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (insort (int2) (sort (int_list2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg4:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (arg4))) = SUCC (count (int1) (insort (int2) (arg4)))
Model : arg4: (Nil), int1: 0, int2: -0, int3: 0
Model : arg4: (Nil), int1: 0, int2: 0, int3: -0
Model : arg4: (Nil), int1: 0, int2: 0, int3: -0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) (insort (-0) (insort (0) ((Nil)))) = SUCC (count (0) (insort (-0) ((Nil))))
count (0) (insort (0) (insort (-0) ((Nil)))) = SUCC (count (0) (insort (0) ((Nil))))
count (0) (insort (0) (insort (-0) ((Nil)))) = SUCC (count (0) (insort (0) ((Nil))))
Simplifying took 0.000553 seconds
Result : true
advanced_generalize done


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (insort (int2) (sort (int_list2))))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 75


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (insort (int2) (sort (int_list2))))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg4:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (arg4))) = SUCC (count (int1) (insort (int2) (arg4)))(rank : 0)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 76


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 77


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int3(rank:7)
=================================================
Progress: 78


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int3(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 79


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 80


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 81


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) (insort (int3) ((Nil)))) = SUCC (count (int1) (insort (int2) ((Nil))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 82


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) (insort (int3) ((Nil)))) = SUCC (count (int1) (insort (int2) ((Nil))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite Cond1 in goal at 0(rank:24)
=================================================
Progress: 83


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:25)
rewrite Cond1 in goal at 1(rank:25)
rewrite Cond1 in goal at 2(rank:25)
=================================================
Progress: 84


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 19)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (sort (int_list2))) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int1
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Lemma : forall (arg5:any list) (int1:int) (int2:int) (int_list2:int list), count (int1) (insort (int2) (arg5)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (arg5)) else count (int1) (int_list2)
Model : arg5: (Nil), int1: 0, int2: 0, int_list2: (Nil)
Model : arg5: (7::(Nil)), int1: -0, int2: 0, int_list2: (0::(0::(-0::(Nil))))
Model : arg5: (Nil), int1: -0, int2: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) (insort (0) ((Nil))) = if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((Nil))) else count (0) ((Nil))
count (-0) (insort (0) ((7::(Nil)))) = if match (0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((7::(Nil)))) else count (-0) ((0::(0::(-0::(Nil)))))
count (-0) (insort (0) ((Nil))) = if match (0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((Nil))) else count (-0) ((Nil))
Simplifying took 0.000590 seconds
Result : true
advanced_generalize done


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (sort (int_list2))) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 85


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (sort (int_list2))) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg5:any list) (int1:int) (int2:int) (int_list2:int list), count (int1) (insort (int2) (arg5)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (arg5)) else count (int1) (int_list2)(rank : 0)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5)
=================================================
Progress: 86


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int2(rank:5)
=================================================
Progress: 87


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro int2(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:6)
=================================================
Progress: 88


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:7)
=================================================
Progress: 89


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) ((Nil))) = SUCC (count (int1) ((Nil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 90


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) ((Nil))) = SUCC (count (int1) ((Nil)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int_list1(rank:7)
=================================================
Progress: 91


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> intro int_list1(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 92


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 93


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) ((any1::any_list2))) = SUCC (count (int1) ((any1::any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 94


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) ((any1::any_list2))) = SUCC (count (int1) ((any1::any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int_list1:int list), count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int_list1(rank:6)
=================================================
Progress: 95


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int_list1:int list), count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> intro int_list1(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
case any_eq (any1) (int1)(rank:7)
=================================================
Progress: 96


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case any_eq (any1) (int1)(rank:8)
rewrite Case1 in goal at 0(rank:15)
=================================================
Progress: 97


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
=================================================
Progress: 98


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:8)
=================================================
Progress: 99


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:8)
=================================================
Progress: 100


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 101


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 102


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:8)
=================================================
Progress: 103


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8)
=================================================
Progress: 104


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (if true then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 105


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (if true then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = false
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 106


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = false
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = false
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 107


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = false
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:7)
=================================================
Progress: 108


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (if false then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 109


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (if false then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
case any_eq (any1) (int1)(rank:7)
=================================================
Progress: 110


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int_list1
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case any_eq (any1) (int1)
rewrite Case1 in goal at 0
simpl in goal
rewrite Case3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
simpl in goal
rewrite Case3 in goal at 0
reflexivity
case any_eq (any1) (int1)
validate generalize_common_subterm_goal
Lemma : forall (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Model : any_list2: (8::(Nil)), int1: -0, int2: 0
Model : any_list2: (Nil), int1: 0, int2: 0
Model : any_list2: (0::(Nil)), int1: 0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (-0) (insort (0) ((8::(Nil)))) = SUCC (count (-0) ((8::(Nil))))
count (0) (insort (0) ((Nil))) = SUCC (count (0) ((Nil)))
count (0) (insort (0) ((0::(Nil)))) = SUCC (count (0) ((0::(Nil))))
Simplifying took 0.000558 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 111


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))(rank : 0)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 112


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 113


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 114


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 115


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 116


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:7)
=================================================
Progress: 117


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 118


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : any_eq (any1) (int1) = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int_list1
case any_eq (any1) (int1)
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Model : any_list2: (Nil), int1: 0, int2: 0
Model : any_list2: (Nil), int1: -0, int2: 0
Model : any_list2: (Nil), int1: 0, int2: -0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) (insort (0) ((Nil))) = SUCC (count (0) ((Nil)))
count (-0) (insort (0) ((Nil))) = SUCC (count (-0) ((Nil)))
count (0) (insort (-0) ((Nil))) = SUCC (count (0) ((Nil)))
Simplifying took 0.000181 seconds
Result : true
advanced_generalize done
=================================================
Progress: 119


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = SUCC (count (int1) ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 120


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = SUCC (count (int1) ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:8)
=================================================
Progress: 121


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 122


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = SUCC (count (int1) ((any1::any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 123


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = SUCC (count (int1) ((any1::any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
rewrite <- IH1 in goal at 0(rank:15)
case any_eq (any1) (int1)(rank:8)
=================================================
Progress: 124


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (int1)(rank:9)
rewrite Cond1 in goal at 0(rank:16)
rewrite <- IH1 in goal at 0(rank:24)
=================================================
Progress: 125


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite <- IH1 in goal at 0(rank:16)
=================================================
Progress: 126


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:17)
rewrite <- IH1 in goal at 0(rank:17)
=================================================
Progress: 127


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:17)
rewrite <- IH1 in goal at 0(rank:17)
=================================================
Progress: 128


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
=================================================
Progress: 129


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (int1)(rank:9)
rewrite Cond1 in goal at 0(rank:16)
rewrite IH1 in goal at 0(rank:16)
=================================================
Progress: 130


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:17)
rewrite IH1 in goal at 0(rank:25)
=================================================
Progress: 131


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 132


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 3
Tactic List : 1
case any_eq (any1) (int1)(rank:8)
=================================================
Progress: 133


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16)
rewrite <- IH1 in goal at 0(rank:16)
=================================================
Progress: 134


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
=================================================
Progress: 135


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:17)
rewrite IH1 in goal at 0(rank:25)
=================================================
Progress: 136


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 137


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:9)
=================================================
Progress: 138


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:17)
rewrite <- IH1 in goal at 0(rank:17)
=================================================
Progress: 139


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))
Model : any1: 5, any_list2: (Nil), int1: -0, int2: 0
Model : any1: 8, any_list2: (Nil), int1: 0, int2: 0
Model : any1: 1, any_list2: (Nil), int1: -0, int2: -0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
if match (0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((5::(Nil)))) else count (-0) ((5::(Nil))) = SUCC (if int_eq (5) (-0) then SUCC (count (-0) ((Nil))) else count (-0) ((Nil)))
if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((8::(Nil)))) else count (0) ((8::(Nil))) = SUCC (if int_eq (8) (0) then SUCC (count (0) ((Nil))) else count (0) ((Nil)))
if match (-0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((1::(Nil)))) else count (-0) ((1::(Nil))) = SUCC (if int_eq (1) (-0) then SUCC (count (-0) ((Nil))) else count (-0) ((Nil)))
Simplifying took 0.000536 seconds
Result : true
advanced_generalize done
=================================================
Progress: 140


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 141


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 2
rewrite IH1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 142


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 143


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 9
Tactic List : 1
rewrite lemma3 in goal at 0(rank:8)
=================================================
Progress: 144


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 145


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite <- Case3 in goal at 0(rank:15)
=================================================
Progress: 146


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = true
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 147


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = true
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite lemma3 in goal at 0(rank:7)
=================================================
Progress: 148


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 149


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = false
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:6)
=================================================
Progress: 150


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = false
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = false
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 151


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (int1) = false
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 3
induction any_list1(rank:14)
induction int_list1(rank:14)
rewrite lemma3 in goal at 0(rank:14)
=================================================
Progress: 152


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) ((Nil))) = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 153


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) ((Nil))) = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:6)
=================================================
Progress: 154


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), if false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 155


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), if false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), ZERO = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:7)
=================================================
Progress: 156


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), ZERO = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Base2 : int_list1 = (Nil)
---------------------------------------
ZERO = count (int1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 157


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Base2 : int_list1 = (Nil)
---------------------------------------
ZERO = count (int1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
ZERO = count (int1) ((int3::int_list2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 158


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
ZERO = count (int1) ((int3::int_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:7)
rewrite IH1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 1(rank:14)
rewrite <- IH1 in goal at 2(rank:14)
=================================================
Progress: 159


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
ZERO = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 160


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = count (int1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 161


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = count (int1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction any_list1(rank:15)
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 162


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (any_list1:any list) (int_list1:int list), SUCC (count (int1) (any_list1)) = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction any_list1(rank:15)
induction int_list1(rank:15)
=================================================
Progress: 163


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (int_list2) = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:7)
=================================================
Progress: 164


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (int_list2) = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (int_list2) = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:23)
rewrite <- IH1 in goal at 1(rank:23)
rewrite <- IH1 in goal at 2(rank:23)
=================================================
Progress: 165


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:7)
=================================================
Progress: 166


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:23)
rewrite IH1 in goal at 1(rank:23)
rewrite IH1 in goal at 2(rank:23)
=================================================
Progress: 167


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (int1) (int_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int3:int) (int_list2:int list), ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (int1) (int_list2)
Model : int1: 0, int3: 0, int_list2: (-1::(Nil))
Model : int1: 0, int3: 0, int_list2: (Nil)
Model : int1: -0, int3: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
ZERO = if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (0) ((-1::(Nil)))
ZERO = if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (0) ((Nil))
ZERO = if match (-0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (-0) ((Nil))
Simplifying took 0.000066 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 168


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int3:int) (int_list2:int list), ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else ZERO
Model : int1: 0, int3: 0, int_list2: (Nil)
Model : int1: -0, int3: 0, int_list2: (Nil)
Model : int1: -0, int3: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
ZERO = if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((Nil))) else ZERO
ZERO = if match (0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((Nil))) else ZERO
ZERO = if match (0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((Nil))) else ZERO
Simplifying took 0.000074 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 169


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
ZERO = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (int_list2) = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg6:nat), arg6 = SUCC (arg6)
Model : arg6: ZERO
Model : arg6: ZERO
Model : arg6: SUCC (SUCC (SUCC (ZERO)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
ZERO = SUCC (ZERO)
ZERO = SUCC (ZERO)
SUCC (SUCC (SUCC (ZERO))) = SUCC (SUCC (SUCC (SUCC (ZERO))))
Simplifying took 0.000027 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), count (int1) (int_list2) = SUCC (count (int1) (int_list2))
Model : int1: 0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Model : int1: -0, int_list2: (0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) ((Nil)) = SUCC (count (0) ((Nil)))
count (-0) ((Nil)) = SUCC (count (-0) ((Nil)))
count (-0) ((0::(Nil))) = SUCC (count (-0) ((0::(Nil))))
Simplifying took 0.000108 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 170


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
ZERO = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 0
advanced_generalize done
=================================================
Progress: 171


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 172


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 173


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
if false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 174


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
if false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 175


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 176


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 177


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 178


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:15)
rewrite IH1 in goal at 0(rank:23)
rewrite lemma3 in goal at 0(rank:24)
=================================================
Progress: 179


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), SUCC (count (int1) (any_list1)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 180


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), SUCC (count (int1) (any_list1)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
SUCC (count (int1) ((Nil))) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 181


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
SUCC (count (int1) ((Nil))) = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
advanced_generalize done
=================================================
Progress: 182


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (any_list1:any list) (int_list1:int list), SUCC (count (int1) (any_list1)) = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), SUCC (count (int1) ((Nil))) = count (int1) (int_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 183


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), SUCC (count (int1) ((Nil))) = count (int1) (int_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), SUCC (ZERO) = count (int1) (int_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:8)
=================================================
Progress: 184


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), SUCC (ZERO) = count (int1) (int_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Base2 : int_list1 = (Nil)
---------------------------------------
SUCC (ZERO) = count (int1) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 185


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Base2 : int_list1 = (Nil)
---------------------------------------
SUCC (ZERO) = count (int1) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Base2 : int_list1 = (Nil)
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
advanced_generalize done
=================================================
Progress: 186


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (any_list1:any list) (int_list1:int list), SUCC (count (int1) (any_list1)) = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), SUCC (count (int1) (any_list1)) = count (int1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 187


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), SUCC (count (int1) (any_list1)) = count (int1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), SUCC (count (int1) (any_list1)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 188


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), SUCC (count (int1) (any_list1)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
SUCC (count (int1) ((Nil))) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 189


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
SUCC (count (int1) ((Nil))) = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
advanced_generalize done
=================================================
Progress: 190


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 191


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case any_eq (any1) (int1)(rank:8)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 192


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:8)
=================================================
Progress: 193


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:9)
=================================================
Progress: 194


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 195


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case3 in goal at 0(rank:16)
=================================================
Progress: 196


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:8)
=================================================
Progress: 197


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:8)
=================================================
Progress: 198


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 199


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:9)
=================================================
Progress: 200


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 201


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (any_list2) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite <- IH1 in goal at 0
rewrite lemma3 in goal at 0
rewrite Case1 in goal at 0
simpl in goal
case any_eq (any1) (int1)
reflexivity
validate generalize_common_subterm_goal
Lemma : forall (arg7:nat), arg7 = SUCC (arg7)
Model : arg7: ZERO
Model : arg7: SUCC (ZERO)
Model : arg7: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
ZERO = SUCC (ZERO)
SUCC (ZERO) = SUCC (SUCC (ZERO))
SUCC (ZERO) = SUCC (SUCC (ZERO))
Simplifying took 0.000027 seconds
Result : false
Lemma : forall (any_list2:any list) (int1:int), count (int1) (any_list2) = SUCC (count (int1) (any_list2))
Model : any_list2: (Nil), int1: -0
Model : any_list2: (8::(Nil)), int1: 0
Model : any_list2: (4::(Nil)), int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (-0) ((Nil)) = SUCC (count (-0) ((Nil)))
count (0) ((8::(Nil))) = SUCC (count (0) ((8::(Nil))))
count (0) ((4::(Nil))) = SUCC (count (0) ((4::(Nil))))
Simplifying took 0.000374 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 202


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 203


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (int1)(rank:8)
rewrite IH1 in goal at 0(rank:23)
rewrite lemma3 in goal at 0(rank:24)
=================================================
Progress: 204


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite lemma3 in goal at 0(rank:17)
rewrite IH1 in goal at 0(rank:24)
=================================================
Progress: 205


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:8)
=================================================
Progress: 206


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite lemma3 in goal at 0(rank:17)
rewrite IH1 in goal at 0(rank:24)
=================================================
Progress: 207


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:8)
=================================================
Progress: 208


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = any_eq (any1) (int1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
case any_eq (any1) (int1)
rewrite <- IH1 in goal at 0
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)
Model : any1: 6, int1: 0
Model : any1: 3, int1: 0
Model : any1: 5, int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
false = int_eq (6) (0)
false = int_eq (3) (0)
false = int_eq (5) (0)
Simplifying took 0.000306 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = any_eq (any1) (int1)

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 209


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = any_eq (any1) (int1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)(rank : 0)


1st goal of : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)

---------------------------------------
forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any1(rank:7)
=================================================
Progress: 210


1st goal of : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)

---------------------------------------
forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)
any1 : any
---------------------------------------
forall (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 211


1st goal of : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)
any1 : any
---------------------------------------
forall (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)
any1 : any
int1 : int
---------------------------------------
any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 212


1st goal of : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)
any1 : any
int1 : int
---------------------------------------
any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)
any1 : any
int1 : int
Cond1 : any_eq (any1) (int1) = true
---------------------------------------
false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:7)
=================================================
Progress: 213


1st goal of : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)
any1 : any
int1 : int
Cond1 : any_eq (any1) (int1) = true
---------------------------------------
false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)
any1 : any
int1 : int
Cond1 : any_eq (any1) (int1) = true
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 214


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
case any_eq (any1) (int1)
rewrite <- IH1 in goal at 0
rewrite lemma3 in goal at 0
reflexivity
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
Model : any1: 4, int1: 0, int2: 0
Model : any1: 5, int1: 0, int2: -0
Model : any1: 2, int1: 0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = int_eq (4) (0)
match (-0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = int_eq (5) (0)
match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = int_eq (2) (0)
Simplifying took 0.000360 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 215


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)(rank : 0)


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

---------------------------------------
forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any1(rank:7)
=================================================
Progress: 216


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

---------------------------------------
forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
---------------------------------------
forall (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 217


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
---------------------------------------
forall (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
---------------------------------------
forall (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 218


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
---------------------------------------
forall (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 219


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 220


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7)
=================================================
Progress: 221


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7)


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Cond3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite Cond3 in goal at 0(rank:23)
=================================================
Progress: 222


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Cond3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Cond3 : any_eq (any1) (int1) = true
---------------------------------------
false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond3 in goal at 0(rank:7)
=================================================
Progress: 223


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Cond3 : any_eq (any1) (int1) = true
---------------------------------------
false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Cond3 : any_eq (any1) (int1) = true
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 224


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 225


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case3 in goal at 0(rank:16)
=================================================
Progress: 226


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:8)
=================================================
Progress: 227


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = any_eq (any1) (int1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
case any_eq (any1) (int1)
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)
Model : any1: 4, int1: -1
Model : any1: 0, int1: -0
Model : any1: 5, int1: -0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
false = int_eq (4) (-1)
false = int_eq (0) (-0)
false = int_eq (5) (-0)
Simplifying took 0.000268 seconds
Result : true
advanced_generalize done
=================================================
Progress: 228


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
case any_eq (any1) (int1)
rewrite lemma3 in goal at 0
reflexivity
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
Model : any1: 5, int1: 0, int2: 0
Model : any1: 7, int1: 0, int2: 0
Model : any1: 4, int1: -0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = int_eq (5) (0)
match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = int_eq (7) (0)
match (0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = int_eq (4) (-0)
Simplifying took 0.000422 seconds
Result : true
advanced_generalize done
=================================================
Progress: 229


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 230


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case3 in goal at 0(rank:16)
=================================================
Progress: 231


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:8)
=================================================
Progress: 232


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = any_eq (any1) (int1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
case any_eq (any1) (int1)
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)
Model : any1: 4, int1: 2
Model : any1: 5, int1: 0
Model : any1: 0, int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
false = int_eq (4) (2)
false = int_eq (5) (0)
false = int_eq (0) (0)
Simplifying took 0.000343 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 233


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
case any_eq (any1) (int1)
rewrite lemma3 in goal at 0
reflexivity
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
Model : any1: 8, int1: 0, int2: 0
Model : any1: 4, int1: 0, int2: 0
Model : any1: 4, int1: 0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = int_eq (8) (0)
match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = int_eq (4) (0)
match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = int_eq (4) (0)
Simplifying took 0.000417 seconds
Result : true
advanced_generalize done
=================================================
Progress: 234


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 19)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int1
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (arg8:any list) (int1:int) (int2:int) (int_list2:int list), count (int1) (insort (int2) (arg8)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (arg8)
Model : arg8: (Nil), int1: -0, int2: -0, int_list2: (Nil)
Model : arg8: (Nil), int1: -0, int2: -0, int_list2: (Nil)
Model : arg8: (Nil), int1: -0, int2: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (-0) (insort (-0) ((Nil))) = if match (-0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((Nil))) else count (-0) ((Nil))
count (-0) (insort (-0) ((Nil))) = if match (-0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((Nil))) else count (-0) ((Nil))
count (-0) (insort (0) ((Nil))) = if match (0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((Nil))) else count (-0) ((Nil))
Simplifying took 0.000231 seconds
Result : true
advanced_generalize done


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 235


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg8:any list) (int1:int) (int2:int) (int_list2:int list), count (int1) (insort (int2) (arg8)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (arg8)(rank : 0)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5)
=================================================
Progress: 236


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int2(rank:5)
=================================================
Progress: 237


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro int2(rank : 5)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:6)
=================================================
Progress: 238


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 6)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (int_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction any_list1(rank:15)
induction int_list1(rank:15)
=================================================
Progress: 239


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (int_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) ((Nil))) = SUCC (count (int1) (int_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 240


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) ((Nil))) = SUCC (count (int1) (int_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (count (int1) (int_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 241


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (count (int1) (int_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (count (int1) (int_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 242


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (count (int1) (int_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), SUCC (ZERO) = SUCC (count (int1) (int_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:8)
=================================================
Progress: 243


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), SUCC (ZERO) = SUCC (count (int1) (int_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Base2 : int_list1 = (Nil)
---------------------------------------
SUCC (ZERO) = SUCC (count (int1) ((Nil)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 244


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Base2 : int_list1 = (Nil)
---------------------------------------
SUCC (ZERO) = SUCC (count (int1) ((Nil)))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
SUCC (ZERO) = SUCC (count (int1) ((int3::int_list2)))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 245


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
SUCC (ZERO) = SUCC (count (int1) ((int3::int_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
SUCC (ZERO) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:8)
rewrite IH1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 246


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
SUCC (ZERO) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (ZERO) = SUCC (SUCC (count (int1) (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16)
rewrite <- IH1 in goal at 0(rank:16)
=================================================
Progress: 247


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (int_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) ((Nil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 248


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) ((Nil)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 249


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 250


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:8)
=================================================
Progress: 251


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 252


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 253


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 254


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- IH1 in goal at 0(rank:16)
=================================================
Progress: 255


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
SUCC (ZERO) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
SUCC (count (int1) (int_list2)) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:8)
=================================================
Progress: 256


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
SUCC (count (int1) (int_list2)) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (count (int1) (int_list2)) = SUCC (SUCC (count (int1) (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:24)
rewrite <- IH1 in goal at 1(rank:24)
rewrite <- IH1 in goal at 2(rank:24)
=================================================
Progress: 257


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
SUCC (ZERO) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
SUCC (ZERO) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int3:int) (int_list2:int list), ZERO = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (int1) (int_list2)
Model : int1: -0, int3: -0, int_list2: (Nil)
Model : int1: -0, int3: 0, int_list2: (Nil)
Model : int1: 0, int3: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
ZERO = if match (-0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (-0) ((Nil))
ZERO = if match (0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (-0) ((Nil))
ZERO = if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (0) ((Nil))
Simplifying took 0.000085 seconds
Result : false
Lemma : forall (int1:int) (int3:int) (int_list2:int list), SUCC (ZERO) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (int1) (int_list2))
Model : int1: 0, int3: -0, int_list2: (-0::(Nil))
Model : int1: 0, int3: -0, int_list2: (Nil)
Model : int1: -0, int3: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (ZERO) = SUCC (if match (-0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (0) ((-0::(Nil))))
SUCC (ZERO) = SUCC (if match (-0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (0) ((Nil)))
SUCC (ZERO) = SUCC (if match (-0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (ZERO) else count (-0) ((Nil)))
Simplifying took 0.000105 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 258


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
=================================================
Progress: 259


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite IH1 in goal at 0(rank:24)
=================================================
Progress: 260


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (ZERO) = SUCC (SUCC (count (int1) (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (count (int1) (int_list2)) = SUCC (SUCC (count (int1) (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg9:nat), arg9 = SUCC (arg9)
Model : arg9: SUCC (ZERO)
Model : arg9: ZERO
Model : arg9: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (ZERO) = SUCC (SUCC (ZERO))
ZERO = SUCC (ZERO)
ZERO = SUCC (ZERO)
Simplifying took 0.000023 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), count (int1) (int_list2) = SUCC (count (int1) (int_list2))
Model : int1: 0, int_list2: (-0::(Nil))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) ((-0::(Nil))) = SUCC (count (0) ((-0::(Nil))))
count (0) ((Nil)) = SUCC (count (0) ((Nil)))
count (0) ((Nil)) = SUCC (count (0) ((Nil)))
Simplifying took 0.000121 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (count (int1) (int_list2)) = SUCC (SUCC (count (int1) (int_list2)))
Model : int1: 0, int_list2: (0::(0::(Nil)))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (0) ((0::(0::(Nil))))) = SUCC (SUCC (count (0) ((0::(0::(Nil))))))
SUCC (count (0) ((Nil))) = SUCC (SUCC (count (0) ((Nil))))
SUCC (count (0) ((Nil))) = SUCC (SUCC (count (0) ((Nil))))
Simplifying took 0.000134 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 261


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (ZERO) = SUCC (SUCC (count (int1) (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (ZERO) = SUCC (SUCC (ZERO))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 0
advanced_generalize done
=================================================
Progress: 262


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 263


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case any_eq (any1) (int1)(rank:9)
rewrite <- IH1 in goal at 0(rank:16)
=================================================
Progress: 264


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (ZERO)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:9)
=================================================
Progress: 265


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (ZERO)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = count (int1) (insort (int2) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
case any_eq (any1) (int1)
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (SUCC (count (int1) (any_list2))) = count (int1) (insort (int2) (any_list2))
Model : any_list2: (Nil), int1: 0, int2: 0
Model : any_list2: (4::(7::(Nil))), int1: 0, int2: 0
Model : any_list2: (Nil), int1: -0, int2: -1
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (0) ((Nil)))) = count (0) (insort (0) ((Nil)))
SUCC (SUCC (count (0) ((4::(7::(Nil)))))) = count (0) (insort (0) ((4::(7::(Nil)))))
SUCC (SUCC (count (-0) ((Nil)))) = count (-0) (insort (-1) ((Nil)))
Simplifying took 0.000736 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 266


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))
Model : any1: 8, any_list2: (Nil), int1: -0, int2: -0
Model : any1: 7, any_list2: (Nil), int1: -0, int2: 0
Model : any1: 5, any_list2: (Nil), int1: 0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
if match (-0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((8::(Nil)))) else count (-0) ((8::(Nil))) = count (-0) (insort (-0) ((Nil)))
if match (0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((7::(Nil)))) else count (-0) ((7::(Nil))) = count (-0) (insort (0) ((Nil)))
if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((5::(Nil)))) else count (0) ((5::(Nil))) = count (0) (insort (0) ((Nil)))
Simplifying took 0.000486 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 267


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any1(rank:7)
=================================================
Progress: 268


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 269


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 270


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 271


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 272


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:7)
=================================================
Progress: 273


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
forall (any_list1:any list), if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 274


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
forall (any_list1:any list), if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
forall (any_list1:any list), SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:8)
=================================================
Progress: 275


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
forall (any_list1:any list), SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = count (int1) (insort (int2) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (SUCC (count (int1) (any_list1))) = count (int1) (insort (int2) (any_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:9)
=================================================
Progress: 276


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (SUCC (count (int1) (any_list1))) = count (int1) (insort (int2) (any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (count (int1) ((Nil)))) = count (int1) (insort (int2) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 277


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (count (int1) ((Nil)))) = count (int1) (insort (int2) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (ZERO)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 278


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (ZERO)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (ZERO)) = if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 279


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (ZERO)) = if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = count (int1) (insort (int2) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (ZERO)) = SUCC (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
advanced_generalize done
=================================================
Progress: 280


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 281


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case any_eq (any1) (int1)(rank:9)
rewrite IH1 in goal at 0(rank:24)
=================================================
Progress: 282


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = count (int1) (insort (int2) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:9)
=================================================
Progress: 283


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = count (int1) (insort (int2) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (ZERO)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any_list2:any list) (int1:int), SUCC (count (int1) (any_list2)) = ZERO
Model : any_list2: (Nil), int1: 0
Model : any_list2: (Nil), int1: -0
Model : any_list2: (7::(Nil)), int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (0) ((Nil))) = ZERO
SUCC (count (-0) ((Nil))) = ZERO
SUCC (count (0) ((7::(Nil)))) = ZERO
Simplifying took 0.000127 seconds
Result : false
Lemma : forall (any_list2:any list) (int1:int), SUCC (SUCC (count (int1) (any_list2))) = SUCC (ZERO)
Model : any_list2: (Nil), int1: -0
Model : any_list2: (Nil), int1: 0
Model : any_list2: (Nil), int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (-0) ((Nil)))) = SUCC (ZERO)
SUCC (SUCC (count (0) ((Nil)))) = SUCC (ZERO)
SUCC (SUCC (count (0) ((Nil)))) = SUCC (ZERO)
Simplifying took 0.000041 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 284


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:9)
=================================================
Progress: 285


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = count (int1) (insort (int2) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:9)
=================================================
Progress: 286


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = count (int1) (insort (int2) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (ZERO)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any_list2:any list) (int1:int), SUCC (count (int1) (any_list2)) = ZERO
Model : any_list2: (Nil), int1: -0
Model : any_list2: (Nil), int1: 0
Model : any_list2: (Nil), int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (-0) ((Nil))) = ZERO
SUCC (count (0) ((Nil))) = ZERO
SUCC (count (0) ((Nil))) = ZERO
Simplifying took 0.000041 seconds
Result : false
Lemma : forall (any_list2:any list) (int1:int), SUCC (SUCC (count (int1) (any_list2))) = SUCC (ZERO)
Model : any_list2: (Nil), int1: 0
Model : any_list2: (4::(Nil)), int1: 0
Model : any_list2: (Nil), int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (0) ((Nil)))) = SUCC (ZERO)
SUCC (SUCC (count (0) ((4::(Nil))))) = SUCC (ZERO)
SUCC (SUCC (count (0) ((Nil)))) = SUCC (ZERO)
Simplifying took 0.000142 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 287


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 21)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (sort (int_list2))) else count (int1) (int_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg10:any list) (int1:int) (int2:int) (int3:int) (int_list2:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (arg10))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (arg10)) else count (int1) (int_list2))
Model : arg10: (Nil), int1: 0, int2: 0, int3: -0, int_list2: (Nil)
Model : arg10: (Nil), int1: -0, int2: 0, int3: 0, int_list2: (0::(Nil))
Model : arg10: (Nil), int1: 0, int2: 0, int3: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) (insort (0) (insort (-0) ((Nil)))) = SUCC (if match (-0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (0) (insort (0) ((Nil))) else count (0) ((Nil)))
count (-0) (insort (0) (insort (0) ((Nil)))) = SUCC (if match (0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (-0) (insort (0) ((Nil))) else count (-0) ((0::(Nil))))
count (0) (insort (0) (insort (-0) ((Nil)))) = SUCC (if match (-0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (0) (insort (0) ((Nil))) else count (0) ((Nil)))
Simplifying took 0.000584 seconds
Result : true
advanced_generalize done


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (sort (int_list2))) else count (int1) (int_list2))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 288


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (sort (int_list2))) else count (int1) (int_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg10:any list) (int1:int) (int2:int) (int3:int) (int_list2:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (arg10))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (arg10)) else count (int1) (int_list2))(rank : 0)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 289


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 290


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int3(rank:7)
=================================================
Progress: 291


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int3(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
---------------------------------------
forall (any_list1:any list) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 292


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
---------------------------------------
forall (any_list1:any list) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:8)
=================================================
Progress: 293


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:9)
=================================================
Progress: 294


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list) (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) ((Nil)))) = SUCC (count (int1) (insort (int2) ((Nil))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 295


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) ((Nil)))) = SUCC (count (int1) (insort (int2) ((Nil))))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int_list1(rank:9)
=================================================
Progress: 296


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int_list1:int list), count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> intro int_list1(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite Cond1 in goal at 0(rank:25)
=================================================
Progress: 297


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:26)
rewrite Cond1 in goal at 1(rank:26)
rewrite Cond1 in goal at 2(rank:26)
=================================================
Progress: 298


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (int_list2) = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 23)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 0
advanced_generalize done
=================================================
Progress: 299


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (int_list2) = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 23)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
ZERO = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int_list2:int list), ZERO = SUCC (count (int1) (int_list2))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
ZERO = SUCC (count (0) ((Nil)))
ZERO = SUCC (count (0) ((Nil)))
ZERO = SUCC (count (0) ((Nil)))
Simplifying took 0.000038 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 300


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (int_list2) = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 23)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (int_list2) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int_list2:int list), count (int1) (int_list2) = SUCC (ZERO)
Model : int1: 0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) ((Nil)) = SUCC (ZERO)
count (-0) ((Nil)) = SUCC (ZERO)
count (-0) ((Nil)) = SUCC (ZERO)
Simplifying took 0.000037 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 301


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (int_list2) = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg11:nat), arg11 = SUCC (arg11)
Model : arg11: SUCC (ZERO)
Model : arg11: ZERO
Model : arg11: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (ZERO) = SUCC (SUCC (ZERO))
ZERO = SUCC (ZERO)
ZERO = SUCC (ZERO)
Simplifying took 0.000021 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), count (int1) (int_list2) = SUCC (count (int1) (int_list2))
Model : int1: -0, int_list2: (Nil)
Model : int1: -0, int_list2: (-0::(Nil))
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (-0) ((Nil)) = SUCC (count (-0) ((Nil)))
count (-0) ((-0::(Nil))) = SUCC (count (-0) ((-0::(Nil))))
count (0) ((Nil)) = SUCC (count (0) ((Nil)))
Simplifying took 0.000124 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 302


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 23)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (int_list2) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int_list2:int list), count (int1) (int_list2) = SUCC (ZERO)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) ((Nil)) = SUCC (ZERO)
count (0) ((Nil)) = SUCC (ZERO)
count (-0) ((Nil)) = SUCC (ZERO)
Simplifying took 0.000039 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 303


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 23)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : ZERO = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
ZERO = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int_list2:int list), ZERO = SUCC (count (int1) (int_list2))
Model : int1: -0, int_list2: (0::(Nil))
Model : int1: 0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
ZERO = SUCC (count (-0) ((0::(Nil))))
ZERO = SUCC (count (0) ((Nil)))
ZERO = SUCC (count (-0) ((Nil)))
Simplifying took 0.000068 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 304


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
=================================================
Progress: 305


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:8)
=================================================
Progress: 306


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 307


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:9)
=================================================
Progress: 308


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 309


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (any_list2) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite lemma3 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
case any_eq (any1) (int1)
reflexivity
validate generalize_common_subterm_goal
Lemma : forall (arg12:nat), arg12 = SUCC (arg12)
Model : arg12: ZERO
Model : arg12: ZERO
Model : arg12: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
ZERO = SUCC (ZERO)
ZERO = SUCC (ZERO)
SUCC (ZERO) = SUCC (SUCC (ZERO))
Simplifying took 0.000022 seconds
Result : false
Lemma : forall (any_list2:any list) (int1:int), count (int1) (any_list2) = SUCC (count (int1) (any_list2))
Model : any_list2: (Nil), int1: 0
Model : any_list2: (Nil), int1: 0
Model : any_list2: (Nil), int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) ((Nil)) = SUCC (count (0) ((Nil)))
count (0) ((Nil)) = SUCC (count (0) ((Nil)))
count (0) ((Nil)) = SUCC (count (0) ((Nil)))
Simplifying took 0.000052 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 310


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = ZERO
Model : any1: 5, any_list2: (Nil), int1: 0, int2: -0
Model : any1: 5, any_list2: (Nil), int1: 0, int2: 0
Model : any1: 1, any_list2: (8::(0::(Nil))), int1: 0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
if match (-0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((5::(Nil)))) else count (0) ((5::(Nil))) = ZERO
if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((5::(Nil)))) else count (0) ((5::(Nil))) = ZERO
if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((1::(8::(0::(Nil)))))) else count (0) ((1::(8::(0::(Nil))))) = ZERO
Simplifying took 0.000587 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 311


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = ZERO(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

---------------------------------------
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any1(rank:7)
=================================================
Progress: 312


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

---------------------------------------
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any_list1(rank:7)
=================================================
Progress: 313


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
---------------------------------------
forall (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 314


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
---------------------------------------
forall (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
---------------------------------------
forall (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 315


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
---------------------------------------
forall (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
int2 : int
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 316


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
int2 : int
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 317


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:7)
=================================================
Progress: 318


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 319


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:8)
=================================================
Progress: 320


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = ZERO
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list1)) = ZERO

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (int1:int), SUCC (count (int1) (any_list1)) = ZERO
Model : any_list1: (Nil), int1: 0
Model : any_list1: (Nil), int1: -0
Model : any_list1: (Nil), int1: -0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (0) ((Nil))) = ZERO
SUCC (count (-0) ((Nil))) = ZERO
SUCC (count (-0) ((Nil))) = ZERO
Simplifying took 0.000045 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 321


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:8)
=================================================
Progress: 322


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:8)
=================================================
Progress: 323


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:9)
=================================================
Progress: 324


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 325


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case3 in goal at 0(rank:16)
=================================================
Progress: 326


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:8)
=================================================
Progress: 327


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
false = any_eq (any1) (int1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
case any_eq (any1) (int1)
rewrite <- IH1 in goal at 0
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (int1:int), any_eq (any1) (int1) = true -> false = any_eq (any1) (int1)
Model : any1: 5, int1: 0
Model : any1: 6, int1: -0
Model : any1: 0, int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
false = int_eq (5) (0)
false = int_eq (6) (-0)
false = int_eq (0) (0)
Simplifying took 0.000179 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 328


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
case any_eq (any1) (int1)
rewrite <- IH1 in goal at 0
rewrite lemma3 in goal at 0
reflexivity
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
Model : any1: 7, int1: 0, int2: 0
Model : any1: 7, int1: 0, int2: 0
Model : any1: 0, int1: 0, int2: -0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = int_eq (7) (0)
match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = int_eq (7) (0)
match (-0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = int_eq (0) (0)
Simplifying took 0.000356 seconds
Result : true
advanced_generalize done
=================================================
Progress: 329


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Cond3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 23)


1st goal of : forall (any1:any) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->any_eq (any1) (int1) = true -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = any_eq (any1) (int1)
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Cond3 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Model : int1: -0, int2: 0
Model : int1: 0, int2: -0
Model : int1: 0, int2: -0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
match (0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
match (-0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
match (-0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Simplifying took 0.000098 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 330


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 24)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 331


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
Model : int1: -0, int2: -0, int3: -0
Model : int1: 0, int2: 0, int3: 0
Model : int1: 0, int2: -0, int3: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (-0) (if match (-0, -0) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (-0::(-0::(Nil))) else (-0::insort (-0) ((Nil)))) = SUCC (SUCC (ZERO))
count (0) (if match (0, 0) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (0::(0::(Nil))) else (0::insort (0) ((Nil)))) = SUCC (SUCC (ZERO))
count (0) (if match (-0, 0) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (-0::(0::(Nil))) else (0::insort (-0) ((Nil)))) = SUCC (SUCC (ZERO))
Simplifying took 0.000450 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 332


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))(rank : 0)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

---------------------------------------
forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int1(rank:9)
=================================================
Progress: 333


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

---------------------------------------
forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int1(rank : 9)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
---------------------------------------
forall (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int2(rank:9)
=================================================
Progress: 334


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
---------------------------------------
forall (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int2(rank : 9)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
---------------------------------------
forall (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int3(rank:9)
=================================================
Progress: 335


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
---------------------------------------
forall (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int3(rank : 9)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 336


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9)
=================================================
Progress: 337


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
=================================================
Progress: 338


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 339


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 340


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:10)
=================================================
Progress: 341


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 10)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 342


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int2::(Nil)))) else count (int1) ((int2::(Nil))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Cond2 in goal at 0(rank:9)
=================================================
Progress: 343


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int2::(Nil)))) else count (int1) ((int2::(Nil))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 9)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) ((int2::(Nil)))) else count (int1) ((int2::(Nil))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 344


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) ((int2::(Nil)))) else count (int1) ((int2::(Nil))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 345


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 346


1st goal of : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
=================================================
Progress: 347


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 348


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 349


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:9)
=================================================
Progress: 350


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 351


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int2::(Nil)))) else count (int1) ((int2::(Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Cond2 in goal at 0(rank:8)
=================================================
Progress: 352


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int2::(Nil)))) else count (int1) ((int2::(Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) ((int2::(Nil)))) else count (int1) ((int2::(Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 353


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) ((int2::(Nil)))) else count (int1) ((int2::(Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:8)
=================================================
Progress: 354


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 355


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
Case1 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) (insort (int3) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) ((any1::any_list2))))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 3
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 356


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) (insort (int3) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) ((any1::any_list2))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
=================================================
Progress: 357


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

0 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite Cond1 in goal at 0(rank:24)
=================================================
Progress: 358


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

0 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
=================================================
Progress: 359


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite Cond1 in goal at 0(rank:25)
=================================================
Progress: 360


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite Cond1 in goal at 0(rank:25)
=================================================
Progress: 361


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite Cond1 in goal at 0(rank:25)
=================================================
Progress: 362


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:26)
rewrite Cond1 in goal at 1(rank:26)
rewrite Cond1 in goal at 2(rank:26)
=================================================
Progress: 363


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:26)
rewrite Cond1 in goal at 1(rank:26)
rewrite Cond1 in goal at 2(rank:26)
=================================================
Progress: 364


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:26)
rewrite Cond1 in goal at 1(rank:26)
rewrite Cond1 in goal at 2(rank:26)
=================================================
Progress: 365


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 24)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite lemma3 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))
Model : any1: 4, any_list2: (Nil), int1: -0, int2: -0
Model : any1: 3, any_list2: (0::(6::(Nil))), int1: 0, int2: 0
Model : any1: 1, any_list2: (Nil), int1: 0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
if match (-0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((4::(Nil)))) else count (-0) ((4::(Nil))) = SUCC (count (-0) ((Nil)))
if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((3::(0::(6::(Nil)))))) else count (0) ((3::(0::(6::(Nil))))) = SUCC (count (0) ((0::(6::(Nil)))))
if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((1::(Nil)))) else count (0) ((1::(Nil))) = SUCC (count (0) ((Nil)))
Simplifying took 0.000556 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 366


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = count (int1) (insort (int2) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 24)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:9)
=================================================
Progress: 367


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 368


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (any_list2) = SUCC (count (int1) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
rewrite lemma3 in goal at 0
case any_eq (any1) (int1)
reflexivity
validate generalize_common_subterm_goal
Lemma : forall (arg13:nat), arg13 = SUCC (arg13)
Model : arg13: ZERO
Model : arg13: ZERO
Model : arg13: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
ZERO = SUCC (ZERO)
ZERO = SUCC (ZERO)
ZERO = SUCC (ZERO)
Simplifying took 0.000019 seconds
Result : false
Lemma : forall (any_list2:any list) (int1:int), count (int1) (any_list2) = SUCC (count (int1) (any_list2))
Model : any_list2: (Nil), int1: 0
Model : any_list2: (Nil), int1: -0
Model : any_list2: (Nil), int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) ((Nil)) = SUCC (count (0) ((Nil)))
count (-0) ((Nil)) = SUCC (count (-0) ((Nil)))
count (0) ((Nil)) = SUCC (count (0) ((Nil)))
Simplifying took 0.000050 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 369


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 24)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any_list2:any list) (int1:int), SUCC (count (int1) (any_list2)) = ZERO
Model : any_list2: (4::(1::(Nil))), int1: -0
Model : any_list2: (Nil), int1: 0
Model : any_list2: (Nil), int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (-0) ((4::(1::(Nil))))) = ZERO
SUCC (count (0) ((Nil))) = ZERO
SUCC (count (0) ((Nil))) = ZERO
Simplifying took 0.000153 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 370


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 24)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (any_list1)) else count (int1) (int_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = ZERO
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any_list2:any list) (int1:int), SUCC (count (int1) (any_list2)) = ZERO
Model : any_list2: (Nil), int1: 0
Model : any_list2: (6::(Nil)), int1: -0
Model : any_list2: (Nil), int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (0) ((Nil))) = ZERO
SUCC (count (-0) ((6::(Nil)))) = ZERO
SUCC (count (0) ((Nil))) = ZERO
Simplifying took 0.000101 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 371


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (count (int1) (int_list2)) = SUCC (SUCC (count (int1) (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (ZERO) = SUCC (SUCC (ZERO))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 0
advanced_generalize done
=================================================
Progress: 372


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (count (int1) (int_list2)) = SUCC (SUCC (count (int1) (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 24)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (ZERO) = SUCC (SUCC (count (int1) (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int_list2:int list), ZERO = SUCC (count (int1) (int_list2))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (0::(Nil))
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
ZERO = SUCC (count (0) ((Nil)))
ZERO = SUCC (count (0) ((0::(Nil))))
ZERO = SUCC (count (0) ((Nil)))
Simplifying took 0.000078 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (ZERO) = SUCC (SUCC (count (int1) (int_list2)))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (ZERO) = SUCC (SUCC (count (0) ((Nil))))
SUCC (ZERO) = SUCC (SUCC (count (0) ((Nil))))
SUCC (ZERO) = SUCC (SUCC (count (-0) ((Nil))))
Simplifying took 0.000063 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 373


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (count (int1) (int_list2)) = SUCC (SUCC (count (int1) (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 24)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : SUCC (ZERO) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (count (int1) (int_list2)) = SUCC (SUCC (ZERO))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int_list2:int list), count (int1) (int_list2) = SUCC (ZERO)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) ((Nil)) = SUCC (ZERO)
count (0) ((Nil)) = SUCC (ZERO)
count (0) ((Nil)) = SUCC (ZERO)
Simplifying took 0.000038 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (count (int1) (int_list2)) = SUCC (SUCC (ZERO))
Model : int1: -0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (-0) ((Nil))) = SUCC (SUCC (ZERO))
SUCC (count (0) ((Nil))) = SUCC (SUCC (ZERO))
SUCC (count (0) ((Nil))) = SUCC (SUCC (ZERO))
Simplifying took 0.000043 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 374


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 24)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (ZERO)
Model : any1: 5, any_list2: (Nil), int1: 0, int2: 0
Model : any1: 1, any_list2: (Nil), int1: 0, int2: -0
Model : any1: 5, any_list2: (Nil), int1: 0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((5::(Nil)))) else count (0) ((5::(Nil))) = SUCC (ZERO)
if match (-0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((1::(Nil)))) else count (0) ((1::(Nil))) = SUCC (ZERO)
if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((5::(Nil)))) else count (0) ((5::(Nil))) = SUCC (ZERO)
Simplifying took 0.000401 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 375


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (ZERO)(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

---------------------------------------
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any1(rank:7)
=================================================
Progress: 376


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

---------------------------------------
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any_list1(rank:7)
=================================================
Progress: 377


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
---------------------------------------
forall (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 378


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
---------------------------------------
forall (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
---------------------------------------
forall (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 379


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
---------------------------------------
forall (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
int2 : int
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 380


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
int2 : int
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 381


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:7)
=================================================
Progress: 382


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 383


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:8)
=================================================
Progress: 384


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (ZERO)

0 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (ZERO)
any1 : any
any_list1 : any list
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list1))) = SUCC (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (int1:int), SUCC (count (int1) (any_list1)) = ZERO
Model : any_list1: (Nil), int1: -0
Model : any_list1: (Nil), int1: 0
Model : any_list1: (7::(Nil)), int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (-0) ((Nil))) = ZERO
SUCC (count (0) ((Nil))) = ZERO
SUCC (count (0) ((7::(Nil)))) = ZERO
Simplifying took 0.000134 seconds
Result : false
Lemma : forall (any_list1:any list) (int1:int), SUCC (SUCC (count (int1) (any_list1))) = SUCC (ZERO)
Model : any_list1: (Nil), int1: 0
Model : any_list1: (7::(Nil)), int1: 0
Model : any_list1: (Nil), int1: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (0) ((Nil)))) = SUCC (ZERO)
SUCC (SUCC (count (0) ((7::(Nil))))) = SUCC (ZERO)
SUCC (SUCC (count (0) ((Nil)))) = SUCC (ZERO)
Simplifying took 0.000137 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 385


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = count (int1) (insort (int2) (any_list2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 24)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:9)
=================================================
Progress: 386


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (ZERO)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:9)
=================================================
Progress: 387


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (ZERO)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int_list1:int list), count (int1) (insort (int2) (any_list1)) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list1)) else count (int1) (any_list1)
int1 : int
int2 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
Base1 : int_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (ZERO)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = count (int1) (insort (int2) (any_list2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Case1 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
case any_eq (any1) (int1)
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (SUCC (count (int1) (any_list2))) = count (int1) (insort (int2) (any_list2))
Model : any_list2: (Nil), int1: 0, int2: 0
Model : any_list2: (Nil), int1: -0, int2: 0
Model : any_list2: (7::(3::(Nil))), int1: -0, int2: -0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (0) ((Nil)))) = count (0) (insort (0) ((Nil)))
SUCC (SUCC (count (-0) ((Nil)))) = count (-0) (insort (0) ((Nil)))
SUCC (SUCC (count (-0) ((7::(3::(Nil)))))) = count (-0) (insort (-0) ((7::(3::(Nil)))))
Simplifying took 0.000657 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 388


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 24)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 389


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:9)
=================================================
Progress: 390


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
=================================================
Progress: 391


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:11)
=================================================
Progress: 392


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11)
=================================================
Progress: 393


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 394


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 395


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 396


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11)
=================================================
Progress: 397


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if true then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10)
=================================================
Progress: 398


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if true then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 4
rewrite Case1 in goal at 0(rank:18)
rewrite Case1 in goal at 1(rank:18)
rewrite Case1 in goal at 2(rank:18)
rewrite Cond2 in goal at 0(rank:18)
=================================================
Progress: 399


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond2 in goal at 0(rank:18)
rewrite <- Case2 in goal at 0(rank:26)
rewrite <- Case2 in goal at 1(rank:26)
rewrite <- Case2 in goal at 2(rank:26)
=================================================
Progress: 400


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 18)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:18)
rewrite <- Case2 in goal at 0(rank:26)
=================================================
Progress: 401


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 18)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:18)
rewrite <- Case2 in goal at 0(rank:26)
=================================================
Progress: 402


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 18)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 403


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:10)
=================================================
Progress: 404


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 405


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 406


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 407


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:10)
=================================================
Progress: 408


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (if true then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 409


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (if true then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::insort (int3) (any_list2))) else (any1::insort (int2) (insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 8
Tactic List : 1
rewrite Case1 in goal at 0(rank:9)
=================================================
Progress: 410


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::insort (int3) (any_list2))) else (any1::insort (int2) (insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (if true then (int2::(any1::insort (int3) (any_list2))) else (any1::insort (int2) (insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 411


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (if true then (int2::(any1::insort (int3) (any_list2))) else (any1::insort (int2) (insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::insort (int3) (any_list2)))) else count (int1) ((any1::insort (int3) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 412


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::insort (int3) (any_list2)))) else count (int1) ((any1::insort (int3) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) ((any1::insort (int3) (any_list2)))) else count (int1) ((any1::insort (int3) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 413


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) ((any1::insort (int3) (any_list2)))) else count (int1) ((any1::insort (int3) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:9)
=================================================
Progress: 414


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 415


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (count (int1) (insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
reflexivity
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
case any_eq (any1) (int1)
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case1 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (any_list2:any list) (int1:int) (int3:int), match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int3) (any_list2)) = SUCC (count (int1) (any_list2))
Model : any_list2: (Nil), int1: 0, int3: 0
Model : any_list2: (Nil), int1: 0, int3: 0
Model : any_list2: (7::(Nil)), int1: -0, int3: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) (insort (0) ((Nil))) = SUCC (count (0) ((Nil)))
count (0) (insort (0) ((Nil))) = SUCC (count (0) ((Nil)))
count (-0) (insort (0) ((7::(Nil)))) = SUCC (count (-0) ((7::(Nil))))
Simplifying took 0.000493 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (count (int1) (insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 416


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (count (int1) (insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any_list2:any list) (int1:int) (int3:int), match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int3) (any_list2)) = SUCC (count (int1) (any_list2))(rank : 0)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int1(rank:9)
=================================================
Progress: 417


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int1(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int2(rank:9)
=================================================
Progress: 418


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int2(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 419


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:10)
=================================================
Progress: 420


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction any_list1(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = SUCC (count (int1) ((Nil)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 421


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = SUCC (count (int1) ((Nil)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 422


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 423


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = SUCC (count (int1) ((any1::any_list2)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 424


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = SUCC (count (int1) ((any1::any_list2)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite <- IH1 in goal at 0(rank:17)
case any_eq (any1) (int1)(rank:10)
=================================================
Progress: 425


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

3 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (int1)(rank:11)
rewrite Cond1 in goal at 0(rank:18)
rewrite <- IH1 in goal at 0(rank:26)
=================================================
Progress: 426


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:11)
rewrite <- IH1 in goal at 0(rank:18)
=================================================
Progress: 427


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:19)
rewrite <- IH1 in goal at 0(rank:19)
=================================================
Progress: 428


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:19)
rewrite <- IH1 in goal at 0(rank:19)
=================================================
Progress: 429


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
=================================================
Progress: 430


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

3 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (int1)(rank:11)
rewrite Cond1 in goal at 0(rank:18)
rewrite IH1 in goal at 0(rank:18)
=================================================
Progress: 431


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:19)
rewrite IH1 in goal at 0(rank:27)
=================================================
Progress: 432


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 18)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 433


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 3
Tactic List : 1
case any_eq (any1) (int1)(rank:10)
=================================================
Progress: 434


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:18)
rewrite <- IH1 in goal at 0(rank:18)
=================================================
Progress: 435


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:11)
=================================================
Progress: 436


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:19)
rewrite IH1 in goal at 0(rank:27)
=================================================
Progress: 437


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 18)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 438


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:11)
=================================================
Progress: 439


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:19)
rewrite <- IH1 in goal at 0(rank:19)
=================================================
Progress: 440


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any_list2:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))
Model : any1: 8, any_list2: (2::(Nil)), int1: 0, int2: 0
Model : any1: 2, any_list2: (8::(Nil)), int1: -0, int2: 0
Model : any1: 3, any_list2: (Nil), int1: 0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((8::(2::(Nil))))) else count (0) ((8::(2::(Nil)))) = SUCC (if int_eq (8) (0) then SUCC (count (0) ((2::(Nil)))) else count (0) ((2::(Nil))))
if match (0, -0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (-0) ((2::(8::(Nil))))) else count (-0) ((2::(8::(Nil)))) = SUCC (if int_eq (2) (-0) then SUCC (count (-0) ((8::(Nil)))) else count (-0) ((8::(Nil))))
if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((3::(Nil)))) else count (0) ((3::(Nil))) = SUCC (if int_eq (3) (0) then SUCC (count (0) ((Nil))) else count (0) ((Nil)))
Simplifying took 0.000770 seconds
Result : true
advanced_generalize done
=================================================
Progress: 441


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 442


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 1
Tactic List : 2
rewrite IH1 in goal at 0(rank:17)
rewrite <- IH1 in goal at 0(rank:17)
=================================================
Progress: 443


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 444


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (count (int1) (insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 9
Tactic List : 1
rewrite lemma4 in goal at 0(rank:10)
=================================================
Progress: 445


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (count (int1) (insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (SUCC (count (int1) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 446


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (SUCC (count (int1) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Cond2 in goal at 0(rank:17)
rewrite <- Case2 in goal at 0(rank:17)
=================================================
Progress: 447


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
true = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 448


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
true = true

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 2
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite lemma4 in goal at 0(rank:17)
=================================================
Progress: 449


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
=================================================
Progress: 450


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 451


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 452


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:10)
=================================================
Progress: 453


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 454


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:10)
=================================================
Progress: 455


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if false then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 456


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if false then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 4
rewrite Case1 in goal at 0(rank:17)
rewrite Case1 in goal at 1(rank:17)
rewrite Case1 in goal at 2(rank:17)
rewrite Cond2 in goal at 0(rank:17)
=================================================
Progress: 457


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
=================================================
Progress: 458


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:10)
=================================================
Progress: 459


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 460


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:10)
=================================================
Progress: 461


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if false then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 462


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if false then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 4
rewrite Case2 in goal at 0(rank:17)
rewrite lemma4 in goal at 0(rank:18)
rewrite lemma4 in goal at 1(rank:18)
rewrite lemma4 in goal at 2(rank:18)
=================================================
Progress: 463


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:9)
=================================================
Progress: 464


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 465


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2)))) else count (int1) (if true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 466


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 467


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:9)
=================================================
Progress: 468


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (if false then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 469


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (if false then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::insort (int3) (any_list2))) else (any1::insort (int2) (insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 3
Tactic List : 1
rewrite Case1 in goal at 0(rank:8)
=================================================
Progress: 470


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::insort (int3) (any_list2))) else (any1::insort (int2) (insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (if true then (int2::(any1::insort (int3) (any_list2))) else (any1::insort (int2) (insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 471


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (if true then (int2::(any1::insort (int3) (any_list2))) else (any1::insort (int2) (insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::insort (int3) (any_list2)))) else count (int1) ((any1::insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:8)
=================================================
Progress: 472


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::insort (int3) (any_list2)))) else count (int1) ((any1::insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) ((any1::insort (int3) (any_list2)))) else count (int1) ((any1::insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 473


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) ((any1::insort (int3) (any_list2)))) else count (int1) ((any1::insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:16)
rewrite lemma4 in goal at 0(rank:17)
rewrite lemma4 in goal at 1(rank:17)
rewrite lemma4 in goal at 2(rank:17)
=================================================
Progress: 474


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if false then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 475


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if false then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma4 in goal at 0(rank:9)
=================================================
Progress: 476


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 477


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Cond2 in goal at 0(rank:8)
=================================================
Progress: 478


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 479


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 11
Tactic List : 7
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
rewrite <- IH1 in goal at 0(rank:15)
case any_eq (any1) (int1)(rank:8)
rewrite lemma4 in goal at 1(rank:16)
rewrite lemma4 in goal at 0(rank:24)
rewrite lemma4 in goal at 2(rank:24)
rewrite lemma4 in goal at 3(rank:24)
=================================================
Progress: 480


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite <- IH1 in goal at 0(rank:16)
rewrite lemma4 in goal at 2(rank:25)
rewrite lemma4 in goal at 0(rank:25)
rewrite lemma4 in goal at 1(rank:25)
case any_eq (any1) (int1)(rank:9)
=================================================
Progress: 481


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite <- IH1 in goal at 0(rank:16)
rewrite lemma4 in goal at 2(rank:25)
rewrite lemma4 in goal at 0(rank:17)
rewrite lemma4 in goal at 1(rank:17)
=================================================
Progress: 482


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case any_eq (any1) (int1)(rank:10)
rewrite Cond1 in goal at 0(rank:17)
rewrite lemma4 in goal at 0(rank:26)
rewrite lemma4 in goal at 1(rank:26)
rewrite lemma4 in goal at 2(rank:26)
rewrite <- IH1 in goal at 0(rank:17)
=================================================
Progress: 483


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite <- IH1 in goal at 0(rank:17)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 484


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite <- IH1 in goal at 0(rank:17)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 485


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:18)
rewrite lemma4 in goal at 0(rank:27)
rewrite <- IH1 in goal at 0(rank:18)
=================================================
Progress: 486


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:18)
rewrite lemma4 in goal at 0(rank:27)
rewrite <- IH1 in goal at 0(rank:18)
=================================================
Progress: 487


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:18)
rewrite lemma4 in goal at 0(rank:27)
rewrite <- IH1 in goal at 0(rank:18)
=================================================
Progress: 488


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
rewrite lemma4 in goal at 1(rank:16)
rewrite lemma4 in goal at 0(rank:24)
rewrite lemma4 in goal at 2(rank:24)
rewrite lemma4 in goal at 3(rank:24)
=================================================
Progress: 489


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite IH1 in goal at 0(rank:24)
rewrite lemma4 in goal at 0(rank:25)
rewrite lemma4 in goal at 1(rank:25)
rewrite lemma4 in goal at 2(rank:25)
case any_eq (any1) (int1)(rank:9)
=================================================
Progress: 490


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case any_eq (any1) (int1)(rank:10)
rewrite Cond1 in goal at 0(rank:17)
rewrite IH1 in goal at 0(rank:25)
rewrite lemma4 in goal at 0(rank:26)
rewrite lemma4 in goal at 1(rank:26)
rewrite lemma4 in goal at 2(rank:26)
=================================================
Progress: 491


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite IH1 in goal at 0(rank:25)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 492


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:18)
rewrite IH1 in goal at 0(rank:26)
rewrite lemma4 in goal at 0(rank:27)
=================================================
Progress: 493


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:18)
rewrite IH1 in goal at 0(rank:26)
rewrite lemma4 in goal at 0(rank:27)
=================================================
Progress: 494


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 1(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite lemma4 in goal at 2(rank:25)
case any_eq (any1) (int1)(rank:9)
rewrite lemma4 in goal at 0(rank:25)
rewrite lemma4 in goal at 1(rank:25)
=================================================
Progress: 495


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case any_eq (any1) (int1)(rank:10)
rewrite Cond2 in goal at 0(rank:17)
rewrite lemma4 in goal at 0(rank:26)
rewrite lemma4 in goal at 1(rank:26)
rewrite lemma4 in goal at 2(rank:26)
rewrite <- IH1 in goal at 0(rank:17)
=================================================
Progress: 496


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite <- IH1 in goal at 0(rank:17)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 497


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:18)
rewrite lemma4 in goal at 0(rank:27)
rewrite <- IH1 in goal at 0(rank:18)
=================================================
Progress: 498


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:18)
rewrite lemma4 in goal at 0(rank:27)
rewrite <- IH1 in goal at 0(rank:18)
=================================================
Progress: 499


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite lemma4 in goal at 2(rank:25)
rewrite lemma4 in goal at 0(rank:25)
rewrite lemma4 in goal at 1(rank:25)
=================================================
Progress: 500


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case any_eq (any1) (int1)(rank:10)
rewrite Cond1 in goal at 0(rank:17)
rewrite IH1 in goal at 0(rank:25)
rewrite lemma4 in goal at 0(rank:26)
rewrite lemma4 in goal at 1(rank:26)
rewrite lemma4 in goal at 2(rank:26)
=================================================
Progress: 501


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:18)
rewrite IH1 in goal at 0(rank:26)
rewrite lemma4 in goal at 0(rank:27)
=================================================
Progress: 502


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite lemma4 in goal at 2(rank:25)
rewrite lemma4 in goal at 0(rank:17)
rewrite lemma4 in goal at 1(rank:17)
=================================================
Progress: 503


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite IH1 in goal at 0(rank:25)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 504


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:18)
rewrite IH1 in goal at 0(rank:26)
rewrite lemma4 in goal at 0(rank:27)
=================================================
Progress: 505


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 1(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite lemma4 in goal at 2(rank:25)
rewrite lemma4 in goal at 0(rank:25)
rewrite lemma4 in goal at 1(rank:25)
=================================================
Progress: 506


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case any_eq (any1) (int1)(rank:10)
rewrite Cond2 in goal at 0(rank:17)
rewrite IH1 in goal at 0(rank:25)
rewrite lemma4 in goal at 0(rank:26)
rewrite lemma4 in goal at 1(rank:26)
rewrite lemma4 in goal at 2(rank:26)
=================================================
Progress: 507


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:18)
rewrite IH1 in goal at 0(rank:26)
rewrite lemma4 in goal at 0(rank:27)
=================================================
Progress: 508


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
=================================================
Progress: 509


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:10)
=================================================
Progress: 510


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 511


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:10)
=================================================
Progress: 512


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if true then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 513


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if true then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 4
rewrite Case2 in goal at 0(rank:17)
rewrite lemma4 in goal at 0(rank:18)
rewrite lemma4 in goal at 1(rank:18)
rewrite lemma4 in goal at 2(rank:18)
=================================================
Progress: 514


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 1(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 515


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:18)
rewrite lemma4 in goal at 0(rank:27)
rewrite <- IH1 in goal at 0(rank:18)
=================================================
Progress: 516


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 517


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite Cond2 in goal at 0(rank:17)
rewrite lemma4 in goal at 0(rank:26)
rewrite <- IH1 in goal at 0(rank:17)
rewrite lemma4 in goal at 1(rank:26)
rewrite lemma4 in goal at 2(rank:26)
=================================================
Progress: 518


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite lemma4 in goal at 0(rank:26)
rewrite lemma4 in goal at 1(rank:26)
rewrite lemma4 in goal at 2(rank:26)
=================================================
Progress: 519


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 520


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:18)
rewrite IH1 in goal at 0(rank:26)
rewrite lemma4 in goal at 0(rank:27)
=================================================
Progress: 521


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 522


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:18)
rewrite IH1 in goal at 0(rank:26)
rewrite lemma4 in goal at 0(rank:27)
=================================================
Progress: 523


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 524


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite Cond2 in goal at 0(rank:17)
rewrite lemma4 in goal at 0(rank:26)
rewrite lemma4 in goal at 1(rank:26)
rewrite lemma4 in goal at 2(rank:26)
rewrite IH1 in goal at 0(rank:25)
=================================================
Progress: 525


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 526


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:10)
=================================================
Progress: 527


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (SUCC (count (int1) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite lemma4 in goal at 0(rank:19)
rewrite <- IH1 in goal at 0(rank:26)
=================================================
Progress: 528


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite lemma4 in goal at 0(rank:26)
rewrite lemma4 in goal at 1(rank:26)
rewrite lemma4 in goal at 2(rank:26)
=================================================
Progress: 529


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 530


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:18)
rewrite IH1 in goal at 0(rank:26)
rewrite lemma4 in goal at 0(rank:27)
=================================================
Progress: 531


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 532


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite Cond2 in goal at 0(rank:17)
rewrite lemma4 in goal at 0(rank:26)
rewrite lemma4 in goal at 1(rank:26)
rewrite lemma4 in goal at 2(rank:26)
rewrite IH1 in goal at 0(rank:25)
=================================================
Progress: 533


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 534


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:18)
rewrite lemma4 in goal at 0(rank:27)
=================================================
Progress: 535


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 1(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 536


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:18)
rewrite IH1 in goal at 0(rank:26)
rewrite lemma4 in goal at 0(rank:27)
=================================================
Progress: 537


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 538


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:10)
=================================================
Progress: 539


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (SUCC (count (int1) (any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:18)
rewrite lemma4 in goal at 0(rank:19)
=================================================
Progress: 540


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 541


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (count (int1) (insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma4 in goal at 0(rank:10)
=================================================
Progress: 542


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (count (int1) (insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (SUCC (count (int1) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 543


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (SUCC (count (int1) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Cond2 in goal at 0(rank:17)
rewrite <- Case2 in goal at 0(rank:17)
=================================================
Progress: 544


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 545


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:10)
=================================================
Progress: 546


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (SUCC (count (int1) (any_list2)))) = SUCC (SUCC (count (int1) (insort (int2) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite lemma4 in goal at 0(rank:19)
rewrite <- IH1 in goal at 0(rank:26)
=================================================
Progress: 547


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case any_eq (any1) (int1)(rank:10)
rewrite lemma4 in goal at 2(rank:26)
rewrite lemma4 in goal at 0(rank:26)
rewrite lemma4 in goal at 1(rank:26)
=================================================
Progress: 548


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:18)
rewrite lemma4 in goal at 0(rank:27)
=================================================
Progress: 549


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 550


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:10)
=================================================
Progress: 551


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (SUCC (count (int1) (any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:18)
rewrite lemma4 in goal at 0(rank:19)
=================================================
Progress: 552


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 553


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:10)
=================================================
Progress: 554


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (insort (int3) (any_list2))) else count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (SUCC (count (int1) (any_list2)))) = SUCC (count (int1) (insort (int2) (insort (int3) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:18)
rewrite lemma4 in goal at 0(rank:19)
=================================================
Progress: 555


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 17)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
true = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 556


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
true = true

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 15
Tactic List : 2
rewrite Cond1 in goal at 0(rank:16)
rewrite <- Case2 in goal at 0(rank:16)
=================================================
Progress: 557


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 558


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 16
Tactic List : 5
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
rewrite <- IH1 in goal at 0(rank:15)
rewrite lemma4 in goal at 2(rank:24)
rewrite lemma4 in goal at 0(rank:16)
rewrite lemma4 in goal at 1(rank:16)
=================================================
Progress: 559


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite <- IH1 in goal at 0(rank:16)
rewrite lemma4 in goal at 0(rank:25)
=================================================
Progress: 560


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:17)
rewrite lemma4 in goal at 0(rank:26)
rewrite <- IH1 in goal at 0(rank:17)
=================================================
Progress: 561


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = count (int1) (insort (int2) (insort (int3) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
rewrite lemma4 in goal at 2(rank:24)
rewrite lemma4 in goal at 1(rank:16)
rewrite lemma4 in goal at 0(rank:24)
=================================================
Progress: 562


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = count (int1) (insort (int2) (insort (int3) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = count (int1) (insort (int2) (insort (int3) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite IH1 in goal at 0(rank:24)
rewrite lemma4 in goal at 0(rank:25)
=================================================
Progress: 563


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = count (int1) (insort (int2) (insort (int3) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = count (int1) (insort (int2) (insort (int3) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:17)
rewrite IH1 in goal at 0(rank:25)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 564


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
=================================================
Progress: 565


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:9)
=================================================
Progress: 566


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 567


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:9)
=================================================
Progress: 568


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if false then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 569


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if false then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 4
rewrite Case2 in goal at 0(rank:16)
rewrite lemma4 in goal at 0(rank:17)
rewrite lemma4 in goal at 1(rank:17)
rewrite lemma4 in goal at 2(rank:17)
=================================================
Progress: 570


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 1(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite lemma4 in goal at 0(rank:25)
=================================================
Progress: 571


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:17)
rewrite lemma4 in goal at 0(rank:26)
rewrite <- IH1 in goal at 0(rank:17)
=================================================
Progress: 572


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = count (int1) (insort (int2) (insort (int3) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite lemma4 in goal at 0(rank:25)
=================================================
Progress: 573


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = count (int1) (insort (int2) (insort (int3) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = count (int1) (insort (int2) (insort (int3) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:17)
rewrite IH1 in goal at 0(rank:25)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 574


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = count (int1) (insort (int2) (insort (int3) (any_list2)))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 1(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = count (int1) (insort (int2) (insort (int3) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
rewrite lemma4 in goal at 0(rank:25)
=================================================
Progress: 575


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = count (int1) (insort (int2) (insort (int3) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = count (int1) (insort (int2) (insort (int3) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:17)
rewrite IH1 in goal at 0(rank:25)
rewrite lemma4 in goal at 0(rank:26)
=================================================
Progress: 576


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if false then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 577


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if false then SUCC (count (int1) (insort (int3) (any_list2))) else count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma4 in goal at 0(rank:9)
=================================================
Progress: 578


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (count (int1) (insort (int3) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 579


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Cond2 in goal at 0(rank:8)
=================================================
Progress: 580


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 581


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 11
Tactic List : 1
rewrite Cond1 in goal at 0(rank:7)
=================================================
Progress: 582


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
true = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 583


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
true = true

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (insort (int2) (sort (int_list2))))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 132
Tactic List : 4
rewrite lemma4 in goal at 0(rank:15)
rewrite lemma4 in goal at 1(rank:15)
rewrite lemma5 in goal at 0(rank:16)
rewrite lemma4 in goal at 2(rank:23)
=================================================
Progress: 584


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (insort (int2) (sort (int_list2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 15)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (count (int1) (insort (int3) (sort (int_list2)))) = SUCC (SUCC (count (int1) (sort (int_list2))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma4 in goal at 0(rank:8)
=================================================
Progress: 585


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (count (int1) (insort (int3) (sort (int_list2)))) = SUCC (SUCC (count (int1) (sort (int_list2))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 8)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (SUCC (count (int1) (sort (int_list2))))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 586


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (SUCC (count (int1) (sort (int_list2))))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 587


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 588


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 589


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 590


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:13)
rewrite lemma4 in goal at 0(rank:14)
rewrite lemma5 in goal at 0(rank:15)
=================================================
Progress: 591


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite lemma4 in goal at 1(rank:14)
rewrite lemma4 in goal at 0(rank:22)
rewrite lemma5 in goal at 0(rank:15)
rewrite lemma4 in goal at 2(rank:22)
=================================================
Progress: 592


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 14)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma4 in goal at 0(rank:7)
=================================================
Progress: 593


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 7)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7)
=================================================
Progress: 594


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 7)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma4 in goal at 0(rank:8)
=================================================
Progress: 595


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 8)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
rewrite lemma4 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
rewrite lemma4 in goal at 0
rewrite <- IH1 in goal at 0
rewrite lemma4 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg14:nat), SUCC (arg14) = arg14
Model : arg14: ZERO
Model : arg14: ZERO
Model : arg14: SUCC (ZERO)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (ZERO) = ZERO
SUCC (ZERO) = ZERO
SUCC (SUCC (ZERO)) = SUCC (ZERO)
Simplifying took 0.000022 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (count (int1) (sort (int_list2))) = count (int1) (sort (int_list2))
Model : int1: -0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (-0) (sort ((Nil)))) = count (-0) (sort ((Nil)))
SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
Simplifying took 0.000071 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))
Model : int1: -0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (-0) (sort ((Nil))))) = SUCC (count (-0) (sort ((Nil))))
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) (sort ((Nil))))
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) (sort ((Nil))))
Simplifying took 0.000080 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 596


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 1(rank : 14)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int3) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite lemma4 in goal at 0(rank:15)
rewrite lemma4 in goal at 2(rank:23)
=================================================
Progress: 597


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma5 in goal at 0(rank : 15)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int2) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15)
rewrite lemma4 in goal at 0(rank:16)
=================================================
Progress: 598


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma5 in goal at 0(rank : 15)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int2) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite lemma4 in goal at 0(rank:24)
rewrite lemma4 in goal at 1(rank:24)
rewrite lemma4 in goal at 2(rank:24)
=================================================
Progress: 599


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int3) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 15)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
rewrite lemma4 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
rewrite lemma4 in goal at 1
rewrite lemma4 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg15:nat), SUCC (arg15) = arg15
Model : arg15: ZERO
Model : arg15: ZERO
Model : arg15: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (ZERO) = ZERO
SUCC (ZERO) = ZERO
SUCC (ZERO) = ZERO
Simplifying took 0.000019 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (count (int1) (sort (int_list2))) = count (int1) (sort (int_list2))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
Simplifying took 0.000069 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (-0::(Nil))
Model : int1: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) (sort ((Nil))))
SUCC (SUCC (count (0) (sort ((-0::(Nil)))))) = SUCC (count (0) (sort ((-0::(Nil)))))
SUCC (SUCC (count (-0) (sort ((Nil))))) = SUCC (count (-0) (sort ((Nil))))
Simplifying took 0.000170 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 600


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int2) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (SUCC (count (int1) (int_list2))) = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
rewrite lemma4 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma5 in goal at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg16:nat), SUCC (arg16) = arg16
Model : arg16: SUCC (SUCC (SUCC (ZERO)))
Model : arg16: ZERO
Model : arg16: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (SUCC (SUCC (ZERO)))) = SUCC (SUCC (SUCC (ZERO)))
SUCC (ZERO) = ZERO
SUCC (ZERO) = ZERO
Simplifying took 0.000029 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (count (int1) (int_list2)) = count (int1) (int_list2)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (-0::(Nil))
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (0) ((Nil))) = count (0) ((Nil))
SUCC (count (0) ((-0::(Nil)))) = count (0) ((-0::(Nil)))
SUCC (count (0) ((Nil))) = count (0) ((Nil))
Simplifying took 0.000145 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (SUCC (count (int1) (int_list2))) = SUCC (count (int1) (int_list2))
Model : int1: -0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (-0) ((Nil)))) = SUCC (count (-0) ((Nil)))
SUCC (SUCC (count (0) ((Nil)))) = SUCC (count (0) ((Nil)))
SUCC (SUCC (count (0) ((Nil)))) = SUCC (count (0) ((Nil)))
Simplifying took 0.000061 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 601


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int2) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 16)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
rewrite lemma4 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma5 in goal at 0
rewrite lemma4 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int_list2:int list), SUCC (count (int1) (sort (int_list2))) = count (int1) (int_list2)
Model : int1: 0, int_list2: (0::(Nil))
Model : int1: 0, int_list2: (-0::(0::(Nil)))
Model : int1: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (0) (sort ((0::(Nil))))) = count (0) ((0::(Nil)))
SUCC (count (0) (sort ((-0::(0::(Nil)))))) = count (0) ((-0::(0::(Nil))))
SUCC (count (-0) (sort ((Nil)))) = count (-0) ((Nil))
Simplifying took 0.000320 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (int_list2))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) ((Nil)))
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) ((Nil)))
SUCC (SUCC (count (-0) (sort ((Nil))))) = SUCC (count (-0) ((Nil)))
Simplifying took 0.000071 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 602


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 22)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma4 in goal at 0(rank:7)
=================================================
Progress: 603


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 7)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
rewrite lemma4 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
rewrite lemma4 in goal at 0
rewrite lemma4 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg17:nat), SUCC (arg17) = arg17
Model : arg17: SUCC (ZERO)
Model : arg17: SUCC (ZERO)
Model : arg17: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (ZERO)) = SUCC (ZERO)
SUCC (SUCC (ZERO)) = SUCC (ZERO)
SUCC (ZERO) = ZERO
Simplifying took 0.000024 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (count (int1) (sort (int_list2))) = count (int1) (sort (int_list2))
Model : int1: 0, int_list2: (-0::(0::(Nil)))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (0) (sort ((-0::(0::(Nil)))))) = count (0) (sort ((-0::(0::(Nil)))))
SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
Simplifying took 0.000327 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))
Model : int1: 0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) (sort ((Nil))))
SUCC (SUCC (count (-0) (sort ((Nil))))) = SUCC (count (-0) (sort ((Nil))))
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) (sort ((Nil))))
Simplifying took 0.000080 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 604


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 2(rank : 22)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma5 in goal at 0(rank:8)
=================================================
Progress: 605


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma5 in goal at 0(rank : 8)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int2) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
rewrite lemma4 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
rewrite lemma4 in goal at 2
rewrite lemma5 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg18:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (arg18))) = SUCC (count (int1) (arg18))
Model : arg18: (Nil), int1: -0, int2: 0
Model : arg18: (Nil), int1: -0, int2: -0
Model : arg18: (Nil), int1: 0, int2: -0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (-0) (insort (0) ((Nil)))) = SUCC (count (-0) ((Nil)))
SUCC (count (-0) (insort (-0) ((Nil)))) = SUCC (count (-0) ((Nil)))
SUCC (count (0) (insort (-0) ((Nil)))) = SUCC (count (0) ((Nil)))
Simplifying took 0.000305 seconds
Result : true
advanced_generalize done


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int2) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 606


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int2) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg18:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (arg18))) = SUCC (count (int1) (arg18))(rank : 0)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 607


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 608


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 609


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction any_list1(rank:16)
rewrite lemma4 in goal at 0(rank:16)
=================================================
Progress: 610


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (count (int1) (insort (int2) ((Nil)))) = SUCC (count (int1) ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 611


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (count (int1) (insort (int2) ((Nil)))) = SUCC (count (int1) ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:8)
=================================================
Progress: 612


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 613


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (ZERO)) = SUCC (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
advanced_generalize done
=================================================
Progress: 614


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 16)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), SUCC (SUCC (count (int1) (any_list1))) = SUCC (count (int1) (any_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:9)
=================================================
Progress: 615


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), SUCC (SUCC (count (int1) (any_list1))) = SUCC (count (int1) (any_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (count (int1) ((Nil)))) = SUCC (count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 616


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (count (int1) ((Nil)))) = SUCC (count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (any_list1))) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (ZERO)) = SUCC (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
advanced_generalize done
=================================================
Progress: 617


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int3) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 2(rank : 23)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma4 in goal at 0(rank:8)
=================================================
Progress: 618


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 8)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
rewrite lemma4 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
rewrite lemma4 in goal at 1
rewrite lemma4 in goal at 2
rewrite lemma4 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg19:nat), SUCC (arg19) = arg19
Model : arg19: ZERO
Model : arg19: ZERO
Model : arg19: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (ZERO) = ZERO
SUCC (ZERO) = ZERO
SUCC (ZERO) = ZERO
Simplifying took 0.000022 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (count (int1) (sort (int_list2))) = count (int1) (sort (int_list2))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (0::(Nil))
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
SUCC (count (0) (sort ((0::(Nil))))) = count (0) (sort ((0::(Nil))))
SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
Simplifying took 0.000194 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) (sort ((Nil))))
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) (sort ((Nil))))
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) (sort ((Nil))))
Simplifying took 0.000082 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 619


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int2) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 24)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
rewrite lemma4 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
rewrite lemma5 in goal at 0
rewrite lemma4 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg20:nat), SUCC (arg20) = arg20
Model : arg20: ZERO
Model : arg20: ZERO
Model : arg20: ZERO
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (ZERO) = ZERO
SUCC (ZERO) = ZERO
SUCC (ZERO) = ZERO
Simplifying took 0.000021 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (count (int1) (sort (int_list2))) = count (int1) (sort (int_list2))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
SUCC (count (-0) (sort ((Nil)))) = count (-0) (sort ((Nil)))
Simplifying took 0.000077 seconds
Result : false
Lemma : forall (int1:int) (int_list2:int list), SUCC (SUCC (count (int1) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) (sort ((Nil))))
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) (sort ((Nil))))
SUCC (SUCC (count (0) (sort ((Nil))))) = SUCC (count (0) (sort ((Nil))))
Simplifying took 0.000094 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 620


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int2) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 1(rank : 24)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (SUCC (count (int1) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
rewrite lemma4 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
rewrite lemma5 in goal at 0
rewrite lemma4 in goal at 1
validate generalize_common_subterm_goal
Lemma : forall (arg21:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (SUCC (count (int1) (arg21))) = count (int1) (insort (int2) (arg21))
Model : arg21: (Nil), int1: 0, int2: 0
Model : arg21: (Nil), int1: -0, int2: 0
Model : arg21: (Nil), int1: 0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (0) ((Nil)))) = count (0) (insort (0) ((Nil)))
SUCC (SUCC (count (-0) ((Nil)))) = count (-0) (insort (0) ((Nil)))
SUCC (SUCC (count (0) ((Nil)))) = count (0) (insort (0) ((Nil)))
Simplifying took 0.000204 seconds
Result : false
Lemma : forall (int1:int) (int2:int) (int_list2:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (SUCC (count (int1) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))
Model : int1: 0, int2: 0, int_list2: (Nil)
Model : int1: 0, int2: -0, int_list2: (Nil)
Model : int1: -0, int2: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (SUCC (count (0) (sort ((Nil))))) = count (0) (insort (0) (sort ((Nil))))
SUCC (SUCC (count (0) (sort ((Nil))))) = count (0) (insort (-0) (sort ((Nil))))
SUCC (SUCC (count (-0) (sort ((Nil))))) = count (-0) (insort (0) (sort ((Nil))))
Simplifying took 0.000240 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 621


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int2) (sort (int_list2)))) = count (int1) (insort (int2) (sort (int_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma4 in goal at 2(rank : 24)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list1))) = SUCC (count (int1) (int_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (insort (int2) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case1 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond2 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
simpl in goal
rewrite lemma4 in goal at 0
reflexivity
rewrite Cond2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
rewrite lemma4 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
rewrite lemma5 in goal at 0
rewrite lemma4 in goal at 2
validate generalize_common_subterm_goal
Lemma : forall (arg22:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (arg22))) = SUCC (count (int1) (arg22))
Model : arg22: (Nil), int1: 0, int2: 0
Model : arg22: (Nil), int1: 0, int2: 1
Model : arg22: (Nil), int1: 0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (0) (insort (0) ((Nil)))) = SUCC (count (0) ((Nil)))
SUCC (count (0) (insort (1) ((Nil)))) = SUCC (count (0) ((Nil)))
SUCC (count (0) (insort (0) ((Nil)))) = SUCC (count (0) ((Nil)))
Simplifying took 0.000240 seconds
Result : false
Lemma : forall (int1:int) (int2:int) (int_list2:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (sort (int_list2))) = count (int1) (sort (int_list2))
Model : int1: 0, int2: 0, int_list2: (Nil)
Model : int1: 0, int2: -0, int_list2: (Nil)
Model : int1: 0, int2: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (0) (insort (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
count (0) (insort (-0) (sort ((Nil)))) = count (0) (sort ((Nil)))
count (0) (insort (-0) (sort ((Nil)))) = count (0) (sort ((Nil)))
Simplifying took 0.000231 seconds
Result : false
Lemma : forall (int1:int) (int2:int) (int_list2:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> SUCC (count (int1) (insort (int2) (sort (int_list2)))) = SUCC (count (int1) (sort (int_list2)))
Model : int1: -0, int2: 0, int_list2: (-0::(Nil))
Model : int1: 0, int2: 0, int_list2: (Nil)
Model : int1: -0, int2: 0, int_list2: (-0::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
SUCC (count (-0) (insort (0) (sort ((-0::(Nil)))))) = SUCC (count (-0) (sort ((-0::(Nil)))))
SUCC (count (0) (insort (0) (sort ((Nil))))) = SUCC (count (0) (sort ((Nil))))
SUCC (count (-0) (insort (0) (sort ((-0::(Nil)))))) = SUCC (count (-0) (sort ((-0::(Nil)))))
Simplifying took 0.000545 seconds
Result : false
asdf
advanced_generalize done
=================================================
Progress: 622


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 25)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 623


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int_list1
rewrite Cond1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int2:int) (int3:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))
Model : int1: -0, int2: -0, int3: 0
Model : int1: 0, int2: 0, int3: -0
Model : int1: 0, int2: 0, int3: 0
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
count (-0) (if match (-0, 0) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (-0::(0::(Nil))) else (0::insort (-0) ((Nil)))) = SUCC (SUCC (ZERO))
count (0) (if match (0, -0) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (0::(-0::(Nil))) else (-0::insort (0) ((Nil)))) = SUCC (SUCC (ZERO))
count (0) (if match (0, 0) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (0::(0::(Nil))) else (0::insort (0) ((Nil)))) = SUCC (SUCC (ZERO))
Simplifying took 0.000366 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 624


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : -1)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
=================================================
Progress: 625


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(Nil))) else (int3::insort (int2) ((Nil)))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (SUCC (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 626


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (SUCC (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (SUCC (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 627


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(Nil)))) else count (int1) ((int3::(Nil))) = SUCC (SUCC (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:10)
=================================================
Progress: 628


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 629


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int2::(Nil)))) else count (int1) ((int2::(Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:9)
=================================================
Progress: 630


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int2::(Nil)))) else count (int1) ((int2::(Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) ((int2::(Nil)))) else count (int1) ((int2::(Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 631


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if true then SUCC (count (int1) ((int2::(Nil)))) else count (int1) ((int2::(Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 632


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 633


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
int_list1 : int list
Case2 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil))) = SUCC (SUCC (ZERO))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) ((any1::any_list2))))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 3
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 634


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) ((any1::any_list2)))) = SUCC (count (int1) (insort (int2) ((any1::any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int_list1(rank:8)
=================================================
Progress: 635


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro int_list1(rank : 8)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:9)
=================================================
Progress: 636


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
rewrite Cond1 in goal at 0(rank:25)
=================================================
Progress: 637


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:10)
=================================================
Progress: 638


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:11)
rewrite Cond1 in goal at 0(rank:26)
=================================================
Progress: 639


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:11)
rewrite Cond1 in goal at 0(rank:26)
=================================================
Progress: 640


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:11)
rewrite Cond1 in goal at 0(rank:26)
=================================================
Progress: 641


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:27)
rewrite Cond1 in goal at 1(rank:27)
rewrite Cond1 in goal at 2(rank:27)
=================================================
Progress: 642


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:27)
rewrite Cond1 in goal at 1(rank:27)
rewrite Cond1 in goal at 2(rank:27)
=================================================
Progress: 643


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case4 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:27)
rewrite Cond1 in goal at 1(rank:27)
rewrite Cond1 in goal at 2(rank:27)
=================================================
Progress: 644


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 25)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 645


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:10)
=================================================
Progress: 646


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 10)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:11)
=================================================
Progress: 647


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (insort (int2) (if match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int3::(any1::any_list2)) else (any1::insort (int3) (any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

3 goal(s) more...

2 conjecture(s) more...
>>> case match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 11)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
Case4 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:12)
=================================================
Progress: 648


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
Case4 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
count (int1) (if match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(int3::(any1::any_list2))) else (int3::insort (int2) ((any1::any_list2)))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

4 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 12)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
Case4 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case5 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:12)
=================================================
Progress: 649


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
Case4 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case5 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 12)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
Case4 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case5 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12)
=================================================
Progress: 650


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
Case4 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case5 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((int3::(any1::any_list2)))) else count (int1) ((int3::(any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

5 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
Case4 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case5 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 651


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
Case4 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case5 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int) (int3:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (insort (int3) (any_list1))) = SUCC (if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then count (int1) (insort (int2) (any_list1)) else count (int1) (int_list1))
int1 : int
int2 : int
int3 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int_list1:int list), count (int1) (insort (int2) (insort (int3) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any1::any_list2)
int_list1 : int list
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (int1) = true
Case4 : match (int3, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case5 : match (int2, int3) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2))) = SUCC (SUCC (SUCC (count (int1) (any_list2))))

5 goal(s) more...

2 conjecture(s) more...
Dilemma timed out for benchmark clam with problem 38.File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
