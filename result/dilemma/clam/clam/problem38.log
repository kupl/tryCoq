Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:nat) (y:nat list), count (x) (sort (y)) = count (x) (y)(rank : 0)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)

---------------------------------------
forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)

---------------------------------------
forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction nat_list1(rank : 4)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat1:nat), count (nat1) (sort ((Nil))) = count (nat1) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat1:nat), count (nat1) (sort ((Nil))) = count (nat1) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (nat1:nat), count (nat1) (sort ((nat2::nat_list2))) = count (nat1) ((nat2::nat_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (nat1:nat), count (nat1) (sort ((nat2::nat_list2))) = count (nat1) ((nat2::nat_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (nat1:nat), count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (nat_list2)) else count (nat1) (nat_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro nat1(rank:3)
=================================================
Progress: 5


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (nat1:nat), count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (nat_list2)) else count (nat1) (nat_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> intro nat1(rank : 3)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (nat_list2)) else count (nat1) (nat_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case nat_eq (nat2) (nat1)(rank:4)
rewrite <- IH1 in goal at 2(rank:11)
rewrite <- IH1 in goal at 0(rank:19)
rewrite <- IH1 in goal at 1(rank:19)
=================================================
Progress: 6


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (nat_list2)) else count (nat1) (nat_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> case nat_eq (nat2) (nat1)(rank : 4)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4)
=================================================
Progress: 7


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
case nat_eq (nat2) (nat1)
rewrite <- IH1 in goal at 0
New Env

;;
Lemma List
forall (arg1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (arg1)) = SUCC (count (nat1) (arg1))
End of Lemma List


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 8


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (arg1)) = SUCC (count (nat1) (arg1))(rank : 0)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5)
=================================================
Progress: 9


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
---------------------------------------
forall (any_list1:any list) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat2(rank:5)
=================================================
Progress: 10


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
---------------------------------------
forall (any_list1:any list) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat2(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
---------------------------------------
forall (any_list1:any list), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5)
=================================================
Progress: 11


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
---------------------------------------
forall (any_list1:any list), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
---------------------------------------
forall (any_list1:any list), count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 12


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
---------------------------------------
forall (any_list1:any list), count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (nat1) (insort (nat2) ((Nil))) = SUCC (count (nat1) ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 13


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (nat1) (insort (nat2) ((Nil))) = SUCC (count (nat1) ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 14


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 15


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (insort (nat2) ((any1::any_list2))) = SUCC (count (nat1) ((any1::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 16


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (insort (nat2) ((any1::any_list2))) = SUCC (count (nat1) ((any1::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6)
rewrite <- IH1 in goal at 0(rank:13)
case any_eq (any1) (nat1)(rank:6)
=================================================
Progress: 17


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (nat1)(rank:7)
rewrite Cond1 in goal at 0(rank:22)
rewrite <- IH1 in goal at 0(rank:22)
=================================================
Progress: 18


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (SUCC (count (nat1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 19


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (SUCC (count (nat1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 20


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (SUCC (count (nat1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (SUCC (count (nat1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 21


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (nat_list2)) else count (nat1) (nat_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 11)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (nat_list2)) else count (nat1) (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case nat_eq (nat2) (nat1)(rank:4)
=================================================
Progress: 22


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (nat_list2)) else count (nat1) (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> case nat_eq (nat2) (nat1)(rank : 4)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4)
=================================================
Progress: 23


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
rewrite <- IH1 in goal at 2
case nat_eq (nat2) (nat1)
rewrite <- IH1 in goal at 0
New Env

;;
Lemma List
forall (arg2:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (arg2)) = SUCC (count (nat1) (arg2))
End of Lemma List


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 24


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg2:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (arg2)) = SUCC (count (nat1) (arg2))(rank : 0)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5)
=================================================
Progress: 25


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
---------------------------------------
forall (any_list1:any list) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat2(rank:5)
=================================================
Progress: 26


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
---------------------------------------
forall (any_list1:any list) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat2(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
---------------------------------------
forall (any_list1:any list), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5)
=================================================
Progress: 27


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
---------------------------------------
forall (any_list1:any list), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
---------------------------------------
forall (any_list1:any list), count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 28


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
---------------------------------------
forall (any_list1:any list), count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (nat1) (insort (nat2) ((Nil))) = SUCC (count (nat1) ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 29


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (nat1) (insort (nat2) ((Nil))) = SUCC (count (nat1) ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 30


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 31


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (insort (nat2) ((any1::any_list2))) = SUCC (count (nat1) ((any1::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 32


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (insort (nat2) ((any1::any_list2))) = SUCC (count (nat1) ((any1::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6)
rewrite <- IH1 in goal at 0(rank:13)
case any_eq (any1) (nat1)(rank:6)
=================================================
Progress: 33


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (nat1)(rank:7)
rewrite Cond1 in goal at 0(rank:22)
rewrite <- IH1 in goal at 0(rank:22)
=================================================
Progress: 34


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (SUCC (count (nat1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 35


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (SUCC (count (nat1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 36


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (SUCC (count (nat1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (SUCC (count (nat1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 37


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6)
=================================================
Progress: 38


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (nat1)(rank:7)
rewrite IH1 in goal at 0(rank:14)
rewrite Cond1 in goal at 0(rank:22)
=================================================
Progress: 39


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite IH1 in goal at 0(rank:23)
=================================================
Progress: 40


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6)
=================================================
Progress: 41


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (nat1)(rank:7)
rewrite IH1 in goal at 0(rank:14)
rewrite Cond1 in goal at 0(rank:22)
=================================================
Progress: 42


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite IH1 in goal at 0(rank:23)
=================================================
Progress: 43


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (SUCC (count (nat1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
=================================================
Progress: 44


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite IH1 in goal at 0(rank:23)
=================================================
Progress: 45


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (SUCC (count (nat1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
=================================================
Progress: 46


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (nat1) = true
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15)
rewrite IH1 in goal at 0(rank:23)
=================================================
Progress: 47


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 48


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 49


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 1
case any_eq (any1) (nat1)(rank:6)
=================================================
Progress: 50


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
SUCC (count (nat1) (insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 51


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
SUCC (count (nat1) (insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:13)
rewrite <- IH1 in goal at 0(rank:13)
=================================================
Progress: 52


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (nat1) = false
---------------------------------------
SUCC (count (nat1) (any_list2)) = SUCC (count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 53


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (nat1) = false
---------------------------------------
SUCC (count (nat1) (any_list2)) = SUCC (count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 9
Tactic List : 1
rewrite lemma3 in goal at 0(rank:5)
=================================================
Progress: 54


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 5)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
SUCC (count (nat1) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 55


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
SUCC (count (nat1) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
nat_eq (nat2) (nat1) = true

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 56


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
nat_eq (nat2) (nat1) = true

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
true = true

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 57


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
true = true

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = count (nat1) (nat_list2)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 1
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:11)
rewrite lemma3 in goal at 0(rank:12)
=================================================
Progress: 58


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = count (nat1) (nat_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = count (nat1) (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:4)
=================================================
Progress: 59


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = count (nat1) (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 4)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
SUCC (count (nat1) (sort (nat_list2))) = count (nat1) (sort (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite IH1 in goal at 0
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (nat1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
rewrite lemma3 in goal at 0
New Env

;;
Lemma List
forall (arg3:nat), SUCC (arg3) = arg3
End of Lemma List


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
SUCC (count (nat1) (sort (nat_list2))) = count (nat1) (sort (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 60


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
SUCC (count (nat1) (sort (nat_list2))) = count (nat1) (sort (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg3:nat), SUCC (arg3) = arg3(rank : 0)


1st goal of : forall (nat1:nat), SUCC (nat1) = nat1

---------------------------------------
forall (nat1:nat), SUCC (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5)
=================================================
Progress: 61


1st goal of : forall (nat1:nat), SUCC (nat1) = nat1

---------------------------------------
forall (nat1:nat), SUCC (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5)


1st goal of : forall (nat1:nat), SUCC (nat1) = nat1
nat1 : nat
---------------------------------------
SUCC (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
New Env

;;
Lemma List
forall (nat1:nat), SUCC (nat1) = nat1
End of Lemma List


1st goal of : forall (nat1:nat), SUCC (nat1) = nat1
nat1 : nat
---------------------------------------
SUCC (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 62


1st goal of : forall (nat1:nat), SUCC (nat1) = nat1
nat1 : nat
---------------------------------------
SUCC (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat), SUCC (nat1) = nat1(rank : 0)


1st goal of : forall (nat1:nat), SUCC (nat1) = nat1

---------------------------------------
forall (nat1:nat), SUCC (nat1) = nat1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7)
=================================================
Progress: 63


1st goal of : forall (nat1:nat), SUCC (nat1) = nat1

---------------------------------------
forall (nat1:nat), SUCC (nat1) = nat1

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7)


1st goal of : forall (nat1:nat), SUCC (nat1) = nat1
nat1 : nat
---------------------------------------
SUCC (nat1) = nat1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 64


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = count (nat1) (nat_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 12)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
SUCC (count (nat1) (sort (nat_list2))) = count (nat1) (nat_list2)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:4)
=================================================
Progress: 65


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
SUCC (count (nat1) (sort (nat_list2))) = count (nat1) (nat_list2)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 4)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
SUCC (count (nat1) (nat_list2)) = count (nat1) (nat_list2)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite IH1 in goal at 0
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (nat1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
rewrite IH1 in goal at 0
New Env

;;
Lemma List
forall (arg4:nat), SUCC (arg4) = arg4
End of Lemma List


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
SUCC (count (nat1) (nat_list2)) = count (nat1) (nat_list2)

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 66


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
SUCC (count (nat1) (nat_list2)) = count (nat1) (nat_list2)

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg4:nat), SUCC (arg4) = arg4(rank : 0)


1st goal of : forall (nat1:nat), SUCC (nat1) = nat1

---------------------------------------
forall (nat1:nat), SUCC (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5)
=================================================
Progress: 67


1st goal of : forall (nat1:nat), SUCC (nat1) = nat1

---------------------------------------
forall (nat1:nat), SUCC (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5)


1st goal of : forall (nat1:nat), SUCC (nat1) = nat1
nat1 : nat
---------------------------------------
SUCC (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 68


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 69


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 70


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 1
case any_eq (any1) (nat1)(rank:6)
=================================================
Progress: 71


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
SUCC (count (nat1) (insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 72


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
SUCC (count (nat1) (insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:13)
rewrite <- IH1 in goal at 0(rank:13)
=================================================
Progress: 73


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (nat1) = false
---------------------------------------
SUCC (count (nat1) (any_list2)) = SUCC (count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 74


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), nat_eq (nat2) (nat1) = true -> count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))
nat1 : nat
nat2 : nat
Cond1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (nat1) = false
---------------------------------------
SUCC (count (nat1) (any_list2)) = SUCC (count (nat1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 9
Tactic List : 1
rewrite lemma3 in goal at 0(rank:5)
=================================================
Progress: 75


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 5)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
SUCC (count (nat1) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 76


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
SUCC (count (nat1) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
nat_eq (nat2) (nat1) = true

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 77


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
nat_eq (nat2) (nat1) = true

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
true = true

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 78


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
nat_eq (nat2) (nat1) = true

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
nat_eq (nat2) (nat1) = nat_eq (nat2) (nat1)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 79


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (nat_list2)) else count (nat1) (nat_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 19)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (sort (nat_list2))) else count (nat1) (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
rewrite <- IH1 in goal at 0
New Env

;;
Lemma List
forall (arg5:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (arg5)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (arg5)) else count (nat1) (arg5)
End of Lemma List


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (sort (nat_list2))) else count (nat1) (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 80


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (sort (nat_list2))) else count (nat1) (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg5:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (arg5)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (arg5)) else count (nat1) (arg5)(rank : 0)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)

---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5)
=================================================
Progress: 81


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)

---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat2(rank:5)
=================================================
Progress: 82


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat2(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (any_list1:any list), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case nat_eq (nat2) (nat1)(rank:6)
=================================================
Progress: 83


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (any_list1:any list), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> case nat_eq (nat2) (nat1)(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
forall (any_list1:any list), count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:7)
=================================================
Progress: 84


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
forall (any_list1:any list), count (nat1) (insort (nat2) (any_list1)) = SUCC (count (nat1) (any_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (nat1) (insort (nat2) ((Nil))) = SUCC (count (nat1) ((Nil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 85


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (nat1) (insort (nat2) ((Nil))) = SUCC (count (nat1) ((Nil)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 86


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 87


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = SUCC (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (insort (nat2) ((any1::any_list2))) = SUCC (count (nat1) ((any1::any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 88


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (insort (nat2) ((any1::any_list2))) = SUCC (count (nat1) ((any1::any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
rewrite <- IH1 in goal at 0(rank:14)
case any_eq (any1) (nat1)(rank:7)
=================================================
Progress: 89


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (nat1)(rank:8)
rewrite Case1 in goal at 0(rank:23)
rewrite <- IH1 in goal at 0(rank:23)
=================================================
Progress: 90


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (SUCC (count (nat1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 91


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 8)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (SUCC (count (nat1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- IH1 in goal at 0(rank:16)
=================================================
Progress: 92


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (SUCC (count (nat1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
Case3 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (SUCC (count (nat1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- IH1 in goal at 0(rank:16)
=================================================
Progress: 93


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
=================================================
Progress: 94


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (nat1)(rank:8)
rewrite IH1 in goal at 0(rank:15)
rewrite Case1 in goal at 0(rank:23)
=================================================
Progress: 95


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 8)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (insort (nat2) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite IH1 in goal at 0(rank:24)
=================================================
Progress: 96


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (SUCC (count (nat1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:8)
=================================================
Progress: 97


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 8)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
Case3 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (insort (nat2) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite IH1 in goal at 0(rank:24)
=================================================
Progress: 98


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 99


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 100


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 1
case any_eq (any1) (nat1)(rank:7)
=================================================
Progress: 101


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2)) = SUCC (if any_eq (any1) (nat1) then count (nat1) (insort (nat2) (any_list2)) else count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
SUCC (count (nat1) (insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 102


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
SUCC (count (nat1) (insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 103


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (nat1) = false
---------------------------------------
SUCC (count (nat1) (any_list2)) = SUCC (count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 104


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = SUCC (count (nat1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (nat1) = false
---------------------------------------
SUCC (count (nat1) (any_list2)) = SUCC (count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
forall (any_list1:any list), count (nat1) (insort (nat2) (any_list1)) = count (nat1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 9
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 105


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
---------------------------------------
forall (any_list1:any list), count (nat1) (insort (nat2) (any_list1)) = count (nat1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (nat1) (insort (nat2) ((Nil))) = count (nat1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 106


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (nat1) (insort (nat2) ((Nil))) = count (nat1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:6)
=================================================
Progress: 107


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if false then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 108


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if false then SUCC (count (nat1) ((Nil))) else count (nat1) ((Nil)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (insort (nat2) ((any1::any_list2))) = count (nat1) ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 109


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (insort (nat2) ((any1::any_list2))) = count (nat1) ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6)
rewrite <- IH1 in goal at 2(rank:13)
case any_eq (any1) (nat1)(rank:6)
rewrite <- IH1 in goal at 0(rank:13)
rewrite <- IH1 in goal at 1(rank:13)
=================================================
Progress: 110


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case any_eq (any1) (nat1)(rank:7)
rewrite Case1 in goal at 0(rank:22)
rewrite <- IH1 in goal at 0(rank:22)
rewrite <- IH1 in goal at 1(rank:22)
rewrite <- IH1 in goal at 2(rank:22)
=================================================
Progress: 111


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 112


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 113


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
Case3 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 114


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6)
case any_eq (any1) (nat1)(rank:6)
=================================================
Progress: 115


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case any_eq (any1) (nat1)(rank:7)
rewrite IH1 in goal at 0(rank:14)
rewrite Case1 in goal at 0(rank:22)
rewrite IH1 in goal at 1(rank:14)
rewrite IH1 in goal at 2(rank:14)
=================================================
Progress: 116


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
rewrite IH1 in goal at 0(rank:22)
=================================================
Progress: 117


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite IH1 in goal at 0(rank:23)
=================================================
Progress: 118


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
Case3 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite IH1 in goal at 0(rank:23)
=================================================
Progress: 119


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 13)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6)
=================================================
Progress: 120


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case any_eq (any1) (nat1)(rank:7)
rewrite <- IH1 in goal at 0(rank:22)
rewrite IH1 in goal at 0(rank:14)
rewrite Case1 in goal at 0(rank:22)
=================================================
Progress: 121


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite IH1 in goal at 0(rank:23)
=================================================
Progress: 122


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 13)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (insort (nat2) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6)
=================================================
Progress: 123


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (insort (nat2) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case any_eq (any1) (nat1)(rank:7)
rewrite <- IH1 in goal at 0(rank:22)
rewrite IH1 in goal at 0(rank:14)
rewrite Case1 in goal at 0(rank:22)
=================================================
Progress: 124


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 125


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7)
=================================================
Progress: 126


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
---------------------------------------
count (nat1) (if match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat2::(any1::any_list2)) else (any1::insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : any_eq (any1) (nat1) = true
Case3 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite IH1 in goal at 0(rank:23)
=================================================
Progress: 127


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case any_eq (any1) (nat1)(rank:7)
rewrite Case1 in goal at 0(rank:22)
=================================================
Progress: 128


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = SUCC (count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 129


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:6)
=================================================
Progress: 130


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 131


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (nat1)(rank:7)
=================================================
Progress: 132


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
SUCC (count (nat1) (any_list2)) = SUCC (count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 133


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
SUCC (count (nat1) (any_list2)) = SUCC (count (nat1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (nat1) = false
---------------------------------------
count (nat1) (any_list2) = count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 134


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 14)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:6)
=================================================
Progress: 135


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 136


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (nat1)(rank:7)
=================================================
Progress: 137


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
SUCC (count (nat1) (any_list2)) = SUCC (count (nat1) (insort (nat2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 138


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:6)
=================================================
Progress: 139


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 140


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (nat1) ((any1::any_list2))) else count (nat1) ((any1::any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (any_list2)) else count (nat1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 4
Tactic List : 1
case any_eq (any1) (nat1)(rank:6)
=================================================
Progress: 141


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (insort (nat2) (any_list2)) = if any_eq (any1) (nat1) then SUCC (count (nat1) (insort (nat2) (any_list2))) else count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (nat1)(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
SUCC (count (nat1) (insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 142


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (nat1) = true
---------------------------------------
SUCC (count (nat1) (insort (nat2) (any_list2))) = SUCC (count (nat1) (insort (nat2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:13)
rewrite <- IH1 in goal at 0(rank:13)
=================================================
Progress: 143


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (nat1) = false
---------------------------------------
count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (nat1) = false
---------------------------------------
count (nat1) (any_list2) = count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 144


1st goal of : forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
nat1 : nat
nat2 : nat
Case1 : nat_eq (nat2) (nat1) = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (nat1) (insort (nat2) (any_list2)) = count (nat1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case2 : match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case3 : any_eq (any1) (nat1) = false
---------------------------------------
count (nat1) (any_list2) = count (nat1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (sort (nat_list2))) else count (nat1) (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 29
Tactic List : 2
case nat_eq (nat2) (nat1)(rank:4)
rewrite lemma3 in goal at 0(rank:11)
=================================================
Progress: 145


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (sort (nat_list2))) else count (nat1) (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> case nat_eq (nat2) (nat1)(rank : 4)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
Case1 : nat_eq (nat2) (nat1) = true
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = SUCC (count (nat1) (sort (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:20)
=================================================
Progress: 146


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
count (nat1) (insort (nat2) (sort (nat_list2))) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (sort (nat_list2))) else count (nat1) (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 11)


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) (sort (nat_list2))) else count (nat1) (sort (nat_list2)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (sort (nat_list2))) else count (nat1) (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 147


1st goal of : forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), count (nat1) (sort (nat_list2)) = count (nat1) (nat_list2)
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
if nat_eq (nat2) (nat1) then SUCC (count (nat1) (sort (nat_list2))) else count (nat1) (sort (nat_list2)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (sort (nat_list2))) else count (nat1) (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


No conjecture
Proof Success
Proof
assert forall (nat1:nat) (nat_list1:nat list), count (nat1) (sort (nat_list1)) = count (nat1) (nat_list1)
induction nat_list1
reflexivity
simpl in goal
intro nat1
rewrite <- IH1 in goal at 0
assert forall (any_list1:any list) (nat1:nat) (nat2:nat), count (nat1) (insort (nat2) (any_list1)) = if nat_eq (nat2) (nat1) then SUCC (count (nat1) (any_list1)) else count (nat1) (any_list1)
intro nat1
intro nat2
case nat_eq (nat2) (nat1)
induction any_list1
simpl in goal
rewrite Case1 in goal at 0
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite IH1 in goal at 0
rewrite Case1 in goal at 0
reflexivity
case any_eq (any1) (nat1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
induction any_list1
simpl in goal
rewrite Case1 in goal at 0
reflexivity
simpl in goal
rewrite <- IH1 in goal at 1
case match (nat2, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite IH1 in goal at 0
rewrite Case1 in goal at 0
reflexivity
case any_eq (any1) (nat1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
Qed
File "_none_", lines 81-83, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 81-83, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
