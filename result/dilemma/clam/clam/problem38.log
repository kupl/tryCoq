Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:int) (y:int list), count (x) (sort (y)) = count (x) (y)(rank : 0)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)

---------------------------------------
forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)

---------------------------------------
forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), count (int1) (sort ((Nil))) = count (int1) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), count (int1) (sort ((Nil))) = count (int1) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), count (int1) (sort ((int2::int_list2))) = count (int1) ((int2::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), count (int1) (sort ((int2::int_list2))) = count (int1) ((int2::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro int1(rank:3)
=================================================
Progress: 5


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> intro int1(rank : 3)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case match (int2, int1) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false(rank:4)
rewrite <- IH1 in goal at 2(rank:19)
rewrite <- IH1 in goal at 0(rank:19)
rewrite <- IH1 in goal at 1(rank:19)
=================================================
Progress: 6


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> case match (int2, int1) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4)
=================================================
Progress: 7


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int1
case match (int2, int1) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 0
advanced_generalize done
Lemma : forall (arg1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (arg1)) = SUCC (count (int1) (arg1))
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
Fatal error: exception Invalid_argument("Random.int")
Raised at Stdlib.invalid_arg in file "stdlib.ml", line 30, characters 20-45
Called from Dilemma__Validate.generator in file "lib/validate.ml", line 46, characters 19-56
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", line 94, characters 34-52
Called from Stdlib__List.map in file "list.ml", line 87, characters 15-19
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", lines 91-96, characters 8-14
Called from Stdlib__List.init in file "list.ml", line 66, characters 13-16
Called from Dilemma__Validate.validate in file "lib/validate.ml", lines 89-100, characters 4-11
Called from Dilemma__Finder.make_lemmas_by_advanced_generalize.(fun) in file "lib/finder.ml", line 1322, characters 38-75
Called from Stdlib__List.find_all in file "list.ml", line 265, characters 17-20
Called from Dilemma__Finder.make_lemmas_by_advanced_generalize in file "lib/finder.ml", line 1322, characters 8-83
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Dilemma__Engine.progress in file "lib/engine.ml", lines 186-188, characters 12-29
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 288, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
