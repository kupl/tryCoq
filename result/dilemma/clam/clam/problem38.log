Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:int) (y:int list), count (x) (sort (y)) = count (x) (y)(rank : 0.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)

---------------------------------------
forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4.)
=================================================
Progress: 2


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)

---------------------------------------
forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), count (int1) (sort ((Nil))) = count (int1) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 3


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), count (int1) (sort ((Nil))) = count (int1) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), count (int1) (sort ((int2::int_list2))) = count (int1) ((int2::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 4


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), count (int1) (sort ((int2::int_list2))) = count (int1) ((int2::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro int1(rank:3.)
=================================================
Progress: 5


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> intro int1(rank : 3.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:4.)
rewrite <- IH1 in goal at 2(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 1(rank:19.)
=================================================
Progress: 6


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 4.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4.)
=================================================
Progress: 7


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int1
case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 0
Prop: count (0) (insort (0) ((Nil))) = SUCC (count (0) ((Nil)))
Prop: count (-0) (insort (-0) ((Nil))) = SUCC (count (-0) ((Nil)))
Prop: count (0) (insort (-0) ((Nil))) = SUCC (count (0) ((Nil)))
validate generalize_common_subterm_goal
Prop: count (0) (insort (0) ((2::(Nil)))) = SUCC (count (0) ((2::(Nil))))
Prop: count (0) (insort (0) ((3::(Nil)))) = SUCC (count (0) ((3::(Nil))))
Prop: count (0) (insort (-0) ((Nil))) = SUCC (count (0) ((Nil)))
previous tactics
simpl in goal
intro int1
case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
validate generalize_common_subterm_goal
Prop: count (0) (insort (0) (sort ((Nil)))) = SUCC (count (0) ((Nil)))
Prop: count (0) (insort (0) (sort ((Nil)))) = SUCC (count (0) ((Nil)))
Prop: count (0) (insort (-0) (sort ((0::(Nil))))) = SUCC (count (0) ((0::(Nil))))
Lemma List
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
End of Lemma List


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 8


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))(rank : 0.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5.)
=================================================
Progress: 9


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int2(rank:5.)
=================================================
Progress: 10


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int2(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5.)
=================================================
Progress: 11


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6.)
=================================================
Progress: 12


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = SUCC (count (int1) ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 13


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = SUCC (count (int1) ((Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6.)
=================================================
Progress: 14


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 15


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = SUCC (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = SUCC (count (int1) ((any1::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 16


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = SUCC (count (int1) ((any1::any_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (int1)(rank:6.)
rewrite <- IH1 in goal at 0(rank:13.)
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6.)
=================================================
Progress: 17


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7.)
rewrite <- IH1 in goal at 0(rank:14.)
=================================================
Progress: 18


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (int1)(rank:7.)
rewrite Cond1 in goal at 0(rank:14.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 19


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 20


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 21


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6.)
=================================================
Progress: 22


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case any_eq (any1) (int1)(rank:7.)
rewrite Cond1 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:14.)
=================================================
Progress: 23


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
=================================================
Progress: 24


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7.)
=================================================
Progress: 25


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
=================================================
Progress: 26


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 27


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 1
case any_eq (any1) (int1)(rank:6.)
=================================================
Progress: 28


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:14.)
rewrite <- IH1 in goal at 0(rank:14.)
=================================================
Progress: 29


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 30


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if true then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:7.)
=================================================
Progress: 31


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 32


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((8::(Nil)))) else count (0) ((8::(Nil))) = SUCC (if int_eq (8) (0) then SUCC (count (0) ((Nil))) else count (0) ((Nil)))
Prop: if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((2::(3::(6::(Nil)))))) else count (0) ((2::(3::(6::(Nil))))) = SUCC (if int_eq (2) (0) then SUCC (count (0) ((3::(6::(Nil))))) else count (0) ((3::(6::(Nil)))))
Prop: if match (-0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((7::(5::(Nil))))) else count (0) ((7::(5::(Nil)))) = SUCC (if int_eq (7) (0) then SUCC (count (0) ((5::(Nil)))) else count (0) ((5::(Nil))))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
validate generalize_common_subterm_goal
Prop: if match (0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((6::(Nil)))) else count (0) ((6::(Nil))) = SUCC (if int_eq (6) (0) then count (0) (insort (0) ((Nil))) else count (0) ((Nil)))
Prop: if match (2, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((5::(Nil)))) else count (0) ((5::(Nil))) = SUCC (if int_eq (5) (0) then count (0) (insort (2) ((Nil))) else count (0) ((Nil)))
Prop: if match (-0, 0) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (0) ((0::(0::(Nil))))) else count (0) ((0::(0::(Nil)))) = SUCC (if int_eq (0) (0) then count (0) (insort (-0) ((0::(Nil)))) else count (0) ((0::(Nil))))
Lemma List
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
End of Lemma List


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
End of Lemma List


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 33


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))(rank : 0.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any1(rank:11.)
=================================================
Progress: 34


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))(rank : 0.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any1(rank:11.)
=================================================
Progress: 35


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:11.)
=================================================
Progress: 36


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:11.)
=================================================
Progress: 37


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:11.)
=================================================
Progress: 38


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:11.)
=================================================
Progress: 39


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 40


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 41


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 42


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 43


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case any_eq (any1) (int1)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
=================================================
Progress: 44


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (any_list1:any list), match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case any_eq (any1) (int1)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
=================================================
Progress: 45


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 12.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (count (int1) (insort (int2) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:12.)
=================================================
Progress: 46


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 12.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:12.)
=================================================
Progress: 47


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (count (int1) (insort (int2) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 12.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (count (int1) (insort (int2) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 48


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 12.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 49


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (count (int1) (insort (int2) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (count (int1) (insort (int2) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12.)
=================================================
Progress: 50


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12.)
=================================================
Progress: 51


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (count (int1) (insort (int2) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (if true then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (count (int1) (insort (int2) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 52


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (if true then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 53


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (if true then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (SUCC (count (int1) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 54


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 55


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), if true then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 56


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), SUCC (if false then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 57


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = false
---------------------------------------
forall (any_list1:any list), SUCC (if false then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (count (int1) (any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
original goal
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
lemma
forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
tactics
assert forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list1)) else count (int1) (any_list1))
intro any1
intro int1
intro int2
intro Cond1
intro Cond2
case any_eq (any1) (int1)
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case1 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
simpl in goal
rewrite Case1 in goal at 0
reflexivity
Deduplication: 1
Tactic List : 2
case any_eq (any1) (int1)(rank:7.)
rewrite Cond1 in goal at 0(rank:14.)
=================================================
Progress: 58


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 59


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (if true then SUCC (count (int1) (any_list1)) else count (int1) (any_list1)) = SUCC (count (int1) (insort (int2) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (SUCC (count (int1) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:13.)
=================================================
Progress: 60


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
---------------------------------------
forall (any_list1:any list), SUCC (SUCC (count (int1) (any_list1))) = SUCC (count (int1) (insort (int2) (any_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 13.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (count (int1) ((Nil)))) = SUCC (count (int1) (insort (int2) ((Nil))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 61


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (count (int1) ((Nil)))) = SUCC (count (int1) (insort (int2) ((Nil))))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (ZERO)) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 62


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (ZERO)) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (ZERO)) = SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 63


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (SUCC (ZERO)) = SUCC (if true then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : SUCC (SUCC (count (int1) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
SUCC (SUCC (count (int1) ((any2::any_list2)))) = SUCC (count (int1) (insort (int2) ((any2::any_list2))))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 64


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : SUCC (SUCC (count (int1) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
SUCC (SUCC (count (int1) ((any2::any_list2)))) = SUCC (count (int1) (insort (int2) ((any2::any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : SUCC (SUCC (count (int1) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
SUCC (SUCC (if any_eq (any2) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (count (int1) (if match (int2, any2) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any2::any_list2)) else (any2::insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case any_eq (any2) (int1)(rank:13.)
case match (int2, any2) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:13.)
=================================================
Progress: 65


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : SUCC (SUCC (count (int1) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
SUCC (SUCC (if any_eq (any2) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (count (int1) (if match (int2, any2) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any2::any_list2)) else (any2::insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> case any_eq (any2) (int1)(rank : 13.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : SUCC (SUCC (count (int1) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any2::any_list2)
Case2 : any_eq (any2) (int1) = true
---------------------------------------
SUCC (SUCC (SUCC (count (int1) (any_list2)))) = SUCC (count (int1) (if match (int2, any2) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any2::any_list2)) else (any2::insort (int2) (any_list2))))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (int2, any2) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:14.)
rewrite IH1 in goal at 0(rank:21.)
=================================================
Progress: 66


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : SUCC (SUCC (count (int1) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any2::any_list2)
---------------------------------------
SUCC (SUCC (if any_eq (any2) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (count (int1) (if match (int2, any2) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any2::any_list2)) else (any2::insort (int2) (any_list2))))

1 goal(s) more...

2 conjecture(s) more...
>>> case match (int2, any2) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 13.)


1st goal of : forall (any1:any) (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true -> if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list1))) else count (int1) ((any1::any_list1)) = SUCC (if any_eq (any1) (int1) then count (int1) (insort (int2) (any_list1)) else count (int1) (any_list1))
any1 : any
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case1 : any_eq (any1) (int1) = true
any_list1 : any list
any2 : any
any_list2 : any list
IH1 : SUCC (SUCC (count (int1) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))
Inductive1 : any_list1 = (any2::any_list2)
Case2 : match (int2, any2) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
SUCC (SUCC (if any_eq (any2) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2))) = SUCC (if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any2::any_list2))) else count (int1) ((any2::any_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case any_eq (any2) (int1)(rank:14.)
rewrite Cond1 in goal at 0(rank:21.)
=================================================
Progress: 67


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 68


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (SUCC (count (int1) (any_list2))) = SUCC (SUCC (count (int1) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 2
rewrite IH1 in goal at 0(rank:13.)
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 69


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 70


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = SUCC (count (int1) (any_list2))
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
original goal
forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
lemma
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
tactics
assert forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
intro int1
intro int2
intro Cond1
induction any_list1
simpl in goal
rewrite Cond1 in goal at 0
reflexivity
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
Deduplication: 17
Tactic List : 1
rewrite lemma3 in goal at 0(rank:5.)
=================================================
Progress: 71


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 5.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (count (int1) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 72


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
SUCC (count (int1) (sort (int_list2))) = SUCC (count (int1) (sort (int_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:4.)
=================================================
Progress: 73


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 4.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
true = true

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 74


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
true = true

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:11.)
rewrite lemma3 in goal at 0(rank:12.)
=================================================
Progress: 75


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:4.)
=================================================
Progress: 76


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 4.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (sort (int_list2))) = count (int1) (sort (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
rewrite lemma3 in goal at 0
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (SUCC (ZERO)) = SUCC (ZERO)
Prop: SUCC (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (ZERO)) = SUCC (ZERO)
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (count (-0) (sort ((Nil)))) = count (-0) (sort ((Nil)))
Prop: SUCC (count (-0) (sort ((Nil)))) = count (-0) (sort ((Nil)))
Prop: SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
asdf
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
Prop: count (0) (insort (-0) ((3::(Nil)))) = count (0) ((3::(Nil)))
Prop: count (0) (insort (0) ((Nil))) = count (0) ((Nil))
Prop: count (0) (insort (0) ((Nil))) = count (0) ((Nil))
validate generalize_common_subterm_goal
Prop: count (0) (insort (0) ((Nil))) = count (0) ((Nil))
Prop: count (-0) (insort (0) ((5::(Nil)))) = count (-0) ((5::(Nil)))
Prop: count (-0) (insort (0) ((Nil))) = count (-0) ((Nil))
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: count (0) (insort (-0) (sort ((-0::(Nil))))) = count (0) ((-0::(Nil)))
Prop: count (0) (insort (0) (sort ((Nil)))) = count (0) ((Nil))
Prop: count (0) (insort (3) (sort ((Nil)))) = count (0) ((Nil))
Lemma List
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
End of Lemma List


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 77


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)(rank : 0.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5.)
=================================================
Progress: 78


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)

---------------------------------------
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int2(rank:5.)
=================================================
Progress: 79


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
---------------------------------------
forall (any_list1:any list) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro int2(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5.)
=================================================
Progress: 80


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
---------------------------------------
forall (any_list1:any list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction any_list1(rank:14.)
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 81


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 12.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (sort (int_list2))) = count (int1) (int_list2)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:4.)
=================================================
Progress: 82


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (sort (int_list2))) = count (int1) (int_list2)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 4.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (int_list2)) = count (int1) (int_list2)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
rewrite IH1 in goal at 0
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: SUCC (SUCC (ZERO)) = SUCC (ZERO)
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (SUCC (ZERO)) = SUCC (ZERO)
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (count (0) ((0::(Nil)))) = count (0) ((0::(Nil)))
Prop: SUCC (count (0) ((Nil))) = count (0) ((Nil))
Prop: SUCC (count (0) ((Nil))) = count (0) ((Nil))
asdf
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
validate generalize_common_subterm_goal
Prop: SUCC (count (0) (sort ((Nil)))) = count (0) ((Nil))
Prop: SUCC (count (0) (sort ((0::(-0::(Nil)))))) = count (0) ((0::(-0::(Nil))))
Prop: SUCC (count (-0) (sort ((-0::(Nil))))) = count (-0) ((-0::(Nil)))
asdf
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: count (0) (insort (0) (sort ((0::(Nil))))) = count (0) ((0::(Nil)))
Prop: count (0) (insort (0) (sort ((Nil)))) = count (0) ((Nil))
Prop: count (0) (insort (-0) (sort ((Nil)))) = count (0) ((Nil))
Lemma List
forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
End of Lemma List


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 83


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)(rank : 0.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)

---------------------------------------
forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5.)
=================================================
Progress: 84


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)

---------------------------------------
forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
---------------------------------------
forall (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int2(rank:5.)
=================================================
Progress: 85


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
---------------------------------------
forall (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro int2(rank : 5.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
---------------------------------------
forall (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5.)
=================================================
Progress: 86


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
---------------------------------------
forall (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction int_list1(rank:14.)
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 87


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = count (int1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 88


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) ((Nil))) = count (int1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6.)
=================================================
Progress: 89


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 90


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
if false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = count (int1) ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 91


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (insort (int2) ((any1::any_list2))) = count (int1) ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case any_eq (any1) (int1)(rank:6.)
rewrite <- IH1 in goal at 2(rank:13.)
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6.)
rewrite <- IH1 in goal at 0(rank:13.)
rewrite <- IH1 in goal at 1(rank:13.)
=================================================
Progress: 92


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7.)
rewrite <- IH1 in goal at 0(rank:14.)
=================================================
Progress: 93


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case any_eq (any1) (int1)(rank:7.)
rewrite Cond1 in goal at 0(rank:14.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 1(rank:22.)
rewrite <- IH1 in goal at 2(rank:22.)
=================================================
Progress: 94


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 95


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 96


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case any_eq (any1) (int1)(rank:6.)
rewrite lemma3 in goal at 2(rank:22.)
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite lemma3 in goal at 1(rank:22.)
=================================================
Progress: 97


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:23.)
=================================================
Progress: 98


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case any_eq (any1) (int1)(rank:7.)
rewrite Cond1 in goal at 0(rank:14.)
rewrite IH1 in goal at 2(rank:14.)
rewrite IH1 in goal at 1(rank:22.)
rewrite lemma3 in goal at 0(rank:23.)
rewrite lemma3 in goal at 1(rank:23.)
rewrite IH1 in goal at 0(rank:14.)
rewrite lemma3 in goal at 2(rank:23.)
=================================================
Progress: 99


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite lemma3 in goal at 0(rank:24.)
=================================================
Progress: 100


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite lemma3 in goal at 0(rank:24.)
=================================================
Progress: 101


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 13.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 102


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case any_eq (any1) (int1)(rank:7.)
rewrite Cond1 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 103


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite lemma3 in goal at 0(rank:24.)
=================================================
Progress: 104


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 13.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (insort (int2) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 105


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (insort (int2) (any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case any_eq (any1) (int1)(rank:7.)
rewrite Cond1 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:14.)
rewrite <- IH1 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:23.)
=================================================
Progress: 106


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 107


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (any_list1:any list), count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (any_list1:any list), SUCC (count (int1) (any_list1)) = count (int1) (any_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:7.)
=================================================
Progress: 108


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (any_list1:any list), SUCC (count (int1) (any_list1)) = count (int1) (any_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (count (int1) ((Nil))) = count (int1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 109


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (count (int1) ((Nil))) = count (int1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
SUCC (ZERO) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
=================================================
Progress: 110


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 14.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) (sort ((Nil)))) = count (int1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 111


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
count (int1) (insort (int2) (sort ((Nil)))) = count (int1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6.)
=================================================
Progress: 112


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
if false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 113


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
if false then SUCC (count (int1) ((Nil))) else count (int1) ((Nil)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (insort (int2) (sort ((int3::int_list2)))) = count (int1) ((int3::int_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 114


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (insort (int2) (sort ((int3::int_list2)))) = count (int1) ((int3::int_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:6.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 1(rank:21.)
rewrite <- IH1 in goal at 2(rank:21.)
=================================================
Progress: 115


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = if match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) (int_list2)) else count (int1) (int_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 6.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:15.)
=================================================
Progress: 116


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (int_list1:int list), count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (int_list1:int list), SUCC (count (int1) (sort (int_list1))) = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:7.)
=================================================
Progress: 117


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
forall (int_list1:int list), SUCC (count (int1) (sort (int_list1))) = count (int1) (int_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 7.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
SUCC (count (int1) (sort ((Nil)))) = count (int1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 118


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
SUCC (count (int1) (sort ((Nil)))) = count (int1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
SUCC (ZERO) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
=================================================
Progress: 119


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:7.)
rewrite lemma3 in goal at 0(rank:23.)
=================================================
Progress: 120


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
---------------------------------------
count (int1) (if match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(any1::any_list2)) else (any1::insort (int2) (any_list2))) = SUCC (count (int1) (insort (int2) (any_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : any_eq (any1) (int1) = true
Case2 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite lemma3 in goal at 0(rank:24.)
=================================================
Progress: 121


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 122


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 5
Tactic List : 1
case any_eq (any1) (int1)(rank:6.)
=================================================
Progress: 123


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:14.)
=================================================
Progress: 124


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 125


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:7.)
=================================================
Progress: 126


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:15.)
rewrite lemma3 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 127


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:7.)
=================================================
Progress: 128


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 129


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:7.)
=================================================
Progress: 130


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (SUCC (count (int1) (any_list2))) else count (int1) (any_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case any_eq (any1) (int1)(rank:8.)
rewrite Cond1 in goal at 0(rank:15.)
=================================================
Progress: 131


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (SUCC (count (int1) (any_list2))) else count (int1) (any_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 8.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (SUCC (count (int1) (any_list2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:16.)
=================================================
Progress: 132


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 133


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:7.)
=================================================
Progress: 134


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (insort (int2) (any_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:15.)
rewrite lemma3 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 135


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 136


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:7.)
=================================================
Progress: 137


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 138


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (any_list2) = count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite IH1 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:14.)
=================================================
Progress: 139


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case any_eq (any1) (int1)(rank:7.)
=================================================
Progress: 140


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (any_list2)

1 goal(s) more...

1 conjecture(s) more...
>>> case any_eq (any1) (int1)(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : any_eq (any1) (int1) = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = SUCC (count (int1) (any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 141


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (any_list2)) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then SUCC (count (int1) ((any1::any_list2))) else count (int1) ((any1::any_list2)) = if any_eq (any1) (int1) then SUCC (count (int1) (insort (int2) (any_list2))) else count (int1) (insort (int2) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:23.)
rewrite lemma3 in goal at 1(rank:23.)
rewrite lemma3 in goal at 2(rank:23.)
=================================================
Progress: 142


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (int_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (sort (int_list1))) = count (int1) (int_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : count (int1) (insort (int2) (sort (int_list2))) = count (int1) (int_list2)
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int3, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
count (int1) (insort (int2) (insort (int3) (sort (int_list2)))) = SUCC (count (int1) (insort (int2) (sort (int_list2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:15.)
rewrite lemma3 in goal at 1(rank:15.)
rewrite lemma3 in goal at 2(rank:23.)
=================================================
Progress: 143


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (insort (int2) (any_list2))) = SUCC (count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 144


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = true
---------------------------------------
SUCC (count (int1) (any_list2)) = SUCC (count (int1) (any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 3
rewrite IH1 in goal at 0(rank:13.)
rewrite lemma3 in goal at 0(rank:14.)
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 145


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (any_list2) = count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 146


1st goal of : forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
int1 : int
int2 : int
Cond1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : count (int1) (insort (int2) (any_list2)) = count (int1) (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
Case1 : match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : any_eq (any1) (int1) = false
---------------------------------------
count (int1) (any_list2) = count (int1) (any_list2)

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
original goal
forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
lemma
forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
tactics
assert forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
intro int1
intro int2
intro Cond1
induction any_list1
simpl in goal
rewrite Cond1 in goal at 0
reflexivity
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
Deduplication: 53
Tactic List : 2
rewrite lemma3 in goal at 0(rank:12.)
rewrite lemma4 in goal at 0(rank:12.)
=================================================
Progress: 147


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 12.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
SUCC (count (int1) (sort (int_list2))) = count (int1) (sort (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (SUCC (ZERO)) = SUCC (ZERO)
Prop: SUCC (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (count (-0) (sort ((Nil)))) = count (-0) (sort ((Nil)))
Prop: SUCC (count (0) (sort ((Nil)))) = count (0) (sort ((Nil)))
Prop: SUCC (count (-1) (sort ((-0::(Nil))))) = count (-1) (sort ((-0::(Nil))))
asdf
previous tactics
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
Prop: count (-1) (insort (0) ((2::(Nil)))) = count (-1) ((2::(Nil)))
Prop: count (0) (insort (0) ((Nil))) = count (0) ((Nil))
Prop: count (0) (insort (0) ((Nil))) = count (0) ((Nil))
validate generalize_common_subterm_goal
Prop: count (0) (insort (-0) ((2::(Nil)))) = count (0) ((2::(Nil)))
Prop: count (0) (insort (-0) ((Nil))) = count (0) ((Nil))
Prop: count (-0) (insort (0) ((Nil))) = count (-0) ((Nil))
=================================================
Progress: 148


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (insort (int2) (sort (int_list2))) = count (int1) (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 12.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (sort (int_list2)) = count (int1) (sort (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 149


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
count (int1) (sort (int_list2)) = count (int1) (sort (int_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:3.)
=================================================
Progress: 150


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 3.)


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
false = false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0.)
=================================================
Progress: 151


1st goal of : forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), count (int1) (sort (int_list2)) = count (int1) (int_list2)
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false
---------------------------------------
false = false

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0.)


No conjecture
Proof Success
Proof
assert forall (int1:int) (int_list1:int list), count (int1) (sort (int_list1)) = count (int1) (int_list1)
induction int_list1
reflexivity
simpl in goal
intro int1
case match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 0
assert forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true -> count (int1) (insort (int2) (any_list1)) = SUCC (count (int1) (any_list1))
intro int1
intro int2
intro Cond1
induction any_list1
simpl in goal
rewrite Cond1 in goal at 0
reflexivity
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
assert forall (any_list1:any list) (int1:int) (int2:int), match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = false -> count (int1) (insort (int2) (any_list1)) = count (int1) (any_list1)
intro int1
intro int2
intro Cond1
induction any_list1
simpl in goal
rewrite Cond1 in goal at 0
reflexivity
simpl in goal
case match (int2, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
rewrite Cond1 in goal at 0
reflexivity
case any_eq (any1) (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
Qed
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
