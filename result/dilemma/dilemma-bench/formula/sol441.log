Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (f:formula), eval_ta1 (f) = eval (f)(rank : 0)


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)

---------------------------------------
forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)

---------------------------------------
forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)

---------------------------------------
forall (formula1:formula), eval_ta1 (formula1) = match (eval_help (formula1)) with
| True  -> true
| False  -> false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction formula1(rank:9)
=================================================
Progress: 3


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)

---------------------------------------
forall (formula1:formula), eval_ta1 (formula1) = match (eval_help (formula1)) with
| True  -> true
| False  -> false

0 goal(s) more...

0 conjecture(s) more...
>>> induction formula1(rank : 9)


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
Base1 : formula1 = True
---------------------------------------
eval_ta1 (True) = match (eval_help (True)) with
| True  -> true
| False  -> false

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 4


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
Base1 : formula1 = True
---------------------------------------
eval_ta1 (True) = match (eval_help (True)) with
| True  -> true
| False  -> false

6 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
Base1 : formula1 = False
---------------------------------------
eval_ta1 (False) = match (eval_help (False)) with
| True  -> true
| False  -> false

5 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 5


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
Base1 : formula1 = False
---------------------------------------
eval_ta1 (False) = match (eval_help (False)) with
| True  -> true
| False  -> false

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
formula2 : formula
IH1 : eval_ta1 (formula2) = match (eval_help (formula2)) with
| True  -> true
| False  -> false
Inductive1 : formula1 = Not (formula2)
---------------------------------------
eval_ta1 (Not (formula2)) = match (eval_help (Not (formula2))) with
| True  -> true
| False  -> false

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case eval_help (Not (formula2))(rank:13)
=================================================
Progress: 6


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
formula2 : formula
IH1 : eval_ta1 (formula2) = match (eval_help (formula2)) with
| True  -> true
| False  -> false
Inductive1 : formula1 = Not (formula2)
---------------------------------------
eval_ta1 (Not (formula2)) = match (eval_help (Not (formula2))) with
| True  -> true
| False  -> false

4 goal(s) more...

0 conjecture(s) more...
>>> case eval_help (Not (formula2))(rank : 13)


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
formula2 : formula
IH1 : eval_ta1 (formula2) = match (eval_help (formula2)) with
| True  -> true
| False  -> false
Inductive1 : formula1 = Not (formula2)
Case1 : eval_help (Not (formula2)) = True
---------------------------------------
if eval_ta1 (formula2) then false else true = true

10 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in Case1(rank:13)
=================================================
Progress: 7


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
formula2 : formula
IH1 : eval_ta1 (formula2) = match (eval_help (formula2)) with
| True  -> true
| False  -> false
Inductive1 : formula1 = Not (formula2)
Case1 : eval_help (Not (formula2)) = True
---------------------------------------
if eval_ta1 (formula2) then false else true = true

10 goal(s) more...

0 conjecture(s) more...
>>> simpl in Case1(rank : 13)


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
formula2 : formula
IH1 : eval_ta1 (formula2) = match (eval_help (formula2)) with
| True  -> true
| False  -> false
Inductive1 : formula1 = Not (formula2)
Case1 : match (formula2) with
| True  -> False
| False  -> True
| _ -> eval_help (Not (eval_help (formula2))) = True
---------------------------------------
if eval_ta1 (formula2) then false else true = true

10 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case eval_ta1 (formula2)(rank:14)
rewrite IH1 in goal at 0(rank:29)
=================================================
Progress: 8


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
formula2 : formula
IH1 : eval_ta1 (formula2) = match (eval_help (formula2)) with
| True  -> true
| False  -> false
Inductive1 : formula1 = Not (formula2)
Case1 : match (formula2) with
| True  -> False
| False  -> True
| _ -> eval_help (Not (eval_help (formula2))) = True
---------------------------------------
if eval_ta1 (formula2) then false else true = true

10 goal(s) more...

0 conjecture(s) more...
>>> case eval_ta1 (formula2)(rank : 14)


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
formula2 : formula
IH1 : true = match (eval_help (formula2)) with
| True  -> true
| False  -> false
Inductive1 : formula1 = Not (formula2)
Case1 : match (formula2) with
| True  -> False
| False  -> True
| _ -> eval_help (Not (eval_help (formula2))) = True
Case2 : eval_ta1 (formula2) = true
---------------------------------------
false = true

11 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 9


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
formula2 : formula
IH1 : true = match (eval_help (formula2)) with
| True  -> true
| False  -> false
Inductive1 : formula1 = Not (formula2)
Case1 : match (formula2) with
| True  -> False
| False  -> True
| _ -> eval_help (Not (eval_help (formula2))) = True
Case2 : eval_ta1 (formula2) = true
---------------------------------------
false = true

11 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (formula1:formula), eval_ta1 (formula1) = eval (formula1)
formula1 : formula
formula2 : formula
IH1 : true = match (eval_help (formula2)) with
| True  -> true
| False  -> false
Inductive1 : formula1 = Not (formula2)
Case1 : match (formula2) with
| True  -> False
| False  -> True
| _ -> eval_help (Not (eval_help (formula2))) = True
Case2 : eval_ta1 (formula2) = true
---------------------------------------
false = eval_ta1 (formula2)

11 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
case eval_help (Not (formula2))
simpl in Case1
case eval_ta1 (formula2)
rewrite <- Case2 in goal at 0
Lemma : forall (formula2:formula), match (formula2) with
| True  -> False
| False  -> True
| _ -> eval_help (Not (eval_help (formula2))) = True->eval_ta1 (formula2) = true -> false = eval_ta1 (formula2)
Model : formula2: True
File "_none_", lines 65-67, characters 2-18:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Not _|AndAlso (_, _)|OrElse (_, _)|Imply (_, _)|Equal (_, _))
Fatal error: exception Invalid_argument("Random.int")
Raised at Stdlib.invalid_arg in file "stdlib.ml", line 30, characters 20-45
Called from Dilemma__Validate.generator in file "lib/validate.ml", line 46, characters 19-56
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Dilemma__Validate.generator in file "lib/validate.ml", line 54, characters 27-85
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Dilemma__Validate.generator in file "lib/validate.ml", line 54, characters 27-85
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Dilemma__Validate.generator in file "lib/validate.ml", line 54, characters 27-85
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", line 94, characters 34-52
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", lines 91-96, characters 8-14
Called from Stdlib__List.init in file "list.ml", line 67, characters 13-20
Called from Dilemma__Validate.validate in file "lib/validate.ml", lines 89-100, characters 4-11
Called from Dilemma__Finder.naive_generalize in file "lib/finder.ml", line 1235, characters 10-64
Called from Dilemma__Finder.advanced_generalize in file "lib/finder.ml", line 1308, characters 50-72
Called from Dilemma__Finder.find_lemma in file "lib/finder.ml", line 1328, characters 22-43
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 197, characters 12-77
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 291, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
