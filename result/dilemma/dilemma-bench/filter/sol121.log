Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (pred:int -> bool) (int_list1:int list), filter_ta1 (pred) (int_list1) = filter (pred) (int_list1)(rank : 0)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)

---------------------------------------
forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)

---------------------------------------
forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int->bool1:int -> bool), filter_ta1 (int->bool1) ((Nil)) = filter (int->bool1) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int->bool1:int -> bool), filter_ta1 (int->bool1) ((Nil)) = filter (int->bool1) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
forall (int->bool1:int -> bool), filter_ta1 (int->bool1) ((int1::int_list2)) = filter (int->bool1) ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
forall (int->bool1:int -> bool), filter_ta1 (int->bool1) ((int1::int_list2)) = filter (int->bool1) ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
forall (int->bool1:int -> bool), if int->bool1 (int1) then (int1::filter_ta1 (int->bool1) (int_list2)) else filter_ta1 (int->bool1) (int_list2) = if int->bool1 (int1) then (int1::filter (int->bool1) (int_list2)) else filter (int->bool1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro int->bool1(rank:3)
=================================================
Progress: 5


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
forall (int->bool1:int -> bool), if int->bool1 (int1) then (int1::filter_ta1 (int->bool1) (int_list2)) else filter_ta1 (int->bool1) (int_list2) = if int->bool1 (int1) then (int1::filter (int->bool1) (int_list2)) else filter (int->bool1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> intro int->bool1(rank : 3)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
---------------------------------------
if int->bool1 (int1) then (int1::filter_ta1 (int->bool1) (int_list2)) else filter_ta1 (int->bool1) (int_list2) = if int->bool1 (int1) then (int1::filter (int->bool1) (int_list2)) else filter (int->bool1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
int1 int1 asdf
Tactic List : 1
case int->bool1 (int1)(rank:4)
=================================================
Progress: 6


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
---------------------------------------
if int->bool1 (int1) then (int1::filter_ta1 (int->bool1) (int_list2)) else filter_ta1 (int->bool1) (int_list2) = if int->bool1 (int1) then (int1::filter (int->bool1) (int_list2)) else filter (int->bool1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> case int->bool1 (int1)(rank : 4)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = true
---------------------------------------
(int1::filter_ta1 (int->bool1) (int_list2)) = (int1::filter (int->bool1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:12)
rewrite <- IH1 in goal at 0(rank:12)
=================================================
Progress: 7


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = true
---------------------------------------
(int1::filter_ta1 (int->bool1) (int_list2)) = (int1::filter (int->bool1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = true
---------------------------------------
(int1::filter (int->bool1) (int_list2)) = (int1::filter (int->bool1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 8


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = true
---------------------------------------
(int1::filter (int->bool1) (int_list2)) = (int1::filter (int->bool1) (int_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = false
---------------------------------------
filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 1
Tactic List : 2
rewrite IH1 in goal at 0(rank:11)
rewrite <- IH1 in goal at 0(rank:11)
=================================================
Progress: 9


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = false
---------------------------------------
filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = false
---------------------------------------
filter (int->bool1) (int_list2) = filter (int->bool1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 10


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = false
---------------------------------------
filter (int->bool1) (int_list2) = filter (int->bool1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


No conjecture
Proof Success
Proof
assert forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter (int->bool1) (int_list1)
induction int_list1
reflexivity
simpl in goal
intro int->bool1
case int->bool1 (int1)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
Qed
