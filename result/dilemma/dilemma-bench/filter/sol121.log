Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (pred:int -> bool) (int_list1:int list), filter_ta1 (pred) (int_list1) = filter_sub (pred) (int_list1)(rank : 0)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)

---------------------------------------
forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)

---------------------------------------
forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int->bool1:int -> bool), filter_ta1 (int->bool1) ((Nil)) = filter_sub (int->bool1) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int->bool1:int -> bool), filter_ta1 (int->bool1) ((Nil)) = filter_sub (int->bool1) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter_sub (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
forall (int->bool1:int -> bool), filter_ta1 (int->bool1) ((int1::int_list2)) = filter_sub (int->bool1) ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter_sub (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
forall (int->bool1:int -> bool), filter_ta1 (int->bool1) ((int1::int_list2)) = filter_sub (int->bool1) ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter_sub (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
forall (int->bool1:int -> bool), if int->bool1 (int1) then (int1::filter_ta1 (int->bool1) (int_list2)) else filter_ta1 (int->bool1) (int_list2) = reverse (loop (int->bool1) (int_list2) (if int->bool1 (int1) then (int1::(Nil)) else (Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro int->bool1(rank:3)
=================================================
Progress: 5


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter_sub (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
forall (int->bool1:int -> bool), if int->bool1 (int1) then (int1::filter_ta1 (int->bool1) (int_list2)) else filter_ta1 (int->bool1) (int_list2) = reverse (loop (int->bool1) (int_list2) (if int->bool1 (int1) then (int1::(Nil)) else (Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> intro int->bool1(rank : 3)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter_sub (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
---------------------------------------
if int->bool1 (int1) then (int1::filter_ta1 (int->bool1) (int_list2)) else filter_ta1 (int->bool1) (int_list2) = reverse (loop (int->bool1) (int_list2) (if int->bool1 (int1) then (int1::(Nil)) else (Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case int->bool1 (int1)(rank:4)
=================================================
Progress: 6


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter_sub (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
---------------------------------------
if int->bool1 (int1) then (int1::filter_ta1 (int->bool1) (int_list2)) else filter_ta1 (int->bool1) (int_list2) = reverse (loop (int->bool1) (int_list2) (if int->bool1 (int1) then (int1::(Nil)) else (Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> case int->bool1 (int1)(rank : 4)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter_sub (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = true
---------------------------------------
(int1::filter_ta1 (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:4)
=================================================
Progress: 7


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter_sub (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = true
---------------------------------------
(int1::filter_ta1 (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 4)


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter_sub (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = true
---------------------------------------
(int1::filter_sub (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int->bool1
case int->bool1 (int1)
rewrite IH1 in goal at 0
New Env

;;
Lemma List
forall (int->bool1:int -> bool) (int1:int) (int_list2:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))
End of Lemma List


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter_sub (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = true
---------------------------------------
(int1::filter_sub (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 8


1st goal of : forall (int->bool1:int -> bool) (int_list1:int list), filter_ta1 (int->bool1) (int_list1) = filter_sub (int->bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), filter_ta1 (int->bool1) (int_list2) = filter_sub (int->bool1) (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int1) = true
---------------------------------------
(int1::filter_sub (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (int->bool1:int -> bool) (int1:int) (int_list2:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))(rank : 0)


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))

---------------------------------------
forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5)
=================================================
Progress: 9


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))

---------------------------------------
forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5)


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
---------------------------------------
forall (int->bool1:int -> bool) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5)
=================================================
Progress: 10


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
---------------------------------------
forall (int->bool1:int -> bool) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5)


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
Cond1 : int->bool1 (int1) = true
---------------------------------------
forall (int->bool1:int -> bool) (int_list1:int list), (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:6)
=================================================
Progress: 11


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
Cond1 : int->bool1 (int1) = true
---------------------------------------
forall (int->bool1:int -> bool) (int_list1:int list), (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 6)


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
Cond1 : int->bool1 (int1) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int->bool1:int -> bool), (int1::filter_sub (int->bool1) ((Nil))) = reverse (loop (int->bool1) ((Nil)) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 12


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
Cond1 : int->bool1 (int1) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int->bool1:int -> bool), (int1::filter_sub (int->bool1) ((Nil))) = reverse (loop (int->bool1) ((Nil)) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
Cond1 : int->bool1 (int1) = true
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), (int1::filter_sub (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int->bool1:int -> bool), (int1::filter_sub (int->bool1) ((int2::int_list2))) = reverse (loop (int->bool1) ((int2::int_list2)) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 13


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
Cond1 : int->bool1 (int1) = true
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), (int1::filter_sub (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int->bool1:int -> bool), (int1::filter_sub (int->bool1) ((int2::int_list2))) = reverse (loop (int->bool1) ((int2::int_list2)) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
Cond1 : int->bool1 (int1) = true
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), (int1::filter_sub (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int->bool1:int -> bool), (int1::reverse (loop (int->bool1) (int_list2) (if int->bool1 (int2) then (int2::(Nil)) else (Nil))) ((Nil))) = reverse (loop (int->bool1) (int_list2) (if int->bool1 (int2) then (int2::(int1::(Nil))) else (int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int->bool1(rank:5)
=================================================
Progress: 14


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
Cond1 : int->bool1 (int1) = true
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), (int1::filter_sub (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int->bool1:int -> bool), (int1::reverse (loop (int->bool1) (int_list2) (if int->bool1 (int2) then (int2::(Nil)) else (Nil))) ((Nil))) = reverse (loop (int->bool1) (int_list2) (if int->bool1 (int2) then (int2::(int1::(Nil))) else (int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int->bool1(rank : 5)


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
Cond1 : int->bool1 (int1) = true
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), (int1::filter_sub (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int->bool1 : int -> bool
---------------------------------------
(int1::reverse (loop (int->bool1) (int_list2) (if int->bool1 (int2) then (int2::(Nil)) else (Nil))) ((Nil))) = reverse (loop (int->bool1) (int_list2) (if int->bool1 (int2) then (int2::(int1::(Nil))) else (int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case int->bool1 (int2)(rank:6)
=================================================
Progress: 15


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
Cond1 : int->bool1 (int1) = true
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), (int1::filter_sub (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int->bool1 : int -> bool
---------------------------------------
(int1::reverse (loop (int->bool1) (int_list2) (if int->bool1 (int2) then (int2::(Nil)) else (Nil))) ((Nil))) = reverse (loop (int->bool1) (int_list2) (if int->bool1 (int2) then (int2::(int1::(Nil))) else (int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> case int->bool1 (int2)(rank : 6)


1st goal of : forall (int->bool1:int -> bool) (int1:int) (int_list1:int list), int->bool1 (int1) = true -> (int1::filter_sub (int->bool1) (int_list1)) = reverse (loop (int->bool1) (int_list1) ((int1::(Nil)))) ((Nil))
int1 : int
Cond1 : int->bool1 (int1) = true
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int->bool1:int -> bool), (int1::filter_sub (int->bool1) (int_list2)) = reverse (loop (int->bool1) (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int->bool1 : int -> bool
Case1 : int->bool1 (int2) = true
---------------------------------------
(int1::reverse (loop (int->bool1) (int_list2) ((int2::(Nil)))) ((Nil))) = reverse (loop (int->bool1) (int_list2) ((int2::(int1::(Nil))))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int->bool1
case int->bool1 (int2)

Fatal error: exception Failure("not implemented : remove_lower")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Stdlib__List.map in file "list.ml", line 88, characters 14-21
Called from Dilemma__Finder.catch_recursive_pattern in file "lib/finder.ml", lines 600-606, characters 9-20
Called from Dilemma__Finder.pattern_recognition in file "lib/finder.ml", line 887, characters 27-74
Called from Dilemma__Finder.advanced_generalize in file "lib/finder.ml", line 1100, characters 9-64
Called from Dilemma__Finder.make_lemmas_by_advanced_generalize in file "lib/finder.ml", line 1119, characters 16-37
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 143, characters 23-81
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 211, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 26, characters 12-79