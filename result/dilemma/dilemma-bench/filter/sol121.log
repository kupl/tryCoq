Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (pred:int -> bool) (int_list1:int list), filter_ta1 (pred) (int_list1) = filter_sub (pred) (int_list1)(rank : 0.)


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)

---------------------------------------
forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)

---------------------------------------
forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)

---------------------------------------
forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = reverse (loop (int2bool1) (int_list1) ((Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)

---------------------------------------
forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = reverse (loop (int2bool1) (int_list1) ((Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4.)


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int2bool1:int -> bool), filter_ta1 (int2bool1) ((Nil)) = reverse (loop (int2bool1) ((Nil)) ((Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int2bool1:int -> bool), filter_ta1 (int2bool1) ((Nil)) = reverse (loop (int2bool1) ((Nil)) ((Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int2bool1:int -> bool), filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
forall (int2bool1:int -> bool), filter_ta1 (int2bool1) ((int1::int_list2)) = reverse (loop (int2bool1) ((int1::int_list2)) ((Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int2bool1:int -> bool), filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
forall (int2bool1:int -> bool), filter_ta1 (int2bool1) ((int1::int_list2)) = reverse (loop (int2bool1) ((int1::int_list2)) ((Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int2bool1:int -> bool), filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
forall (int2bool1:int -> bool), if int2bool1 (int1) then (int1::filter_ta1 (int2bool1) (int_list2)) else filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) (if int2bool1 (int1) then (int1::(Nil)) else (Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro int2bool1(rank:3.)
=================================================
Progress: 6


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int2bool1:int -> bool), filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
forall (int2bool1:int -> bool), if int2bool1 (int1) then (int1::filter_ta1 (int2bool1) (int_list2)) else filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) (if int2bool1 (int1) then (int1::(Nil)) else (Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> intro int2bool1(rank : 3.)


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int2bool1:int -> bool), filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
int2bool1 : int -> bool
---------------------------------------
if int2bool1 (int1) then (int1::filter_ta1 (int2bool1) (int_list2)) else filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) (if int2bool1 (int1) then (int1::(Nil)) else (Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case int2bool1 (int1)(rank:4.)
=================================================
Progress: 7


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int2bool1:int -> bool), filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
int2bool1 : int -> bool
---------------------------------------
if int2bool1 (int1) then (int1::filter_ta1 (int2bool1) (int_list2)) else filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) (if int2bool1 (int1) then (int1::(Nil)) else (Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> case int2bool1 (int1)(rank : 4.)


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int2bool1:int -> bool), filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
int2bool1 : int -> bool
Case1 : int2bool1 (int1) = true
---------------------------------------
(int1::filter_ta1 (int2bool1) (int_list2)) = reverse (loop (int2bool1) (int_list2) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:4.)
=================================================
Progress: 8


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int2bool1:int -> bool), filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
int2bool1 : int -> bool
Case1 : int2bool1 (int1) = true
---------------------------------------
(int1::filter_ta1 (int2bool1) (int_list2)) = reverse (loop (int2bool1) (int_list2) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 4.)


1st goal of : forall (int2bool1:int -> bool) (int_list1:int list), filter_ta1 (int2bool1) (int_list1) = filter_sub (int2bool1) (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : forall (int2bool1:int -> bool), filter_ta1 (int2bool1) (int_list2) = reverse (loop (int2bool1) (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
int2bool1 : int -> bool
Case1 : int2bool1 (int1) = true
---------------------------------------
(int1::reverse (loop (int2bool1) (int_list2) ((Nil))) ((Nil))) = reverse (loop (int2bool1) (int_list2) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int2bool1
case int2bool1 (int1)
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Fatal error: exception Failure("generator not implemented yet")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", line 92, characters 34-52
Called from Stdlib__List.map in file "list.ml", line 87, characters 15-19
Called from Stdlib__List.init in file "list.ml", line 66, characters 13-16
Called from Dilemma__Validate.validate in file "lib/validate.ml", lines 87-96, characters 4-11
Called from Dilemma__Finder.naive_generalize in file "lib/finder.ml", line 1291, characters 19-63
Called from Dilemma__Finder.advanced_generalize in file "lib/finder.ml", line 1358, characters 37-57
Called from Dilemma__Finder.find_lemma.(fun) in file "lib/finder.ml", line 1388, characters 15-36
Called from Stdlib__List.fold_left in file "list.ml", line 123, characters 24-34
Called from Dilemma__Finder.find_lemma in file "lib/finder.ml", lines 1386-1392, characters 4-12
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 219, characters 30-73
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 283, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
