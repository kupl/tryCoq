Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:int list), max_ta1 (lst) = max (lst)(rank : 0)


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)

---------------------------------------
forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)

---------------------------------------
forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
max_ta1 ((Nil)) = max ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
max_ta1 ((Nil)) = max ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : max_ta1 (int_list2) = max (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
max_ta1 ((int1::int_list2)) = max ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : max_ta1 (int_list2) = max (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
max_ta1 ((int1::int_list2)) = max ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : max_ta1 (int_list2) = max (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
max_ta1 ((int1::int_list2)) = loop (int1) (int_list2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
Fatal error: exception Failure("not implemented : remove_lower")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Stdlib__List.map in file "list.ml", line 88, characters 14-21
Called from Dilemma__Finder.catch_recursive_pattern in file "lib/finder.ml", lines 721-727, characters 9-20
Called from Dilemma__Finder.pattern_recognition in file "lib/finder.ml", line 1069, characters 37-84
Called from Dilemma__Finder.advanced_generalize in file "lib/finder.ml", line 1312, characters 9-65
Called from Dilemma__Finder.find_lemma in file "lib/finder.ml", line 1328, characters 22-43
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 197, characters 12-77
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 291, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
