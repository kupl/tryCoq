Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:int list), max_ta1 (lst) = max (lst)(rank : 0)


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)

---------------------------------------
forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)

---------------------------------------
forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
max_ta1 ((Nil)) = max ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
max_ta1 ((Nil)) = max ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : max_ta1 (int_list2) = max (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
max_ta1 ((int1::int_list2)) = max ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : max_ta1 (int_list2) = max (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
max_ta1 ((int1::int_list2)) = max ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int_list1:int list), max_ta1 (int_list1) = max (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : max_ta1 (int_list2) = max (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
max_ta1 ((int1::int_list2)) = if match (fold (f) (int_list2) (int1), int1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then int1 else if int_eq (int1) (fold (f) (int_list2) (int1)) then int1 else fold (f) (int_list2) (int1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (f:any -> any -> any) (int1:int) (int_list2:int list), max_ta1 ((int1::int_list2)) = if match (fold (f) (int_list2) (int1), int1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then int1 else if int_eq (int1) (fold (f) (int_list2) (int1)) then int1 else fold (f) (int_list2) (int1)
Fatal error: exception Failure("generator not implemented yet")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", line 94, characters 34-52
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", lines 91-96, characters 8-14
Called from Stdlib__List.init in file "list.ml", line 66, characters 13-16
Called from Dilemma__Validate.validate in file "lib/validate.ml", lines 89-100, characters 4-11
Called from Dilemma__Finder.naive_generalize in file "lib/finder.ml", line 1250, characters 16-60
Called from Dilemma__Finder.advanced_generalize in file "lib/finder.ml", line 1324, characters 49-89
Called from Dilemma__Finder.find_lemma in file "lib/finder.ml", line 1338, characters 22-61
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 198, characters 12-86
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 292, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
