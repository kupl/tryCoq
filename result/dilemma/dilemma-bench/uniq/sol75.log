Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:int list), uniq_ta1 (lst) = uniq (lst)(rank : 0)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in IH1(rank:3)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in IH1(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = match (int_list2) with
| Nil  -> (Nil)
| _ -> reverse (finder (int_list2) ((Nil)))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 5


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = match (int_list2) with
| Nil  -> (Nil)
| _ -> reverse (finder (int_list2) ((Nil)))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = match (int_list2) with
| Nil  -> (Nil)
| _ -> reverse (finder (int_list2) ((Nil)))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = reverse (finder (int_list2) ((int1::(Nil))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in IH1
simpl in goal
advanced_generalize done
Lemma : forall (int1:int) (int_list2:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = reverse (finder (int_list2) ((int1::(Nil))))
Model : int1: -0, int_list2: (0::(Nil))
Model : int1: 0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec finder l1 fin =
match (l1) with
| Nil  -> fin
| Cons hd tl -> if bool_eq (checker (fin) (hd)) (true) then finder (tl) (fin) else finder (tl) ((hd::fin))
let uniq lst =
match (lst) with
| Nil  -> (Nil)
| _ -> reverse (finder (lst) ((Nil)))
prop list:
(-0::remove_elem_ta1 (-0) (uniq_ta1 ((0::(Nil))))) = reverse (finder ((0::(Nil))) ((-0::(Nil))))
(0::remove_elem_ta1 (0) (uniq_ta1 ((Nil)))) = reverse (finder ((Nil)) ((0::(Nil))))
(-0::remove_elem_ta1 (-0) (uniq_ta1 ((Nil)))) = reverse (finder ((Nil)) ((-0::(Nil))))
Simplifying took 0.000113 seconds
Result : false
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 288, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
