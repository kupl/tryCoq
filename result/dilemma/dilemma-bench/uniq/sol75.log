Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:int list), uniq_ta1 (lst) = uniq (lst)(rank : 0.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = match (int_list1) with
| Nil -> (Nil)
| _ -> reverse (finder (int_list1) ((Nil)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = match (int_list1) with
| Nil -> (Nil)
| _ -> reverse (finder (int_list1) ((Nil)))

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = match ((Nil)) with
| Nil -> (Nil)
| _ -> reverse (finder ((Nil)) ((Nil)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = match ((Nil)) with
| Nil -> (Nil)
| _ -> reverse (finder ((Nil)) ((Nil)))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = match (int_list2) with
| Nil -> (Nil)
| _ -> reverse (finder (int_list2) ((Nil)))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = match ((int1::int_list2)) with
| Nil -> (Nil)
| _ -> reverse (finder ((int1::int_list2)) ((Nil)))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = match (int_list2) with
| Nil -> (Nil)
| _ -> reverse (finder (int_list2) ((Nil)))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = match ((int1::int_list2)) with
| Nil -> (Nil)
| _ -> reverse (finder ((int1::int_list2)) ((Nil)))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = match (int_list2) with
| Nil -> (Nil)
| _ -> reverse (finder (int_list2) ((Nil)))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = reverse (finder (int_list2) ((int1::(Nil))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:3.)
=================================================
Progress: 6


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = match (int_list2) with
| Nil -> (Nil)
| _ -> reverse (finder (int_list2) ((Nil)))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = reverse (finder (int_list2) ((int1::(Nil))))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = match (int_list2) with
| Nil -> (Nil)
| _ -> reverse (finder (int_list2) ((Nil)))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (match (int_list2) with
| Nil -> (Nil)
| _ -> reverse (finder (int_list2) ((Nil))))) = reverse (finder (int_list2) ((int1::(Nil))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case int_list2(rank:4.)
=================================================
Progress: 7


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = match (int_list2) with
| Nil -> (Nil)
| _ -> reverse (finder (int_list2) ((Nil)))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (match (int_list2) with
| Nil -> (Nil)
| _ -> reverse (finder (int_list2) ((Nil))))) = reverse (finder (int_list2) ((int1::(Nil))))

0 goal(s) more...

0 conjecture(s) more...
>>> case int_list2(rank : 4.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (Nil) = (Nil)
Inductive1 : int_list1 = (int1::(Nil))
Case1 : int_list2 = (Nil)
---------------------------------------
(int1::(Nil)) = (int1::(Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 8


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (Nil) = (Nil)
Inductive1 : int_list1 = (int1::(Nil))
Case1 : int_list2 = (Nil)
---------------------------------------
(int1::(Nil)) = (int1::(Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) = reverse (finder (int_list3) ((int2::(Nil))))
Inductive1 : int_list1 = (int1::(int2::int_list3))
int2 : int
int_list3 : int list
Case1 : int_list2 = (int2::int_list3)
---------------------------------------
(int1::remove_elem_ta1 (int1) (reverse (finder (int_list3) ((int2::(Nil)))))) = reverse (if match (if match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else false, true) with
| (true, true) -> true
| (false, false) -> true
| (_, _) -> false then finder (int_list3) ((int1::(Nil))) else finder (int_list3) ((int2::(int1::(Nil)))))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
case match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:4.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 9


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) = reverse (finder (int_list3) ((int2::(Nil))))
Inductive1 : int_list1 = (int1::(int2::int_list3))
int2 : int
int_list3 : int list
Case1 : int_list2 = (int2::int_list3)
---------------------------------------
(int1::remove_elem_ta1 (int1) (reverse (finder (int_list3) ((int2::(Nil)))))) = reverse (if match (if match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else false, true) with
| (true, true) -> true
| (false, false) -> true
| (_, _) -> false then finder (int_list3) ((int1::(Nil))) else finder (int_list3) ((int2::(int1::(Nil)))))

0 goal(s) more...

0 conjecture(s) more...
>>> case match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 4.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) = reverse (finder (int_list3) ((int2::(Nil))))
Inductive1 : int_list1 = (int1::(int2::int_list3))
int2 : int
int_list3 : int list
Case1 : int_list2 = (int2::int_list3)
Case2 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (reverse (finder (int_list3) ((int2::(Nil)))))) = reverse (finder (int_list3) ((int1::(Nil))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4.)
=================================================
Progress: 10


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) = reverse (finder (int_list3) ((int2::(Nil))))
Inductive1 : int_list1 = (int1::(int2::int_list3))
int2 : int
int_list3 : int list
Case1 : int_list2 = (int2::int_list3)
Case2 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (reverse (finder (int_list3) ((int2::(Nil)))))) = reverse (finder (int_list3) ((int1::(Nil))))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) = reverse (finder (int_list3) ((int2::(Nil))))
Inductive1 : int_list1 = (int1::(int2::int_list3))
int2 : int
int_list3 : int list
Case1 : int_list2 = (int2::int_list3)
Case2 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) ((int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))))) = reverse (finder (int_list3) ((int1::(Nil))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 11


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) = reverse (finder (int_list3) ((int2::(Nil))))
Inductive1 : int_list1 = (int1::(int2::int_list3))
int2 : int
int_list3 : int list
Case1 : int_list2 = (int2::int_list3)
Case2 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) ((int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))))) = reverse (finder (int_list3) ((int1::(Nil))))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) = reverse (finder (int_list3) ((int2::(Nil))))
Inductive1 : int_list1 = (int1::(int2::int_list3))
int2 : int
int_list3 : int list
Case1 : int_list2 = (int2::int_list3)
Case2 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list3))))) = reverse (finder (int_list3) ((int1::(Nil))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case a_eq (int1) (int2)(rank:5.)
=================================================
Progress: 12


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) = reverse (finder (int_list3) ((int2::(Nil))))
Inductive1 : int_list1 = (int1::(int2::int_list3))
int2 : int
int_list3 : int list
Case1 : int_list2 = (int2::int_list3)
Case2 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list3))))) = reverse (finder (int_list3) ((int1::(Nil))))

1 goal(s) more...

0 conjecture(s) more...
>>> case a_eq (int1) (int2)(rank : 5.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) = reverse (finder (int_list3) ((int2::(Nil))))
Inductive1 : int_list1 = (int1::(int2::int_list3))
int2 : int
int_list3 : int list
Case1 : int_list2 = (int2::int_list3)
Case2 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case3 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list3)))) = reverse (finder (int_list3) ((int1::(Nil))))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case int_list2
reflexivity
case match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 0
simpl in goal
case a_eq (int1) (int2)
validate generalize_common_subterm_goal
Prop: (-0::remove_elem_ta1 (-0) (remove_elem_ta1 (0) (uniq_ta1 ((0::(-0::(Nil))))))) = reverse (finder ((0::(-0::(Nil)))) ((-0::(Nil))))
Prop: (0::remove_elem_ta1 (0) (remove_elem_ta1 (0) (uniq_ta1 ((Nil))))) = reverse (finder ((Nil)) ((0::(Nil))))
Prop: (0::remove_elem_ta1 (0) (remove_elem_ta1 (1) (uniq_ta1 ((0::(0::(Nil))))))) = reverse (finder ((0::(0::(Nil)))) ((0::(Nil))))
Lemma List
forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
End of Lemma List


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) = reverse (finder (int_list3) ((int2::(Nil))))
Inductive1 : int_list1 = (int1::(int2::int_list3))
int2 : int
int_list3 : int list
Case1 : int_list2 = (int2::int_list3)
Case2 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case3 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list3)))) = reverse (finder (int_list3) ((int1::(Nil))))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 13


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : (int2::remove_elem_ta1 (int2) (uniq_ta1 (int_list3))) = reverse (finder (int_list3) ((int2::(Nil))))
Inductive1 : int_list1 = (int1::(int2::int_list3))
int2 : int
int_list3 : int list
Case1 : int_list2 = (int2::int_list3)
Case2 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case3 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list3)))) = reverse (finder (int_list3) ((int1::(Nil))))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))(rank : 0.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))

---------------------------------------
forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:9.)
=================================================
Progress: 14


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))

---------------------------------------
forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 9.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
---------------------------------------
forall (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int2(rank:9.)
=================================================
Progress: 15


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
---------------------------------------
forall (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int2(rank : 9.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
---------------------------------------
forall (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 16


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
---------------------------------------
forall (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 17


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
forall (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
---------------------------------------
forall (int_list1:int list), (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:10.)
=================================================
Progress: 18


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
---------------------------------------
forall (int_list1:int list), (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 10.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 ((Nil))))) = reverse (finder ((Nil)) ((int1::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 19


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 ((Nil))))) = reverse (finder ((Nil)) ((int1::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 ((int3::int_list2))))) = reverse (finder ((int3::int_list2)) ((int1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 20


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 ((int3::int_list2))))) = reverse (finder ((int3::int_list2)) ((int1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (if a_eq (int2) (int3) then remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))) else (int3::remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2)))))) = reverse (if match (if match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else false, true) with
| (true, true) -> true
| (false, false) -> true
| (_, _) -> false then finder (int_list2) ((int1::(Nil))) else finder (int_list2) ((int3::(int1::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case a_eq (int2) (int3)(rank:10.)
rewrite <- Cond2 in goal at 0(rank:25.)
rewrite <- Cond2 in goal at 1(rank:25.)
rewrite <- Cond2 in goal at 2(rank:25.)
rewrite <- Cond2 in goal at 3(rank:25.)
case match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:10.)
=================================================
Progress: 21


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (if a_eq (int2) (int3) then remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))) else (int3::remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2)))))) = reverse (if match (if match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else false, true) with
| (true, true) -> true
| (false, false) -> true
| (_, _) -> false then finder (int_list2) ((int1::(Nil))) else finder (int_list2) ((int3::(int1::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
>>> case a_eq (int2) (int3)(rank : 10.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : a_eq (int2) (int3) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))))) = reverse (if match (if match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else false, true) with
| (true, true) -> true
| (false, false) -> true
| (_, _) -> false then finder (int_list2) ((int1::(Nil))) else finder (int_list2) ((int3::(int1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 2(rank:26.)
rewrite <- Cond2 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 1(rank:26.)
rewrite <- Cond2 in goal at 2(rank:26.)
rewrite <- Cond2 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 3(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
=================================================
Progress: 22


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (if a_eq (int2) (int3) then remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))) else (int3::remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2)))))) = reverse (if match (if match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else false, true) with
| (true, true) -> true
| (false, false) -> true
| (_, _) -> false then finder (int_list2) ((int1::(Nil))) else finder (int_list2) ((int3::(int1::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 10.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (if a_eq (int2) (int3) then remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))) else (int3::remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2)))))) = reverse (finder (int_list2) ((int1::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case a_eq (int2) (int3)(rank:11.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 23


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : a_eq (int2) (int3) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))))) = reverse (if match (if match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else false, true) with
| (true, true) -> true
| (false, false) -> true
| (_, _) -> false then finder (int_list2) ((int1::(Nil))) else finder (int_list2) ((int3::(int1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 11.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : a_eq (int2) (int3) = true
Case2 : match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))))) = reverse (finder (int_list2) ((int1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 24


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (if a_eq (int2) (int3) then remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))) else (int3::remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2)))))) = reverse (finder (int_list2) ((int1::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
>>> case a_eq (int2) (int3)(rank : 11.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case2 : a_eq (int2) (int3) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))))) = reverse (finder (int_list2) ((int1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 25


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : a_eq (int2) (int3) = true
Case2 : match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))))) = reverse (finder (int_list2) ((int1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : a_eq (int2) (int3) = true
Case2 : match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))))) = (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case a_eq (int2) (int3)
case match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 0
Prop: (0::remove_elem_ta1 (0) (remove_elem_ta1 (0) (remove_elem_ta1 (2) ((Nil))))) = (0::remove_elem_ta1 (0) (remove_elem_ta1 (0) ((Nil))))
Prop: (0::remove_elem_ta1 (0) (remove_elem_ta1 (0) (remove_elem_ta1 (0) ((Nil))))) = (0::remove_elem_ta1 (0) (remove_elem_ta1 (0) ((Nil))))
Prop: (-0::remove_elem_ta1 (-0) (remove_elem_ta1 (0) (remove_elem_ta1 (0) ((Nil))))) = (-0::remove_elem_ta1 (-0) (remove_elem_ta1 (0) ((Nil))))
previous tactics
simpl in goal
case a_eq (int2) (int3)
case match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
parent
remove_elem_ta1 (int3) (uniq_ta1 (int_list2))
lower
remove_elem_ta1(_, uniq_ta1(int_list2))
upper
Cons(int1, remove_elem_ta1(int1, remove_elem_ta1(int2, _)))
remove upper
uniq_ta1(int_list2)
remove lower
uniq_ta1(int_list2)
remove upper
remove_elem_ta1(int3, uniq_ta1(int_list2))
remove lower
remove_elem_ta1(int3, uniq_ta1(int_list2))
remove upper
_
validate generalize_common_subterm_goal
Prop: (0::remove_elem_ta1 (0) (remove_elem_ta1 (0) (remove_elem_ta1 (0) (uniq_ta1 ((Nil)))))) = reverse (finder ((Nil)) ((0::(Nil))))
Prop: (0::remove_elem_ta1 (0) (remove_elem_ta1 (-0) (remove_elem_ta1 (0) (uniq_ta1 ((-0::(Nil))))))) = reverse (finder ((-0::(Nil))) ((0::(Nil))))
Prop: (0::remove_elem_ta1 (0) (remove_elem_ta1 (0) (remove_elem_ta1 (0) (uniq_ta1 ((Nil)))))) = reverse (finder ((Nil)) ((0::(Nil))))
Lemma List
forall (a_list1:a list) (int1:int) (int2:int) (int3:int), (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (a_list1)))) = (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1)))
End of Lemma List


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : a_eq (int2) (int3) = true
Case2 : match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))))) = (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 26


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = reverse (finder (int_list1) ((int1::(Nil))))
int1 : int
int2 : int
Cond1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = reverse (finder (int_list2) ((int1::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : a_eq (int2) (int3) = true
Case2 : match (int1, int3) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (uniq_ta1 (int_list2))))) = (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (a_list1:a list) (int1:int) (int2:int) (int3:int), (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (a_list1)))) = (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1)))(rank : 0.)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int), (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (a_list1)))) = (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1)))

---------------------------------------
forall (a_list1:a list) (int1:int) (int2:int) (int3:int), (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (remove_elem_ta1 (int3) (a_list1)))) = (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1)))

0 goal(s) more...

2 conjecture(s) more...
Fatal error: exception Invalid_argument("option is None")
Raised at Stdlib.invalid_arg in file "stdlib.ml", line 30, characters 20-45
Called from Stdlib__Option.get in file "option.ml" (inlined), line 21, characters 41-69
Called from Dilemma__Prover.rank_tactics in file "lib/prover.ml", line 1482, characters 32-67
Called from Dilemma__Prover.prune_rank_worklist_update_state_list in file "lib/prover.ml", line 1523, characters 4-65
Called from Dilemma__Engine.progress in file "lib/engine.ml", lines 198-202, characters 9-20
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 283, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
