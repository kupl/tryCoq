Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:int list), uniq_ta1 (lst) = uniq (lst)(rank : 0.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4.)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:3.)
=================================================
Progress: 5


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (int_list2))) = putIn (int_list2) ((int1::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: (0::remove_elem_ta1 (0) (uniq ((0::(Nil))))) = putIn ((0::(Nil))) ((0::(Nil)))
Prop: (0::remove_elem_ta1 (0) (uniq ((0::(Nil))))) = putIn ((0::(Nil))) ((0::(Nil)))
Prop: (0::remove_elem_ta1 (0) (uniq ((0::(Nil))))) = putIn ((0::(Nil))) ((0::(Nil)))
asdf
previous tactics
simpl in goal
parent
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2)))
lower
Cons(_, remove_elem_ta1(int1, uniq_ta1(int_list2)))
upper
_
remove upper
uniq_ta1(int_list2)
remove lower
uniq_ta1(int_list2)
remove upper
Cons(int1, remove_elem_ta1(int1, uniq_ta1(int_list2)))
remove lower
Cons(int1, remove_elem_ta1(int1, uniq_ta1(int_list2)))
remove upper
Cons(int1, _)
remove lower
Cons(int1, _)
remove upper
Cons(int1, _)
remove lower
Cons(int1, _)
parent
(int1::(Nil))
lower
Cons(_, Nil())
upper
putIn(int_list2, _)
remove upper
Cons(int1, Nil())
remove lower
Cons(int1, Nil())
remove upper
_
validate generalize_common_subterm_goal
Prop: (0::remove_elem_ta1 (0) (uniq_ta1 ((Nil)))) = putIn ((Nil)) ((0::(Nil)))
Prop: (-0::remove_elem_ta1 (-0) (uniq_ta1 ((Nil)))) = putIn ((Nil)) ((-0::(Nil)))
Prop: (-0::remove_elem_ta1 (-0) (uniq_ta1 ((Nil)))) = putIn ((Nil)) ((-0::(Nil)))
Lemma List
forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
End of Lemma List


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))(rank : 0.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))

---------------------------------------
forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:6.)
=================================================
Progress: 7


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))

---------------------------------------
forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 6.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 ((Nil)))) = putIn ((Nil)) ((int1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 8


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 ((Nil)))) = putIn ((Nil)) ((int1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 ((int2::int_list2)))) = putIn ((int2::int_list2)) ((int1::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 9


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 ((int2::int_list2)))) = putIn ((int2::int_list2)) ((int1::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))) = putIn (int_list2) (if match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then (int1::(Nil)) else (int1::check (int2) ((Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5.)
=================================================
Progress: 10


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))) = putIn (int_list2) (if match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then (int1::(Nil)) else (int1::check (int2) ((Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))) = putIn (int_list2) (if match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then (int1::(Nil)) else (int1::check (int2) ((Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case a_eq (int1) (int2)(rank:6.)
case match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:6.)
=================================================
Progress: 11


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))) = putIn (int_list2) (if match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then (int1::(Nil)) else (int1::check (int2) ((Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> case a_eq (int1) (int2)(rank : 6.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = putIn (int_list2) (if match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then (int1::(Nil)) else (int1::check (int2) ((Nil))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank:7.)
=================================================
Progress: 12


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))) = putIn (int_list2) (if match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then (int1::(Nil)) else (int1::check (int2) ((Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 6.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))) = putIn (int_list2) ((int1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case a_eq (int1) (int2)(rank:7.)
rewrite <- IH1 in goal at 0(rank:14.)
=================================================
Progress: 13


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = putIn (int_list2) (if match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then (int1::(Nil)) else (int1::check (int2) ((Nil))))

1 goal(s) more...

1 conjecture(s) more...
>>> case match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false(rank : 7.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
Case2 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = putIn (int_list2) ((int1::(Nil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7.)
=================================================
Progress: 14


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))) = putIn (int_list2) ((int1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> case a_eq (int1) (int2)(rank : 7.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
Case2 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = putIn (int_list2) ((int1::(Nil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7.)
=================================================
Progress: 15


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
Case2 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = putIn (int_list2) ((int1::(Nil)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 7.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = putIn (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = putIn (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
Case2 : match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int1
case a_eq (int1) (int2)
case match (int1, int2) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false
rewrite <- IH1 in goal at 0
Fatal error: exception Failure("type not found : a")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Dilemma__Validate.generator in file "lib/validate.ml", line 54, characters 27-85
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", line 92, characters 34-52
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Stdlib__List.init in file "list.ml", line 67, characters 13-20
Called from Dilemma__Validate.validate in file "lib/validate.ml", lines 87-96, characters 4-11
Called from Dilemma__Finder.naive_generalize in file "lib/finder.ml", line 1270, characters 24-60
Called from Dilemma__Finder.advanced_generalize in file "lib/finder.ml", line 1358, characters 37-57
Called from Dilemma__Finder.find_lemma.(fun) in file "lib/finder.ml", line 1388, characters 15-36
Called from Stdlib__List.fold_left in file "list.ml", line 123, characters 24-34
Called from Dilemma__Finder.find_lemma in file "lib/finder.ml", lines 1386-1392, characters 4-12
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 219, characters 30-73
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 283, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
