Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:int list), uniq_ta1 (lst) = uniq (lst)(rank : 0.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4.)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:3.)
=================================================
Progress: 5


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: (0::remove_elem_ta1 (0) (uniq ((Nil)))) = match (rev_aux ((0::(Nil))) ((Nil))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Prop: (0::remove_elem_ta1 (0) (uniq ((-0::(-2::(Nil)))))) = match (rev_aux ((0::(Nil))) ((-0::(-2::(Nil))))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Prop: (0::remove_elem_ta1 (0) (uniq ((Nil)))) = match (rev_aux ((0::(Nil))) ((Nil))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
asdf
previous tactics
simpl in goal
parent
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2)))
lower
Cons(_, remove_elem_ta1(int1, uniq_ta1(int_list2)))
upper
_
remove upper
uniq_ta1(int_list2)
remove lower
uniq_ta1(int_list2)
remove upper
Cons(int1, remove_elem_ta1(int1, uniq_ta1(int_list2)))
remove lower
Cons(int1, remove_elem_ta1(int1, uniq_ta1(int_list2)))
remove upper
Cons(int1, _)
remove lower
Cons(int1, _)
remove upper
Cons(int1, _)
remove lower
Cons(int1, _)
validate generalize_common_subterm_goal
Prop: (-0::remove_elem_ta1 (-0) (uniq_ta1 ((Nil)))) = match (rev_aux ((-0::(Nil))) ((Nil))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Prop: (0::remove_elem_ta1 (0) (uniq_ta1 ((Nil)))) = match (rev_aux ((0::(Nil))) ((Nil))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Prop: (-1::remove_elem_ta1 (-1) (uniq_ta1 ((Nil)))) = match (rev_aux ((-1::(Nil))) ((Nil))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Lemma List
forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
End of Lemma List


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))(rank : 0.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

---------------------------------------
forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:6.)
=================================================
Progress: 7


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

---------------------------------------
forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 6.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 ((Nil)))) = match (rev_aux ((int1::(Nil))) ((Nil))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 8


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 ((Nil)))) = match (rev_aux ((int1::(Nil))) ((Nil))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 ((int2::int_list2)))) = match (rev_aux ((int1::(Nil))) ((int2::int_list2))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 9


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 ((int2::int_list2)))) = match (rev_aux ((int1::(Nil))) ((int2::int_list2))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5.)
=================================================
Progress: 10


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case a_eq (int1) (int2)(rank:6.)
=================================================
Progress: 11


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2))))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
>>> case a_eq (int1) (int2)(rank : 6.)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int1
case a_eq (int1) (int2)
validate generalize_common_subterm_goal
Prop: (0::remove_elem_ta1 (0) (remove_elem_ta1 (-1) (uniq_ta1 ((Nil))))) = match (rev_aux ((-1::(0::(Nil)))) ((Nil))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Prop: (0::remove_elem_ta1 (0) (remove_elem_ta1 (0) (uniq_ta1 ((-0::(Nil)))))) = match (rev_aux ((0::(0::(Nil)))) ((-0::(Nil)))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Prop: (0::remove_elem_ta1 (0) (remove_elem_ta1 (-1) (uniq_ta1 ((Nil))))) = match (rev_aux ((-1::(0::(Nil)))) ((Nil))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Lemma List
forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
End of Lemma List


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 12


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list1))) = match (rev_aux ((int1::(Nil))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = match (rev_aux ((int1::(Nil))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list2)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list2)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))(rank : 0.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

---------------------------------------
forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7.)
=================================================
Progress: 13


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

---------------------------------------
forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
---------------------------------------
forall (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7.)
=================================================
Progress: 14


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
---------------------------------------
forall (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
---------------------------------------
forall (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 15


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
---------------------------------------
forall (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
forall (int_list1:int list), (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:8.)
=================================================
Progress: 16


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
forall (int_list1:int list), (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction int_list1(rank : 8.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 ((Nil))))) = match (rev_aux ((int2::(int1::(Nil)))) ((Nil))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 17


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 ((Nil))))) = match (rev_aux ((int2::(int1::(Nil)))) ((Nil))) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::(Nil)) = if if a_eq (int2) (int1) then true else false then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case a_eq (int2) (int1)(rank:9.)
rewrite <- Cond1 in goal at 0(rank:24.)
=================================================
Progress: 18


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::(Nil)) = if if a_eq (int2) (int1) then true else false then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> case a_eq (int2) (int1)(rank : 9.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = (int1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 19


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = (int1::(Nil))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = false
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
case a_eq (int2) (int1)
reflexivity
validate generalize_common_subterm_goal
Prop: (0::(Nil)) = (0::(-1::(Nil)))
Prop: (0::(Nil)) = (0::(-0::(Nil)))
Prop: (0::(Nil)) = (0::(-0::(Nil)))
Lemma List
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
End of Lemma List


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = false
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 20


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = false
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))(rank : 0.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int1(rank:13.)
=================================================
Progress: 21


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int1(rank : 13.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
---------------------------------------
forall (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int2(rank:13.)
=================================================
Progress: 22


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
---------------------------------------
forall (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int2(rank : 13.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
---------------------------------------
a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 23


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
---------------------------------------
a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 24


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : a_eq (int2) (int1) = false
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: (0::(Nil)) = (0::(-0::(Nil)))
Prop: (-0::(Nil)) = (-0::(0::(Nil)))
Prop: (0::(Nil)) = (0::(-0::(Nil)))
Lemma List
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
End of Lemma List


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : a_eq (int2) (int1) = false
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 25


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : a_eq (int2) (int1) = false
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))(rank : 0.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro int1(rank:15.)
=================================================
Progress: 26


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro int1(rank : 15.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
---------------------------------------
forall (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro int2(rank:15.)
=================================================
Progress: 27


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
---------------------------------------
forall (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro int2(rank : 15.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
---------------------------------------
a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 28


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
---------------------------------------
a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 29


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = false -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : a_eq (int2) (int1) = false
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: (0::(Nil)) = (0::(-0::(Nil)))
Prop: (-0::(Nil)) = (-0::(-0::(Nil)))
Prop: (-0::(Nil)) = (-0::(0::(Nil)))
=================================================
Progress: 30


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::(Nil)) = if if a_eq (int2) (int1) then true else false then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 24.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::(Nil)) = if if a_eq (int2) (int1) then a_eq (int1) (int2) else false then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case a_eq (int2) (int1)(rank:9.)
=================================================
Progress: 31


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::(Nil)) = if if a_eq (int2) (int1) then a_eq (int1) (int2) else false then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> case a_eq (int2) (int1)(rank : 9.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if a_eq (int1) (int2) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9.)
=================================================
Progress: 32


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if a_eq (int1) (int2) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9.)
=================================================
Progress: 33


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if a_eq (int2) (int1) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- Cond1 in goal at 0
case a_eq (int2) (int1)
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: (-0::(Nil)) = if a_eq (0) (-0) then uniq (rev ((-0::(Nil)))) else (uniq (rev ((-0::(Nil)))) @ (0::(Nil)))
Prop: (-0::(Nil)) = if a_eq (0) (-0) then uniq (rev ((-0::(Nil)))) else (uniq (rev ((-0::(Nil)))) @ (0::(Nil)))
Prop: (0::(Nil)) = if a_eq (-0) (0) then uniq (rev ((0::(Nil)))) else (uniq (rev ((0::(Nil)))) @ (-0::(Nil)))
previous tactics
simpl in goal
rewrite <- Cond1 in goal at 0
case a_eq (int2) (int1)
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: (0::(Nil)) = if true then uniq (rev ((0::(Nil)))) else (uniq (rev ((0::(Nil)))) @ (-0::(Nil)))
Prop: (-0::(Nil)) = if true then uniq (rev ((-0::(Nil)))) else (uniq (rev ((-0::(Nil)))) @ (-0::(Nil)))
Prop: (0::(Nil)) = if true then uniq (rev ((0::(Nil)))) else (uniq (rev ((0::(Nil)))) @ (0::(Nil)))
previous tactics
simpl in goal
rewrite <- Cond1 in goal at 0
case a_eq (int2) (int1)
validate generalize_common_subterm_goal
Prop: (-0::(Nil)) = if a_eq (-0) (0) then uniq (rev ((-0::(Nil)))) else (uniq (rev ((-0::(Nil)))) @ (0::(Nil)))
Prop: (0::(Nil)) = if a_eq (0) (1) then uniq (rev ((0::(Nil)))) else (uniq (rev ((0::(Nil)))) @ (1::(Nil)))
Prop: (-1::(Nil)) = if a_eq (-1) (0) then uniq (rev ((-1::(Nil)))) else (uniq (rev ((-1::(Nil)))) @ (0::(Nil)))
Lemma List
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if a_eq (int1) (int2) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))
End of Lemma List


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if a_eq (int1) (int2) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))
End of Lemma List


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if a_eq (int2) (int1) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))
End of Lemma List


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if a_eq (int2) (int1) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 34


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if a_eq (int1) (int2) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if a_eq (int1) (int2) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))(rank : 0.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if a_eq (int1) (int2) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if a_eq (int1) (int2) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int1(rank:13.)
=================================================
Progress: 35


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))(rank : 0.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 36


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if a_eq (int2) (int1) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if a_eq (int2) (int1) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))(rank : 0.)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if a_eq (int2) (int1) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if a_eq (int2) (int1) then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int1(rank:13.)
=================================================
Progress: 37


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
original goal
forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
lemma
forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))
tactics
assert forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))
reflexivity
Deduplication: 0
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 38


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = true
---------------------------------------
(int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq_ta1 (int_list1)))) = match (rev_aux ((int2::(int1::(Nil)))) (int_list1)) with
| Nil -> (Nil)
| Cons hd tl -> if find (hd) (tl) then uniq (rev (tl)) else (uniq (rev (tl)) @ (hd::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
Case1 : a_eq (int2) (int1) = false
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 0
previous tactics
simpl in goal
rewrite <- Cond1 in goal at 0
case a_eq (int2) (int1)
rewrite Cond1 in goal at 0
assert forall (int1:int) (int2:int), a_eq (int1) (int2) = true->a_eq (int2) (int1) = true -> (int1::(Nil)) = if true then uniq (rev ((int1::(Nil)))) else (uniq (rev ((int1::(Nil)))) @ (int2::(Nil)))
reflexivity
reflexivity
validate generalize_common_subterm_goal
Prop: (0::(Nil)) = (0::(0::(Nil)))
Prop: (0::(Nil)) = (0::(0::(Nil)))
Prop: (-0::(Nil)) = (-0::(0::(Nil)))
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 283, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
