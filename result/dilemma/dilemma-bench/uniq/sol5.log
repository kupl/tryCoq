Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:int list), uniq_ta1 (lst) = uniq (lst)(rank : 0.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4.)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = if chk (int_list2) (int1) then (int1::uniq (int_list2)) else (int1::uniq (del (int_list2) (int1)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case chk (int_list2) (int1)(rank:4.)
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 5


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = if chk (int_list2) (int1) then (int1::uniq (int_list2)) else (int1::uniq (del (int_list2) (int1)))

0 goal(s) more...

0 conjecture(s) more...
>>> case chk (int_list2) (int1)(rank : 4.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
Case1 : chk (int_list2) (int1) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = (int1::uniq (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:12.)
rewrite <- IH1 in goal at 0(rank:12.)
=================================================
Progress: 6


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
Case1 : chk (int_list2) (int1) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = (int1::uniq (int_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
Case1 : chk (int_list2) (int1) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case chk (int_list2) (int1)
rewrite IH1 in goal at 0
Prop: (2::remove_elem_ta1 (2) ((Nil))) = (2::(Nil))
Prop: (0::remove_elem_ta1 (0) ((Nil))) = (0::(Nil))
Prop: (0::remove_elem_ta1 (0) ((Nil))) = (0::(Nil))
previous tactics
simpl in goal
case chk (int_list2) (int1)
parent
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2)))
lower
Cons(_, remove_elem_ta1(int1, uniq_ta1(int_list2)))
upper
_
remove upper
uniq_ta1(int_list2)
remove lower
uniq_ta1(int_list2)
remove upper
Cons(int1, remove_elem_ta1(int1, uniq_ta1(int_list2)))
remove lower
Cons(int1, remove_elem_ta1(int1, uniq_ta1(int_list2)))
remove upper
Cons(int1, _)
remove lower
Cons(int1, _)
remove upper
Cons(int1, _)
remove lower
Cons(int1, _)
parent
(int1::uniq (int_list2))
lower
Cons(_, uniq(int_list2))
upper
_
remove upper
uniq(int_list2)
remove lower
uniq(int_list2)
remove upper
Cons(int1, uniq(int_list2))
remove lower
Cons(int1, uniq(int_list2))
remove upper
Cons(int1, _)
remove lower
Cons(int1, _)
remove upper
Cons(int1, _)
remove lower
Cons(int1, _)
validate generalize_common_subterm_goal
Prop: (0::remove_elem_ta1 (0) (uniq_ta1 ((Nil)))) = (0::uniq ((Nil)))
Prop: (-0::remove_elem_ta1 (-0) (uniq_ta1 ((0::(Nil))))) = (-0::uniq ((0::(Nil))))
Prop: (0::remove_elem_ta1 (0) (uniq_ta1 ((0::(Nil))))) = (0::uniq ((0::(Nil))))
asdf
Lemma List
forall (a_list1:a list) (int1:int), (int1::remove_elem_ta1 (int1) (a_list1)) = (int1::a_list1)
End of Lemma List


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
Case1 : chk (int_list2) (int1) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (int_list2))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 7


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
Case1 : chk (int_list2) (int1) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (int_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (a_list1:a list) (int1:int), (int1::remove_elem_ta1 (int1) (a_list1)) = (int1::a_list1)(rank : 0.)


1st goal of : forall (a_list1:a list) (int1:int), (int1::remove_elem_ta1 (int1) (a_list1)) = (int1::a_list1)

---------------------------------------
forall (a_list1:a list) (int1:int), (int1::remove_elem_ta1 (int1) (a_list1)) = (int1::a_list1)

0 goal(s) more...

1 conjecture(s) more...
Fatal error: exception Invalid_argument("option is None")
Raised at Stdlib.invalid_arg in file "stdlib.ml", line 30, characters 20-45
Called from Stdlib__Option.get in file "option.ml" (inlined), line 21, characters 41-69
Called from Dilemma__Prover.rank_tactics in file "lib/prover.ml", line 1390, characters 32-67
Called from Dilemma__Prover.prune_rank_worklist_update_state_list in file "lib/prover.ml", line 1421, characters 4-65
Called from Dilemma__Engine.progress in file "lib/engine.ml", lines 198-202, characters 9-20
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 284, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
