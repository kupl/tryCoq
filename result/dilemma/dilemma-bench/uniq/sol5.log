Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:int list), uniq_ta1 (lst) = uniq (lst)(rank : 0)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = if chk (int_list2) (int1) then (int1::uniq (int_list2)) else (int1::uniq (del (int_list2) (int1)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case chk (int_list2) (int1)(rank:4)
rewrite IH1 in goal at 0(rank:19)
rewrite <- IH1 in goal at 0(rank:19)
=================================================
Progress: 5


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = if chk (int_list2) (int1) then (int1::uniq (int_list2)) else (int1::uniq (del (int_list2) (int1)))

0 goal(s) more...

0 conjecture(s) more...
>>> case chk (int_list2) (int1)(rank : 4)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
Case1 : chk (int_list2) (int1) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = (int1::uniq (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:12)
rewrite <- IH1 in goal at 0(rank:12)
=================================================
Progress: 6


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
Case1 : chk (int_list2) (int1) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = (int1::uniq (int_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
Case1 : chk (int_list2) (int1) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (int_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case chk (int_list2) (int1)
rewrite IH1 in goal at 0
advanced_generalize done
Lemma : forall (arg1:a list) (int1:int) (int_list2:int list), chk (int_list2) (int1) = true -> (int1::remove_elem_ta1 (int1) (arg1)) = (int1::arg1)
Model : arg1: (Nil), int1: 0, int_list2: (Nil)
Fatal error: exception Failure("type not found : a")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Dilemma__Validate.generator in file "lib/validate.ml", line 54, characters 27-85
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", line 94, characters 34-52
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", lines 91-96, characters 8-14
Called from Stdlib__List.init in file "list.ml", line 67, characters 13-20
Called from Dilemma__Validate.validate in file "lib/validate.ml", lines 89-100, characters 4-11
Called from Dilemma__Finder.make_lemmas_by_advanced_generalize.(fun) in file "lib/finder.ml", line 1312, characters 38-73
Called from Stdlib__List.find_all in file "list.ml", line 265, characters 17-20
Called from Dilemma__Finder.make_lemmas_by_advanced_generalize in file "lib/finder.ml", line 1312, characters 8-81
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 128, characters 23-81
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 196, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
