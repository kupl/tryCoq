Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:int list), uniq_ta1 (lst) = uniq (lst)(rank : 0)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = reverse (checkdrop (int_list1) ((Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = reverse (checkdrop (int_list1) ((Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = reverse (checkdrop ((Nil)) ((Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = reverse (checkdrop ((Nil)) ((Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = reverse (checkdrop (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = reverse (checkdrop ((int1::int_list2)) ((Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 5


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = reverse (checkdrop (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = reverse (checkdrop ((int1::int_list2)) ((Nil))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = reverse (checkdrop (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:3)
=================================================
Progress: 6


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = reverse (checkdrop (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = reverse (checkdrop (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int_list2:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec checkdrop lt l =
match (lt) with
| Nil -> l
| Cons hd tl -> if gtl (hd) (l) then checkdrop (tl) (l) else checkdrop (tl) ((hd::l))
let uniq lst =
reverse (checkdrop (lst) ((Nil))) ((Nil))
prop list:
(0::remove_elem_ta1 (0) (reverse (checkdrop ((Nil)) ((Nil))) ((Nil)))) = reverse (checkdrop ((Nil)) ((0::(Nil)))) ((Nil))
(0::remove_elem_ta1 (0) (reverse (checkdrop ((Nil)) ((Nil))) ((Nil)))) = reverse (checkdrop ((Nil)) ((0::(Nil)))) ((Nil))
(0::remove_elem_ta1 (0) (reverse (checkdrop ((Nil)) ((Nil))) ((Nil)))) = reverse (checkdrop ((Nil)) ((0::(Nil)))) ((Nil))
Simplifying took 0.000080 seconds
Result : true
advanced_generalize done


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = reverse (checkdrop (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 7


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = reverse (checkdrop (int_list2) ((Nil))) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (int1:int) (int_list2:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))(rank : 0)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))

---------------------------------------
forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:6)
=================================================
Progress: 8


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))

---------------------------------------
forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 6)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop ((Nil)) ((Nil))) ((Nil)))) = reverse (checkdrop ((Nil)) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 9


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop ((Nil)) ((Nil))) ((Nil)))) = reverse (checkdrop ((Nil)) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop ((int2::int_list2)) ((Nil))) ((Nil)))) = reverse (checkdrop ((int2::int_list2)) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 10


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop ((int2::int_list2)) ((Nil))) ((Nil)))) = reverse (checkdrop ((int2::int_list2)) ((int1::(Nil)))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((int2::(Nil)))) ((Nil)))) = reverse (if if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) then checkdrop (int_list2) ((int1::(Nil))) else checkdrop (int_list2) ((int2::(int1::(Nil))))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5)
=================================================
Progress: 11


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((int2::(Nil)))) ((Nil)))) = reverse (if if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) then checkdrop (int_list2) ((int1::(Nil))) else checkdrop (int_list2) ((int2::(int1::(Nil))))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((int2::(Nil)))) ((Nil)))) = reverse (if if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) then checkdrop (int_list2) ((int1::(Nil))) else checkdrop (int_list2) ((int2::(int1::(Nil))))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil))(rank:6)
rewrite <- IH1 in goal at 0(rank:13)
=================================================
Progress: 12


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((int2::(Nil)))) ((Nil)))) = reverse (if if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) then checkdrop (int_list2) ((int1::(Nil))) else checkdrop (int_list2) ((int2::(int1::(Nil))))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> case if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil))(rank : 6)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((int2::(Nil)))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 1(rank:22)
rewrite <- IH1 in goal at 2(rank:14)
=================================================
Progress: 13


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((int2::(Nil)))) ((Nil)))) = reverse (if if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) then checkdrop (int_list2) ((int1::(Nil))) else checkdrop (int_list2) ((int2::(int1::(Nil))))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::remove_elem_ta1 (int1) ((int2::remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))))) = reverse (if if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) then checkdrop (int_list2) ((int1::(Nil))) else checkdrop (int_list2) ((int2::(int1::(Nil))))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 14


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::remove_elem_ta1 (int1) ((int2::remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))))) = reverse (if if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) then checkdrop (int_list2) ((int1::(Nil))) else checkdrop (int_list2) ((int2::(int1::(Nil))))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))))) = reverse (if if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) then checkdrop (int_list2) ((int1::(Nil))) else checkdrop (int_list2) ((int2::(int1::(Nil))))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case a_eq (int1) (int2)(rank:6)
=================================================
Progress: 15


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))))) = reverse (if if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) then checkdrop (int_list2) ((int1::(Nil))) else checkdrop (int_list2) ((int2::(int1::(Nil))))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> case a_eq (int1) (int2)(rank : 6)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil))))) = reverse (if if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) then checkdrop (int_list2) ((int1::(Nil))) else checkdrop (int_list2) ((int2::(int1::(Nil))))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil))(rank:7)
rewrite <- Case1 in goal at 0(rank:22)
=================================================
Progress: 16


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil))))) = reverse (if if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) then checkdrop (int_list2) ((int1::(Nil))) else checkdrop (int_list2) ((int2::(int1::(Nil))))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> case if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil))(rank : 7)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
Case2 : if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil))))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7)
=================================================
Progress: 17


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
Case2 : if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil))))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 7)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
Case2 : if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil))))) = (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int1
rewrite <- IH1 in goal at 0
simpl in goal
case a_eq (int1) (int2)
case if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (arg1))) = (int1::remove_elem_ta1 (int1) (arg1))
Model : arg1: (Nil), int1: 0, int2: 0
Model : arg1: (Nil), int1: 0, int2: 0
Model : arg1: (Nil), int1: 0, int2: -0
Substituting variables...
Simplifying conditions and property...
let rec checkdrop lt l =
match (lt) with
| Nil -> l
| Cons hd tl -> if gtl (hd) (l) then checkdrop (tl) (l) else checkdrop (tl) ((hd::l))
let uniq lst =
reverse (checkdrop (lst) ((Nil))) ((Nil))
prop list:
(0::remove_elem_ta1 (0) (remove_elem_ta1 (0) ((Nil)))) = (0::remove_elem_ta1 (0) ((Nil)))
(0::remove_elem_ta1 (0) (remove_elem_ta1 (0) ((Nil)))) = (0::remove_elem_ta1 (0) ((Nil)))
(0::remove_elem_ta1 (0) (remove_elem_ta1 (-0) ((Nil)))) = (0::remove_elem_ta1 (0) ((Nil)))
Simplifying took 0.000061 seconds
Result : true
advanced_generalize done


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
Case2 : if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil))))) = (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil))))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 18


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list1) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list1) ((int1::(Nil)))) ((Nil))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil)))) = reverse (checkdrop (int_list2) ((int1::(Nil)))) ((Nil))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
Case2 : if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (reverse (checkdrop (int_list2) ((Nil))) ((Nil))))) = (int1::remove_elem_ta1 (int1) (reverse (checkdrop (int_list2) ((Nil))) ((Nil))))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (arg1))) = (int1::remove_elem_ta1 (int1) (arg1))(rank : 0)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

---------------------------------------
forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 19


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

---------------------------------------
forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
---------------------------------------
forall (a_list1:a list) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 20


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
---------------------------------------
forall (a_list1:a list) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
int2 : int
---------------------------------------
forall (a_list1:a list), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 21


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
int2 : int
---------------------------------------
forall (a_list1:a list), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
forall (a_list1:a list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 22


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
forall (a_list1:a list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true
---------------------------------------
forall (a_list1:a list), (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
Model : a_list1: (Nil), int1: -0, int2: 0
Model : a_list1: (Nil), int1: -0, int2: -0
Model : a_list1: (Nil), int1: 0, int2: 0
Substituting variables...
Simplifying conditions and property...
let rec checkdrop lt l =
match (lt) with
| Nil -> l
| Cons hd tl -> if gtl (hd) (l) then checkdrop (tl) (l) else checkdrop (tl) ((hd::l))
let uniq lst =
reverse (checkdrop (lst) ((Nil))) ((Nil))
prop list:
(-0::remove_elem_ta1 (-0) (remove_elem_ta1 (0) ((Nil)))) = (-0::remove_elem_ta1 (-0) ((Nil)))
(-0::remove_elem_ta1 (-0) (remove_elem_ta1 (-0) ((Nil)))) = (-0::remove_elem_ta1 (-0) ((Nil)))
(0::remove_elem_ta1 (0) (remove_elem_ta1 (0) ((Nil)))) = (0::remove_elem_ta1 (0) ((Nil)))
Simplifying took 0.000084 seconds
Result : true
advanced_generalize done


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true
---------------------------------------
forall (a_list1:a list), (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 23


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true
---------------------------------------
forall (a_list1:a list), (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))(rank : 0)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

---------------------------------------
forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int1(rank:9)
=================================================
Progress: 24


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

---------------------------------------
forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int1(rank : 9)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
---------------------------------------
forall (a_list1:a list) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int2(rank:9)
=================================================
Progress: 25


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
---------------------------------------
forall (a_list1:a list) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int2(rank : 9)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
int2 : int
---------------------------------------
forall (a_list1:a list), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 26


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
int2 : int
---------------------------------------
forall (a_list1:a list), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
forall (a_list1:a list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9)
=================================================
Progress: 27


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
forall (a_list1:a list), if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true
---------------------------------------
forall (a_list1:a list), (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Lemma : forall (a_list1:a list) (int1:int) (int2:int), a_eq (int1) (int2) = true->if match (int2, int1) with
| (Zero, Zero) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero, Pos Z) -> true
| (Zero, Neg Z) -> true
| (Pos Z, Zero) -> true
| (Neg Z, Zero) -> true
| (_, _) -> false then true else gtl (int2) ((Nil)) = true -> (int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1))) = (int1::remove_elem_ta1 (int1) (a_list1))
Fatal error: exception Failure("type not found : a")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Dilemma__Validate.generator in file "lib/validate.ml", line 54, characters 27-85
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", line 94, characters 34-52
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", lines 91-96, characters 8-14
Called from Stdlib__List.init in file "list.ml", line 66, characters 13-16
Called from Dilemma__Validate.validate in file "lib/validate.ml", lines 89-100, characters 4-11
Called from Dilemma__Finder.naive_generalize in file "lib/finder.ml", line 1250, characters 16-60
Called from Dilemma__Finder.advanced_generalize in file "lib/finder.ml", line 1316, characters 50-90
Called from Dilemma__Finder.find_lemma in file "lib/finder.ml", line 1338, characters 22-61
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 198, characters 12-86
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 292, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
