Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:int list), uniq_ta1 (lst) = uniq (lst)(rank : 0)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq4 (int_list1) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq4 (int_list1) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq4 ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq4 ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq4 (int_list2) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq4 ((int1::int_list2)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 5


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq4 (int_list2) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq4 ((int1::int_list2)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq4 (int_list2) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = uniq4 (int_list2) ((int1::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:3)
=================================================
Progress: 6


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq4 (int_list2) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = uniq4 (int_list2) ((int1::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq4 (int_list2) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int_list2:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Model : int1: 0, int_list2: (Nil)
Model : int1: -0, int_list2: (Nil)
Model : int1: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec uniq4 lst1 lst2 =
match (lst1) with
| Nil -> lst2
| Cons hd tl -> if isnotin (lst2) (hd) then uniq4 (tl) ((lst2 @ (hd::(Nil)))) else uniq4 (tl) (lst2)
let uniq lst =
uniq4 (lst) ((Nil))
prop list:
(0::remove_elem_ta1 (0) (uniq4 ((Nil)) ((Nil)))) = uniq4 ((Nil)) ((0::(Nil)))
(-0::remove_elem_ta1 (-0) (uniq4 ((Nil)) ((Nil)))) = uniq4 ((Nil)) ((-0::(Nil)))
(0::remove_elem_ta1 (0) (uniq4 ((Nil)) ((Nil)))) = uniq4 ((Nil)) ((0::(Nil)))
Simplifying took 0.000045 seconds
Result : true
advanced_generalize done


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq4 (int_list2) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 7


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq4 (int_list2) ((Nil))
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (int1:int) (int_list2:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))(rank : 0)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))

---------------------------------------
forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:6)
=================================================
Progress: 8


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))

---------------------------------------
forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 6)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 ((Nil)) ((Nil)))) = uniq4 ((Nil)) ((int1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 9


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 ((Nil)) ((Nil)))) = uniq4 ((Nil)) ((int1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 ((int2::int_list2)) ((Nil)))) = uniq4 ((int2::int_list2)) ((int1::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 10


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 ((int2::int_list2)) ((Nil)))) = uniq4 ((int2::int_list2)) ((int1::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((int2::(Nil))))) = if if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2) then uniq4 (int_list2) (((int1::(Nil)) @ (int2::(Nil)))) else uniq4 (int_list2) ((int1::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5)
=================================================
Progress: 11


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((int2::(Nil))))) = if if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2) then uniq4 (int_list2) (((int1::(Nil)) @ (int2::(Nil)))) else uniq4 (int_list2) ((int1::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((int2::(Nil))))) = if if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2) then uniq4 (int_list2) (((int1::(Nil)) @ (int2::(Nil)))) else uniq4 (int_list2) ((int1::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2)(rank:6)
rewrite <- IH1 in goal at 2(rank:21)
rewrite <- IH1 in goal at 1(rank:13)
rewrite <- IH1 in goal at 0(rank:21)
=================================================
Progress: 12


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((int2::(Nil))))) = if if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2) then uniq4 (int_list2) (((int1::(Nil)) @ (int2::(Nil)))) else uniq4 (int_list2) ((int1::(Nil)))

0 goal(s) more...

1 conjecture(s) more...
>>> case if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2)(rank : 6)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((int2::(Nil))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:6)
=================================================
Progress: 13


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((int2::(Nil))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 6)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) ((int2::remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 14


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) ((int2::remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2) = true
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case a_eq (int1) (int2)(rank:7)
=================================================
Progress: 15


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2) = true
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))) else (int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
>>> case a_eq (int1) (int2)(rank : 7)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : false = true
Case2 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:6)
=================================================
Progress: 16


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : false = true
Case2 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 6)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : true = true
Case2 : a_eq (int1) (int2) = false
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
intro int1
case if a_eq (int1) (int2) then false else isnotin ((Nil)) (int2)
rewrite <- IH1 in goal at 0
simpl in goal
case a_eq (int1) (int2)
discriminate
validate generalize_common_subterm_goal
Lemma : forall (int1:int) (int2:int) (int_list2:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))
Model : int1: 0, int2: 0, int_list2: (Nil)
Model : int1: -0, int2: 0, int_list2: (-0::(Nil))
Model : int1: 0, int2: 0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec uniq4 lst1 lst2 =
match (lst1) with
| Nil -> lst2
| Cons hd tl -> if isnotin (lst2) (hd) then uniq4 (tl) ((lst2 @ (hd::(Nil)))) else uniq4 (tl) (lst2)
let uniq lst =
uniq4 (lst) ((Nil))
prop list:
(0::(0::remove_elem_ta1 (0) (remove_elem_ta1 (0) (uniq4 ((Nil)) ((Nil)))))) = uniq4 ((Nil)) ((0::(0::(Nil))))
(-0::(0::remove_elem_ta1 (-0) (remove_elem_ta1 (0) (uniq4 ((-0::(Nil))) ((Nil)))))) = uniq4 ((-0::(Nil))) ((-0::(0::(Nil))))
(0::(0::remove_elem_ta1 (0) (remove_elem_ta1 (0) (uniq4 ((Nil)) ((Nil)))))) = uniq4 ((Nil)) ((0::(0::(Nil))))
Simplifying took 0.000097 seconds
Result : true
advanced_generalize done


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : true = true
Case2 : a_eq (int1) (int2) = false
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 17


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq4 (int_list1) ((Nil)))) = uniq4 (int_list1) ((int1::(Nil)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq4 (int_list2) ((Nil)))) = uniq4 (int_list2) ((int1::(Nil)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : true = true
Case2 : a_eq (int1) (int2) = false
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (int1:int) (int2:int) (int_list2:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))(rank : 0)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))

---------------------------------------
forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 18


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))

---------------------------------------
forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
---------------------------------------
forall (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 19


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
---------------------------------------
forall (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
---------------------------------------
forall (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 20


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
---------------------------------------
forall (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
---------------------------------------
forall (int_list1:int list), a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 21


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
---------------------------------------
forall (int_list1:int list), a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
---------------------------------------
forall (int_list1:int list), (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:8)
=================================================
Progress: 22


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
---------------------------------------
forall (int_list1:int list), (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> induction int_list1(rank : 8)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 ((Nil)) ((Nil)))))) = uniq4 ((Nil)) ((int1::(int2::(Nil))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 23


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 ((Nil)) ((Nil)))))) = uniq4 ((Nil)) ((int1::(int2::(Nil))))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 ((int3::int_list2)) ((Nil)))))) = uniq4 ((int3::int_list2)) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 24


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 ((int3::int_list2)) ((Nil)))))) = uniq4 ((int3::int_list2)) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((int3::(Nil))))))) = if if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) then uniq4 (int_list2) (((int1::(int2::(Nil))) @ (int3::(Nil)))) else uniq4 (int_list2) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3)(rank:8)
rewrite <- Cond2 in goal at 0(rank:23)
rewrite <- IH1 in goal at 0(rank:23)
=================================================
Progress: 25


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((int3::(Nil))))))) = if if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) then uniq4 (int_list2) (((int1::(int2::(Nil))) @ (int3::(Nil)))) else uniq4 (int_list2) ((int1::(int2::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> case if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3)(rank : 8)


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((int3::(Nil))))))) = uniq4 (int_list2) ((int1::(int2::(int3::(Nil)))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3)
validate generalize_common_subterm_goal
Lemma : forall (arg1:a list) (int1:int) (int2:int) (int3:int) (int_list2:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) (arg1))))) = uniq4 (int_list2) ((int1::(int2::arg1)))
Model : arg1: (Nil), int1: 0, int2: 1, int3: 0, int_list2: (Nil)
Model : arg1: (Nil), int1: -0, int2: 0, int3: 0, int_list2: (-0::(Nil))
Model : arg1: (Nil), int1: 1, int2: 0, int3: -0, int_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec uniq4 lst1 lst2 =
match (lst1) with
| Nil -> lst2
| Cons hd tl -> if isnotin (lst2) (hd) then uniq4 (tl) ((lst2 @ (hd::(Nil)))) else uniq4 (tl) (lst2)
let uniq lst =
uniq4 (lst) ((Nil))
prop list:
(0::(1::remove_elem_ta1 (0) (remove_elem_ta1 (1) (uniq4 ((Nil)) ((Nil)))))) = uniq4 ((Nil)) ((0::(1::(Nil))))
(-0::(0::remove_elem_ta1 (-0) (remove_elem_ta1 (0) (uniq4 ((-0::(Nil))) ((Nil)))))) = uniq4 ((-0::(Nil))) ((-0::(0::(Nil))))
(1::(0::remove_elem_ta1 (1) (remove_elem_ta1 (0) (uniq4 ((Nil)) ((Nil)))))) = uniq4 ((Nil)) ((1::(0::(Nil))))
Simplifying took 0.000127 seconds
Result : true
advanced_generalize done


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((int3::(Nil))))))) = uniq4 (int_list2) ((int1::(int2::(int3::(Nil)))))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 26


1st goal of : forall (int1:int) (int2:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) ((Nil)))))) = uniq4 (int_list1) ((int1::(int2::(Nil))))
int1 : int
int2 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
int_list1 : int list
int3 : int
int_list2 : int list
IH1 : (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((Nil)))))) = uniq4 (int_list2) ((int1::(int2::(Nil))))
Inductive1 : int_list1 = (int3::int_list2)
Case1 : if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) ((int3::(Nil))))))) = uniq4 (int_list2) ((int1::(int2::(int3::(Nil)))))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (arg1:a list) (int1:int) (int2:int) (int3:int) (int_list2:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list2) (arg1))))) = uniq4 (int_list2) ((int1::(int2::arg1)))(rank : 0)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

---------------------------------------
forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro a_list1(rank:9)
=================================================
Progress: 27


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

---------------------------------------
forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro a_list1(rank : 9)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
---------------------------------------
forall (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int1(rank:9)
=================================================
Progress: 28


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
---------------------------------------
forall (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int1(rank : 9)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
---------------------------------------
forall (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int2(rank:9)
=================================================
Progress: 29


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
---------------------------------------
forall (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int2(rank : 9)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
---------------------------------------
forall (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int3(rank:9)
=================================================
Progress: 30


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
---------------------------------------
forall (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int3(rank : 9)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
int3 : int
---------------------------------------
forall (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 31


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
int3 : int
---------------------------------------
forall (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
int3 : int
Cond1 : true = true
---------------------------------------
forall (int_list1:int list), a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9)
=================================================
Progress: 32


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
int3 : int
Cond1 : true = true
---------------------------------------
forall (int_list1:int list), a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
int3 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
---------------------------------------
forall (int_list1:int list), if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9)
=================================================
Progress: 33


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
int3 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
---------------------------------------
forall (int_list1:int list), if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
int3 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
Cond3 : if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true
---------------------------------------
forall (int_list1:int list), (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:10)
=================================================
Progress: 34


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
int3 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
Cond3 : if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true
---------------------------------------
forall (int_list1:int list), (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction int_list1(rank : 10)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
int3 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
Cond3 : if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 ((Nil)) (a_list1))))) = uniq4 ((Nil)) ((int1::(int2::a_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 35


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
int3 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
Cond3 : if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 ((Nil)) (a_list1))))) = uniq4 ((Nil)) ((int1::(int2::a_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (a_list1:a list) (int1:int) (int2:int) (int3:int) (int_list1:int list), true = true->a_eq (int1) (int2) = false->if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (uniq4 (int_list1) (a_list1))))) = uniq4 (int_list1) ((int1::(int2::a_list1)))
a_list1 : a list
int1 : int
int2 : int
int3 : int
Cond1 : true = true
Cond2 : a_eq (int1) (int2) = false
Cond3 : if a_eq (int1) (int3) then false else isnotin ((int2::(Nil))) (int3) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
(int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1)))) = (int1::(int2::a_list1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (a_list1:a list) (int1:int) (int2:int), true = true->a_eq (int1) (int2) = false -> (int1::(int2::remove_elem_ta1 (int1) (remove_elem_ta1 (int2) (a_list1)))) = (int1::(int2::a_list1))
Model : a_list1: (Nil), int1: 0, int2: -0
Model : a_list1: (Nil), int1: 0, int2: 0
Fatal error: exception Failure("type not found : a")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Dilemma__Validate.generator in file "lib/validate.ml", line 54, characters 27-85
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", line 94, characters 34-52
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", lines 91-96, characters 8-14
Called from Stdlib__List.init in file "list.ml", line 64, characters 25-28
Called from Stdlib__List.init in file "list.ml", line 68, characters 16-33
Called from Dilemma__Validate.validate in file "lib/validate.ml", lines 89-100, characters 4-11
Called from Dilemma__Finder.naive_generalize in file "lib/finder.ml", line 1250, characters 16-60
Called from Dilemma__Finder.advanced_generalize in file "lib/finder.ml", line 1316, characters 50-90
Called from Dilemma__Finder.find_lemma in file "lib/finder.ml", line 1338, characters 22-61
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 198, characters 12-86
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 292, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
