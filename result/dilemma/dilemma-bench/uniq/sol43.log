Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:int list), uniq_ta1 (lst) = uniq (lst)(rank : 0)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

---------------------------------------
forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
uniq_ta1 ((Nil)) = uniq ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
uniq_ta1 ((int1::int_list2)) = uniq ((int1::int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:3)
=================================================
Progress: 5


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq_ta1 (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 3)


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
New Env

;;
Lemma List
forall (int1:int) (int_list2:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
End of Lemma List


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (int_list1:int list), uniq_ta1 (int_list1) = uniq (int_list1)
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : uniq_ta1 (int_list2) = uniq (int_list2)
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (int1:int) (int_list2:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))(rank : 0)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))

---------------------------------------
forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:6)
=================================================
Progress: 7


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))

---------------------------------------
forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction int_list1(rank : 6)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq ((Nil)))) = (int1::uniq (filter (noteq (int1)) ((Nil))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 8


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq ((Nil)))) = (int1::uniq (filter (noteq (int1)) ((Nil))))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq ((int2::int_list2)))) = (int1::uniq (filter (noteq (int1)) ((int2::int_list2))))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 9


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq ((int2::int_list2)))) = (int1::uniq (filter (noteq (int1)) ((int2::int_list2))))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))) else (int2::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))))) = (int1::uniq (if <> (int1) (int2) then (int2::filter (noteq (int1)) (int_list2)) else filter (noteq (int1)) (int_list2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5)
=================================================
Progress: 10


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
---------------------------------------
forall (int1:int), (int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))) else (int2::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))))) = (int1::uniq (if <> (int1) (int2) then (int2::filter (noteq (int1)) (int_list2)) else filter (noteq (int1)) (int_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))) else (int2::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))))) = (int1::uniq (if <> (int1) (int2) then (int2::filter (noteq (int1)) (int_list2)) else filter (noteq (int1)) (int_list2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case <> (int1) (int2)(rank:6)
case a_eq (int1) (int2)(rank:6)
=================================================
Progress: 11


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))) else (int2::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))))) = (int1::uniq (if <> (int1) (int2) then (int2::filter (noteq (int1)) (int_list2)) else filter (noteq (int1)) (int_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> case <> (int1) (int2)(rank : 6)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : <> (int1) (int2) = true
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))) else (int2::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))))) = (int1::(int2::uniq (filter (noteq (int2)) (filter (noteq (int1)) (int_list2)))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case a_eq (int1) (int2)(rank:7)
=================================================
Progress: 12


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))) else (int2::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))))) = (int1::uniq (if <> (int1) (int2) then (int2::filter (noteq (int1)) (int_list2)) else filter (noteq (int1)) (int_list2)))

0 goal(s) more...

1 conjecture(s) more...
>>> case a_eq (int1) (int2)(rank : 6)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2)))) = (int1::uniq (if <> (int1) (int2) then (int2::filter (noteq (int1)) (int_list2)) else filter (noteq (int1)) (int_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case <> (int1) (int2)(rank:7)
=================================================
Progress: 13


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : <> (int1) (int2) = true
---------------------------------------
(int1::if a_eq (int1) (int2) then remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))) else (int2::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2))))) = (int1::(int2::uniq (filter (noteq (int2)) (filter (noteq (int1)) (int_list2)))))

1 goal(s) more...

1 conjecture(s) more...
>>> case a_eq (int1) (int2)(rank : 7)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : <> (int1) (int2) = true
Case2 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2)))) = (int1::(int2::uniq (filter (noteq (int2)) (filter (noteq (int1)) (int_list2)))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int1
case <> (int1) (int2)
case a_eq (int1) (int2)
New Env

;;
Lemma List
forall (arg1:a -> bool) (int1:int) (int2:int) (int_list2:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (arg1) (int_list2)))) = (int1::(int2::uniq (filter (arg1) (filter (noteq (int1)) (int_list2)))))
End of Lemma List


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : <> (int1) (int2) = true
Case2 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2)))) = (int1::(int2::uniq (filter (noteq (int2)) (filter (noteq (int1)) (int_list2)))))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 14


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : <> (int1) (int2) = true
Case2 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2)))) = (int1::(int2::uniq (filter (noteq (int2)) (filter (noteq (int1)) (int_list2)))))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg1:a -> bool) (int1:int) (int2:int) (int_list2:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (arg1) (int_list2)))) = (int1::(int2::uniq (filter (arg1) (filter (noteq (int1)) (int_list2)))))(rank : 0)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

---------------------------------------
forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 15


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2)))) = (int1::uniq (if <> (int1) (int2) then (int2::filter (noteq (int1)) (int_list2)) else filter (noteq (int1)) (int_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case <> (int1) (int2)(rank : 7)


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
Case2 : <> (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2)))) = (int1::(int2::uniq (filter (noteq (int2)) (filter (noteq (int1)) (int_list2)))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro int1
case a_eq (int1) (int2)
case <> (int1) (int2)
New Env

;;
Lemma List
forall (arg2:a -> bool) (int1:int) (int2:int) (int_list2:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (arg2) (int_list2)))) = (int1::(int2::uniq (filter (arg2) (filter (noteq (int1)) (int_list2)))))
End of Lemma List


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
Case2 : <> (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2)))) = (int1::(int2::uniq (filter (noteq (int2)) (filter (noteq (int1)) (int_list2)))))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 16


1st goal of : forall (int1:int) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (int_list1))) = (int1::uniq (filter (noteq (int1)) (int_list1)))
int_list1 : int list
int2 : int
int_list2 : int list
IH1 : forall (int1:int), (int1::remove_elem_ta1 (int1) (uniq (int_list2))) = (int1::uniq (filter (noteq (int1)) (int_list2)))
Inductive1 : int_list1 = (int2::int_list2)
int1 : int
Case1 : a_eq (int1) (int2) = true
Case2 : <> (int1) (int2) = true
---------------------------------------
(int1::remove_elem_ta1 (int1) (uniq (filter (noteq (int2)) (int_list2)))) = (int1::(int2::uniq (filter (noteq (int2)) (filter (noteq (int1)) (int_list2)))))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg2:a -> bool) (int1:int) (int2:int) (int_list2:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (arg2) (int_list2)))) = (int1::(int2::uniq (filter (arg2) (filter (noteq (int1)) (int_list2)))))(rank : 0)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

---------------------------------------
forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int1(rank:7)
=================================================
Progress: 17


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

---------------------------------------
forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
---------------------------------------
forall (a2bool1:a -> bool) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 18


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

---------------------------------------
forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int1(rank : 7)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
---------------------------------------
forall (a2bool1:a -> bool) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro int2(rank:7)
=================================================
Progress: 19


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
---------------------------------------
forall (a2bool1:a -> bool) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
---------------------------------------
forall (a2bool1:a -> bool) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 20


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
---------------------------------------
forall (a2bool1:a -> bool) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro int2(rank : 7)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
---------------------------------------
forall (a2bool1:a -> bool) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 21


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
---------------------------------------
forall (a2bool1:a -> bool) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
---------------------------------------
forall (a2bool1:a -> bool) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 22


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
---------------------------------------
forall (a2bool1:a -> bool) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
forall (a2bool1:a -> bool) (int_list1:int list), <> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 23


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
---------------------------------------
forall (a2bool1:a -> bool) (int_list1:int list), a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
---------------------------------------
forall (a2bool1:a -> bool) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:8)
=================================================
Progress: 24


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
forall (a2bool1:a -> bool) (int_list1:int list), <> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
---------------------------------------
forall (a2bool1:a -> bool) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:8)
=================================================
Progress: 25


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
---------------------------------------
forall (a2bool1:a -> bool) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> induction int_list1(rank : 8)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (a2bool1:a -> bool), (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) ((Nil))))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) ((Nil))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 26


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
---------------------------------------
forall (a2bool1:a -> bool) (int_list1:int list), (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))

0 goal(s) more...

2 conjecture(s) more...
>>> induction int_list1(rank : 8)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (a2bool1:a -> bool), (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) ((Nil))))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) ((Nil))))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 27


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (a2bool1:a -> bool), (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) ((Nil))))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) ((Nil))))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (a2bool1:a -> bool), (int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro a2bool1(rank:8)
=================================================
Progress: 28


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (a2bool1:a -> bool), (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) ((Nil))))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) ((Nil))))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (a2bool1:a -> bool), (int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro a2bool1(rank:8)
=================================================
Progress: 29


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (a2bool1:a -> bool), (int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> intro a2bool1(rank : 8)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
a2bool1 : a -> bool
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro a2bool1
New Env

;;
Lemma List
forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
End of Lemma List


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
a2bool1 : a -> bool
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 30


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
a2bool1 : a -> bool
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))(rank : 0)


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int1(rank:9)
=================================================
Progress: 31


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
forall (a2bool1:a -> bool), (int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> intro a2bool1(rank : 8)


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
a2bool1 : a -> bool
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro a2bool1
New Env

;;
Lemma List
forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
End of Lemma List


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
a2bool1 : a -> bool
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 32


1st goal of : forall (a2bool1:a -> bool) (int1:int) (int2:int) (int_list1:int list), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::remove_elem_ta1 (int1) (uniq (filter (a2bool1) (int_list1)))) = (int1::(int2::uniq (filter (a2bool1) (filter (noteq (int1)) (int_list1)))))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
a2bool1 : a -> bool
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))(rank : 0)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int1(rank:9)
=================================================
Progress: 33


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int1(rank : 9)


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
---------------------------------------
forall (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int2(rank:9)
=================================================
Progress: 34


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int1(rank : 9)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
---------------------------------------
forall (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro int2(rank:9)
=================================================
Progress: 35


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
---------------------------------------
forall (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int2(rank : 9)


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
---------------------------------------
<> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 36


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
---------------------------------------
forall (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro int2(rank : 9)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
---------------------------------------
a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 37


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
---------------------------------------
<> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
---------------------------------------
a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9)
=================================================
Progress: 38


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
---------------------------------------
a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
<> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9)
=================================================
Progress: 39


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
---------------------------------------
a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9)


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
New Env

;;
Lemma List
forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
End of Lemma List


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 40


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))(rank : 0)


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro int1(rank:11)
=================================================
Progress: 41


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
<> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
New Env

;;
Lemma List
forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
End of Lemma List


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 42


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))(rank : 0)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro int1(rank:11)
=================================================
Progress: 43


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro int1(rank : 11)


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
---------------------------------------
forall (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro int2(rank:11)
=================================================
Progress: 44


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

---------------------------------------
forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro int1(rank : 11)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
---------------------------------------
forall (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro int2(rank:11)
=================================================
Progress: 45


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
---------------------------------------
forall (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro int2(rank : 11)


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
---------------------------------------
<> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 46


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
---------------------------------------
forall (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro int2(rank : 11)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
---------------------------------------
a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 47


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
---------------------------------------
<> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
---------------------------------------
a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 48


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
---------------------------------------
a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
<> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 49


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
---------------------------------------
a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (int1:int) (int2:int), <> (int1) (int2) = true->a_eq (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : <> (int1) (int2) = true
Cond2 : a_eq (int1) (int2) = true
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 50


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
---------------------------------------
<> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (int1:int) (int2:int), a_eq (int1) (int2) = true-><> (int1) (int2) = true -> (int1::(Nil)) = (int1::(int2::(Nil)))
int1 : int
int2 : int
Cond1 : a_eq (int1) (int2) = true
Cond2 : <> (int1) (int2) = true
---------------------------------------
(int1::(Nil)) = (int1::(int2::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 196, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
