Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = findStation (lambda1) (V (" "))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:5.)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = findStation (lambda1) (V (" "))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 5.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = findStation (V (string1)) (V (" "))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = findStation (V (string1)) (V (" "))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = findStation (P (string1) (lambda2)) (V (" "))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = findStation (P (string1) (lambda2)) (V (" "))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = findStation (lambda2) (P (string1) (V (" ")))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
parent
(string1::(Nil))
lower
Cons(_, Nil())
upper
sub_check_ta1(lambda2, _)
remove upper
Nil()
remove lower
Nil()
remove upper
Cons(string1, Nil())
remove lower
Cons(string1, Nil())
remove upper
Cons(string2, Cons(string1, Nil()))
remove lower
Cons(string2, Cons(string1, Nil()))
remove upper
Cons(string3, Cons(string2, Cons(string1, Nil())))
remove lower
Cons(string3, Cons(string2, Cons(string1, Nil())))
parent
P (string1) (V (" "))
lower
P(_, V(Concat(Neg(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), EmptyString())))
upper
findStation(lambda2, _)
remove upper
V(Concat(Neg(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), EmptyString()))
remove lower
V(Concat(Neg(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), EmptyString()))
remove upper
P(string1, V(Concat(Neg(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), EmptyString())))
remove lower
P(string1, V(Concat(Neg(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), EmptyString())))
remove upper
P(string2, P(string1, V(Concat(Neg(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), EmptyString()))))
remove lower
P(string2, P(string1, V(Concat(Neg(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), EmptyString()))))
remove upper
P(string3, P(string2, P(string1, V(Concat(Neg(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), EmptyString())))))
remove lower
P(string3, P(string2, P(string1, V(Concat(Neg(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(Z())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), EmptyString())))))
New Env
let rec mk_rhs1 arg_1 =
match (arg_1) with
| Nil -> V (" ")
| Cons hd tl -> P (hd) (mk_rhs1 (tl))
;;
Lemma List
forall , mk_rhs1 ((Nil)) = V (" ")
forall (string1:string) (string_list1:string list), mk_rhs1 ((string1::string_list1)) = P (string1) (mk_rhs1 (string_list1))
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = findStation (lambda2) (P (string1) (V (" ")))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = findStation (lambda2) (P (string1) (V (" ")))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7.)
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = findStation (V (string1)) (mk_rhs1 (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = findStation (V (string1)) (mk_rhs1 (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = valify (string1) (mk_rhs1 (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:16.)
intro string_list1(rank:23.)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = valify (string1) (mk_rhs1 (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 16.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
is_mem_ta1 ((Nil)) (string1) = valify (string1) (mk_rhs1 ((Nil)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
is_mem_ta1 ((Nil)) (string1) = valify (string1) (mk_rhs1 ((Nil)))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = valify (string1) (mk_rhs1 (string_list2))
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
is_mem_ta1 ((string2::string_list2)) (string1) = valify (string1) (mk_rhs1 ((string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = valify (string1) (mk_rhs1 (string_list2))
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
is_mem_ta1 ((string2::string_list2)) (string1) = valify (string1) (mk_rhs1 ((string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = valify (string1) (mk_rhs1 (string_list2))
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else valify (string1) (mk_rhs1 (string_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = valify (string1) (mk_rhs1 (string_list2))
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else valify (string1) (mk_rhs1 (string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = valify (string1) (mk_rhs1 (string_list2))
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = valify (string1) (mk_rhs1 (string_list2))
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = valify (string1) (mk_rhs1 (string_list2))
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = valify (string1) (mk_rhs1 (string_list2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = valify (string1) (mk_rhs1 (string_list2))
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = valify (string1) (mk_rhs1 (string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = valify (string1) (mk_rhs1 (string_list2))
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
valify (string1) (mk_rhs1 (string_list2)) = valify (string1) (mk_rhs1 (string_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = valify (string1) (mk_rhs1 (string_list2))
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
valify (string1) (mk_rhs1 (string_list2)) = valify (string1) (mk_rhs1 (string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (P (string1) (lambda2)) (string_list1) = findStation (P (string1) (lambda2)) (mk_rhs1 (string_list1))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (P (string1) (lambda2)) (string_list1) = findStation (P (string1) (lambda2)) (mk_rhs1 (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) ((string1::string_list1)) = findStation (lambda2) (P (string1) (mk_rhs1 (string_list1)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:14.)
intro string_list1(rank:22.)
induction string_list1(rank:23.)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) ((string1::string_list1)) = findStation (lambda2) (P (string1) (mk_rhs1 (string_list1)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), findStation (lambda2) (mk_rhs1 ((string1::string_list1))) = findStation (lambda2) (P (string1) (mk_rhs1 (string_list1)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), findStation (lambda2) (mk_rhs1 ((string1::string_list1))) = findStation (lambda2) (P (string1) (mk_rhs1 (string_list1)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (C (lambda2) (lambda3)) (string_list1) = findStation (C (lambda2) (lambda3)) (mk_rhs1 (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (C (lambda2) (lambda3)) (string_list1) = findStation (C (lambda2) (lambda3)) (mk_rhs1 (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if findStation (lambda2) (mk_rhs1 (string_list1)) then findStation (lambda3) (mk_rhs1 (string_list1)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:6.)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if findStation (lambda2) (mk_rhs1 (string_list1)) then findStation (lambda3) (mk_rhs1 (string_list1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (mk_rhs1 ((Nil))) then findStation (lambda3) (mk_rhs1 ((Nil))) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (mk_rhs1 ((Nil))) then findStation (lambda3) (mk_rhs1 ((Nil))) else false

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (mk_rhs1 ((Nil))) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case findStation (lambda2) (V (" "))(rank:7.)
rewrite <- IH2 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:14.)
rewrite IH2 in goal at 0(rank:14.)
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (mk_rhs1 ((Nil))) else false

1 goal(s) more...

1 conjecture(s) more...
>>> case findStation (lambda2) (V (" "))(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case sub_check_ta1 (lambda2) ((Nil))(rank:8.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((Nil))(rank : 8.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:8.)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 8.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
findStation (lambda3) (mk_rhs1 ((Nil))) = findStation (lambda3) (V (" "))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
findStation (lambda3) (mk_rhs1 ((Nil))) = findStation (lambda3) (V (" "))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
false = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7.)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
false = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:7.)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
findStation (lambda2) (mk_rhs1 ((Nil))) = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
findStation (lambda2) (mk_rhs1 ((Nil))) = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
findStation (lambda2) (V (" ")) = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
findStation (lambda2) (V (" ")) = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
true = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case findStation (lambda2) (V (" "))
case sub_check_ta1 (lambda2) ((Nil))
rewrite IH2 in goal at 0
reflexivity
rewrite <- Case2 in goal at 0
rewrite IH1 in goal at 0
simpl in goal
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = findStation (V ("wjx")) (V (" "))
Prop: true = findStation (V ("sne")) (V (" "))
Prop: true = findStation (V ("pia")) (V (" "))
asdf
previous tactics
simpl in goal
case findStation (lambda2) (V (" "))
case sub_check_ta1 (lambda2) ((Nil))
rewrite IH2 in goal at 0
reflexivity
rewrite <- Case2 in goal at 0
rewrite IH1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: findStation (V ("ibr")) (V (" ")) = findStation (V ("jpg")) (V (" "))
Prop: findStation (V ("nxx")) (V (" ")) = findStation (V ("sto")) (V (" "))
Prop: findStation (C (V ("bcz")) (V ("owz"))) (V (" ")) = findStation (V ("wsb")) (V (" "))
Lemma List
forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
findStation (lambda2) (V (" ")) = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
Case2 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
findStation (lambda2) (V (" ")) = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))(rank : 0.)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))

---------------------------------------
forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13.)
=================================================
Progress: 31


1st goal of : forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))

---------------------------------------
forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 13.)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (lambda2:lambda), findStation (V (string1)) (V (" ")) = true->sub_check_ta1 (V (string1)) ((Nil)) = false -> findStation (V (string1)) (V (" ")) = findStation (lambda2) (V (" "))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:12.)
=================================================
Progress: 32


1st goal of : forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (lambda2:lambda), findStation (V (string1)) (V (" ")) = true->sub_check_ta1 (V (string1)) ((Nil)) = false -> findStation (V (string1)) (V (" ")) = findStation (lambda2) (V (" "))

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 12.)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), findStation (lambda3) (V (" ")) = true->sub_check_ta1 (lambda3) ((Nil)) = false -> findStation (lambda3) (V (" ")) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), findStation (P (string1) (lambda3)) (V (" ")) = true->sub_check_ta1 (P (string1) (lambda3)) ((Nil)) = false -> findStation (P (string1) (lambda3)) (V (" ")) = findStation (lambda2) (V (" "))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 33


1st goal of : forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), findStation (lambda3) (V (" ")) = true->sub_check_ta1 (lambda3) ((Nil)) = false -> findStation (lambda3) (V (" ")) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), findStation (P (string1) (lambda3)) (V (" ")) = true->sub_check_ta1 (P (string1) (lambda3)) ((Nil)) = false -> findStation (P (string1) (lambda3)) (V (" ")) = findStation (lambda2) (V (" "))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), findStation (lambda3) (V (" ")) = true->sub_check_ta1 (lambda3) ((Nil)) = false -> findStation (lambda3) (V (" ")) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), findStation (lambda3) (P (string1) (V (" "))) = true->sub_check_ta1 (lambda3) ((string1::(Nil))) = false -> findStation (lambda3) (P (string1) (V (" "))) = findStation (lambda2) (V (" "))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 34


1st goal of : forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), findStation (lambda3) (V (" ")) = true->sub_check_ta1 (lambda3) ((Nil)) = false -> findStation (lambda3) (V (" ")) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), findStation (lambda3) (P (string1) (V (" "))) = true->sub_check_ta1 (lambda3) ((string1::(Nil))) = false -> findStation (lambda3) (P (string1) (V (" "))) = findStation (lambda2) (V (" "))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), findStation (lambda3) (V (" ")) = true->sub_check_ta1 (lambda3) ((Nil)) = false -> findStation (lambda3) (V (" ")) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda3)
Cond1 : findStation (lambda3) (P (string1) (V (" "))) = true
---------------------------------------
forall (lambda2:lambda), sub_check_ta1 (lambda3) ((string1::(Nil))) = false -> findStation (lambda3) (P (string1) (V (" "))) = findStation (lambda2) (V (" "))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:12.)
=================================================
Progress: 35


1st goal of : forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), findStation (lambda3) (V (" ")) = true->sub_check_ta1 (lambda3) ((Nil)) = false -> findStation (lambda3) (V (" ")) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda3)
Cond1 : findStation (lambda3) (P (string1) (V (" "))) = true
---------------------------------------
forall (lambda2:lambda), sub_check_ta1 (lambda3) ((string1::(Nil))) = false -> findStation (lambda3) (P (string1) (V (" "))) = findStation (lambda2) (V (" "))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 12.)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), findStation (lambda1) (V (" ")) = true->sub_check_ta1 (lambda1) ((Nil)) = false -> findStation (lambda1) (V (" ")) = findStation (lambda2) (V (" "))
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), findStation (lambda3) (V (" ")) = true->sub_check_ta1 (lambda3) ((Nil)) = false -> findStation (lambda3) (V (" ")) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda3)
Cond1 : findStation (lambda3) (P (string1) (V (" "))) = true
Cond2 : sub_check_ta1 (lambda3) ((string1::(Nil))) = false
---------------------------------------
forall (lambda2:lambda), findStation (lambda3) (P (string1) (V (" "))) = findStation (lambda2) (V (" "))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction lambda2(rank:22.)
rewrite Cond1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 36


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (mk_rhs1 ((Nil))) else false

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
if findStation (lambda2) (mk_rhs1 ((Nil))) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (mk_rhs1 ((Nil))) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
if findStation (lambda2) (mk_rhs1 ((Nil))) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (mk_rhs1 ((Nil))) else false

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
if findStation (lambda2) (V (" ")) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (mk_rhs1 ((Nil))) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case findStation (lambda2) (V (" "))(rank:7.)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
if findStation (lambda2) (V (" ")) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (mk_rhs1 ((Nil))) else false

1 goal(s) more...

1 conjecture(s) more...
>>> case findStation (lambda2) (V (" "))(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:7.)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
---------------------------------------
findStation (lambda3) (mk_rhs1 ((Nil))) = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = true
---------------------------------------
findStation (lambda3) (mk_rhs1 ((Nil))) = findStation (lambda3) (V (" "))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = false
---------------------------------------
false = false

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Base1 : string_list1 = (Nil)
Case1 : findStation (lambda2) (V (" ")) = false
---------------------------------------
false = false

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list2)) then sub_check_ta1 (lambda3) ((string1::string_list2)) else false = if findStation (lambda2) (mk_rhs1 ((string1::string_list2))) then findStation (lambda3) (mk_rhs1 ((string1::string_list2))) else false

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 7
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 42


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list2)) then sub_check_ta1 (lambda3) ((string1::string_list2)) else false = if findStation (lambda2) (mk_rhs1 ((string1::string_list2))) then findStation (lambda3) (mk_rhs1 ((string1::string_list2))) else false

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list2)) then sub_check_ta1 (lambda3) ((string1::string_list2)) else false = if findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) then findStation (lambda3) (mk_rhs1 ((string1::string_list2))) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case findStation (lambda2) (P (string1) (mk_rhs1 (string_list2)))(rank:6.)
rewrite <- IH2 in goal at 0(rank:13.)
rewrite IH1 in goal at 0(rank:13.)
rewrite IH2 in goal at 0(rank:13.)
=================================================
Progress: 43


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list2)) then sub_check_ta1 (lambda3) ((string1::string_list2)) else false = if findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) then findStation (lambda3) (mk_rhs1 ((string1::string_list2))) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case findStation (lambda2) (P (string1) (mk_rhs1 (string_list2)))(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list2)) then sub_check_ta1 (lambda3) ((string1::string_list2)) else false = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case sub_check_ta1 (lambda2) ((string1::string_list2))(rank:7.)
rewrite IH1 in goal at 0(rank:14.)
rewrite IH2 in goal at 0(rank:22.)
=================================================
Progress: 44


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list2)) then sub_check_ta1 (lambda3) ((string1::string_list2)) else false = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string1::string_list2))(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list2)) = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:7.)
=================================================
Progress: 45


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list2)) = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 7.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = true
---------------------------------------
findStation (lambda3) (mk_rhs1 ((string1::string_list2))) = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = true
---------------------------------------
findStation (lambda3) (mk_rhs1 ((string1::string_list2))) = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = false
---------------------------------------
false = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:6.)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = false
---------------------------------------
false = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = false
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list2)) = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = false
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list2)) = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = false
---------------------------------------
findStation (lambda2) (mk_rhs1 ((string1::string_list2))) = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- rhs_lemma4 in goal at 0(rank:6.)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = false
---------------------------------------
findStation (lambda2) (mk_rhs1 ((string1::string_list2))) = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma4 in goal at 0(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = false
---------------------------------------
findStation (lambda2) (mk_rhs1 ((string1::string_list2))) = findStation (lambda3) (mk_rhs1 ((string1::string_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:6.)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = false
---------------------------------------
findStation (lambda2) (mk_rhs1 ((string1::string_list2))) = findStation (lambda3) (mk_rhs1 ((string1::string_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = false
---------------------------------------
findStation (lambda2) (mk_rhs1 ((string1::string_list2))) = sub_check_ta1 (lambda3) ((string1::string_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = false
---------------------------------------
findStation (lambda2) (mk_rhs1 ((string1::string_list2))) = sub_check_ta1 (lambda3) ((string1::string_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list2)) = false
---------------------------------------
findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = sub_check_ta1 (lambda3) ((string1::string_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14.)
rewrite Case1 in goal at 0(rank:22.)
=================================================
Progress: 52


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list2)) then sub_check_ta1 (lambda3) ((string1::string_list2)) else false = if findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) then findStation (lambda3) (mk_rhs1 ((string1::string_list2))) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
---------------------------------------
if findStation (lambda2) (mk_rhs1 ((string1::string_list2))) then sub_check_ta1 (lambda3) ((string1::string_list2)) else false = if findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) then findStation (lambda3) (mk_rhs1 ((string1::string_list2))) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 53


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
---------------------------------------
if findStation (lambda2) (mk_rhs1 ((string1::string_list2))) then sub_check_ta1 (lambda3) ((string1::string_list2)) else false = if findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) then findStation (lambda3) (mk_rhs1 ((string1::string_list2))) else false

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
---------------------------------------
if findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) then sub_check_ta1 (lambda3) ((string1::string_list2)) else false = if findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) then findStation (lambda3) (mk_rhs1 ((string1::string_list2))) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case findStation (lambda2) (P (string1) (mk_rhs1 (string_list2)))(rank:6.)
=================================================
Progress: 54


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
---------------------------------------
if findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) then sub_check_ta1 (lambda3) ((string1::string_list2)) else false = if findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) then findStation (lambda3) (mk_rhs1 ((string1::string_list2))) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case findStation (lambda2) (P (string1) (mk_rhs1 (string_list2)))(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list2)) = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:6.)
=================================================
Progress: 55


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list2)) = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 6.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
---------------------------------------
findStation (lambda3) (mk_rhs1 ((string1::string_list2))) = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 56


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = true
---------------------------------------
findStation (lambda3) (mk_rhs1 ((string1::string_list2))) = findStation (lambda3) (P (string1) (mk_rhs1 (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = false
---------------------------------------
false = false

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 57


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = findStation (lambda2) (mk_rhs1 (string_list1))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = findStation (lambda3) (mk_rhs1 (string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
string1 : string
string_list2 : string list
IH3 : if sub_check_ta1 (lambda2) (string_list2) then sub_check_ta1 (lambda3) (string_list2) else false = if findStation (lambda2) (mk_rhs1 (string_list2)) then findStation (lambda3) (mk_rhs1 (string_list2)) else false
Inductive2 : string_list1 = (string1::string_list2)
Case1 : findStation (lambda2) (P (string1) (mk_rhs1 (string_list2))) = false
---------------------------------------
false = false

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = findStation (lambda2) (P (string1) (V (" ")))

1 goal(s) more...

0 conjecture(s) more...
original goal
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lemma
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
tactics
assert forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
induction lambda1
simpl in goal
induction string_list1
reflexivity
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
induction string_list1
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
case findStation (lambda2) (V (" "))
rewrite IH2 in goal at 0
reflexivity
reflexivity
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
case findStation (lambda2) (P (string1) (mk_rhs1 (string_list2)))
rewrite IH2 in goal at 0
reflexivity
reflexivity
Deduplication: 6
Tactic List : 1
rewrite lemma5 in goal at 0(rank:4.)
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = findStation (lambda2) (P (string1) (V (" ")))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma5 in goal at 0(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
findStation (lambda2) (mk_rhs1 ((string1::(Nil)))) = findStation (lambda2) (P (string1) (V (" ")))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
findStation (lambda2) (mk_rhs1 ((string1::(Nil)))) = findStation (lambda2) (P (string1) (V (" ")))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) ((Nil)) = findStation (C (lambda2) (lambda3)) (V (" "))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) ((Nil)) = findStation (C (lambda2) (lambda3)) (V (" "))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case sub_check_ta1 (lambda2) ((Nil))(rank:4.)
rewrite IH1 in goal at 0(rank:11.)
rewrite lemma5 in goal at 0(rank:11.)
rewrite lemma5 in goal at 1(rank:11.)
rewrite lemma5 in goal at 2(rank:11.)
rewrite <- IH1 in goal at 0(rank:11.)
rewrite IH2 in goal at 0(rank:11.)
case findStation (lambda2) (V (" "))(rank:4.)
rewrite <- IH2 in goal at 0(rank:11.)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((Nil))(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case findStation (lambda2) (V (" "))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite lemma5 in goal at 0(rank:12.)
rewrite <- IH1 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:12.)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case findStation (lambda2) (V (" "))(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : findStation (lambda2) (V (" ")) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = findStation (lambda3) (V (" "))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite IH1 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:12.)
rewrite lemma5 in goal at 2(rank:20.)
rewrite lemma5 in goal at 0(rank:20.)
rewrite lemma5 in goal at 1(rank:20.)
rewrite IH2 in goal at 0(rank:12.)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case findStation (lambda2) (V (" "))(rank : 5.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
Case2 : findStation (lambda2) (V (" ")) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:13.)
rewrite lemma5 in goal at 0(rank:13.)
rewrite <- IH2 in goal at 0(rank:13.)
=================================================
Progress: 64


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if findStation (lambda2) (V (" ")) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case findStation (lambda2) (V (" "))(rank:4.)
=================================================
Progress: 65


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if findStation (lambda2) (V (" ")) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case findStation (lambda2) (V (" "))(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : findStation (lambda2) (V (" ")) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:12.)
rewrite lemma5 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:12.)
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then findStation (lambda3) (V (" ")) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case findStation (lambda2) (V (" "))(rank:4.)
rewrite lemma5 in goal at 0(rank:11.)
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then findStation (lambda3) (V (" ")) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case findStation (lambda2) (V (" "))(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : findStation (lambda2) (V (" ")) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then findStation (lambda3) (V (" ")) else false = findStation (lambda3) (V (" "))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 1(rank:20.)
rewrite <- IH2 in goal at 2(rank:20.)
rewrite lemma5 in goal at 0(rank:20.)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma5 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if findStation (lambda2) (mk_rhs1 ((Nil))) then findStation (lambda3) (mk_rhs1 ((Nil))) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma5 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if findStation (lambda2) (mk_rhs1 ((Nil))) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:11.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 70


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma5 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then findStation (lambda3) (mk_rhs1 ((Nil))) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case findStation (lambda2) (V (" "))(rank:4.)
rewrite <- IH1 in goal at 0(rank:11.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 71


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then findStation (lambda3) (mk_rhs1 ((Nil))) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case findStation (lambda2) (V (" "))(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : findStation (lambda2) (V (" ")) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then findStation (lambda3) (mk_rhs1 ((Nil))) else false = findStation (lambda3) (V (" "))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 0(rank:12.)
rewrite lemma5 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:12.)
rewrite <- lemma5 in goal at 0(rank:20.)
=================================================
Progress: 72


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if sub_check_ta1 (lambda2) ((Nil)) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) ((Nil))(rank:4.)
=================================================
Progress: 73


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if sub_check_ta1 (lambda2) ((Nil)) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((Nil))(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:12.)
rewrite lemma5 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:12.)
=================================================
Progress: 74


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then findStation (lambda3) (V (" ")) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then sub_check_ta1 (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) ((Nil))(rank:4.)
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if findStation (lambda2) (V (" ")) then sub_check_ta1 (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((Nil))(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if findStation (lambda2) (V (" ")) then sub_check_ta1 (lambda3) ((Nil)) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case findStation (lambda2) (V (" "))(rank:5.)
rewrite lemma5 in goal at 1(rank:12.)
rewrite IH2 in goal at 0(rank:20.)
rewrite IH2 in goal at 1(rank:20.)
rewrite IH2 in goal at 2(rank:20.)
rewrite lemma5 in goal at 0(rank:20.)
rewrite lemma5 in goal at 2(rank:20.)
rewrite <- IH1 in goal at 0(rank:12.)
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if findStation (lambda2) (V (" ")) then sub_check_ta1 (lambda3) ((Nil)) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case findStation (lambda2) (V (" "))(rank : 5.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
Case2 : findStation (lambda2) (V (" ")) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = sub_check_ta1 (lambda3) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
Case2 : findStation (lambda2) (V (" ")) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = sub_check_ta1 (lambda3) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = false
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
Case2 : findStation (lambda2) (V (" ")) = false
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = false

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:3.)
=================================================
Progress: 78


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = false
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
Case2 : findStation (lambda2) (V (" ")) = false
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = false

1 goal(s) more...

0 conjecture(s) more...
>>> discriminate(rank : 3.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : false = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
false = if findStation (lambda2) (V (" ")) then sub_check_ta1 (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 7
Tactic List : 10
case findStation (lambda2) (V (" "))(rank:4.)
rewrite IH1 in goal at 1(rank:11.)
rewrite <- Case1 in goal at 1(rank:11.)
rewrite IH1 in goal at 2(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite lemma5 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 2(rank:19.)
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 79


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : false = findStation (lambda2) (V (" "))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = false
---------------------------------------
false = if findStation (lambda2) (V (" ")) then sub_check_ta1 (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case findStation (lambda2) (V (" "))(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : false = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = false
Case2 : findStation (lambda2) (V (" ")) = true
---------------------------------------
false = sub_check_ta1 (lambda3) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
discriminate(rank:3.)
=================================================
Progress: 80


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : false = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = false
Case2 : findStation (lambda2) (V (" ")) = true
---------------------------------------
false = sub_check_ta1 (lambda3) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> discriminate(rank : 3.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : false = false
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = false
Case2 : findStation (lambda2) (V (" ")) = false
---------------------------------------
false = false

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:0.)
=================================================
Progress: 81


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : false = false
IH2 : sub_check_ta1 (lambda3) ((Nil)) = findStation (lambda3) (V (" "))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = false
Case2 : findStation (lambda2) (V (" ")) = false
---------------------------------------
false = false

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0.)


No conjecture
Proof Success
Proof
assert forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
simpl in goal
induction lambda1
reflexivity
simpl in goal
define mk_rhs1 arg_1 =
match (arg_1) with
| Nil -> V (" ")
| Cons hd tl -> P (hd) (mk_rhs1 (tl))
assert forall , mk_rhs1 ((Nil)) = V (" ")
reflexivity
assert forall (string1:string) (string_list1:string list), mk_rhs1 ((string1::string_list1)) = P (string1) (mk_rhs1 (string_list1))
reflexivity
assert forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = findStation (lambda1) (mk_rhs1 (string_list1))
induction lambda1
simpl in goal
induction string_list1
reflexivity
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
induction string_list1
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
case findStation (lambda2) (V (" "))
rewrite IH2 in goal at 0
reflexivity
reflexivity
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
case findStation (lambda2) (P (string1) (mk_rhs1 (string_list2)))
rewrite IH2 in goal at 0
reflexivity
reflexivity
rewrite lemma5 in goal at 0
reflexivity
simpl in goal
rewrite <- IH2 in goal at 0
case sub_check_ta1 (lambda2) ((Nil))
case findStation (lambda2) (V (" "))
reflexivity
discriminate
case findStation (lambda2) (V (" "))
discriminate
reflexivity
Qed
